
Transimitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003650  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800370c  0800370c  0001370c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800374c  0800374c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800374c  0800374c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800374c  0800374c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003750  08003750  00013750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000014  08003768  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003768  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083fb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190e  00000000  00000000  00028437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  00029d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a85d  00000000  00000000  0002ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093f5  00000000  00000000  000453ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fe69  00000000  00000000  0004e7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee64b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000199c  00000000  00000000  000ee6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080036f4 	.word	0x080036f4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	080036f4 	.word	0x080036f4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_1


void CS_Select (void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <CS_Select+0x18>)
 8000222:	2200      	movs	r2, #0
 8000224:	2102      	movs	r1, #2
 8000226:	0018      	movs	r0, r3
 8000228:	f001 fe1d 	bl	8001e66 <HAL_GPIO_WritePin>
}
 800022c:	46c0      	nop			; (mov r8, r8)
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	48000400 	.word	0x48000400

08000238 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <CS_UnSelect+0x18>)
 800023e:	2201      	movs	r2, #1
 8000240:	2102      	movs	r1, #2
 8000242:	0018      	movs	r0, r3
 8000244:	f001 fe0f 	bl	8001e66 <HAL_GPIO_WritePin>
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	48000400 	.word	0x48000400

08000254 <CE_Enable>:


void CE_Enable (void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <CE_Enable+0x18>)
 800025a:	2201      	movs	r2, #1
 800025c:	2101      	movs	r1, #1
 800025e:	0018      	movs	r0, r3
 8000260:	f001 fe01 	bl	8001e66 <HAL_GPIO_WritePin>
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	48000400 	.word	0x48000400

08000270 <CE_Disable>:

void CE_Disable (void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <CE_Disable+0x18>)
 8000276:	2200      	movs	r2, #0
 8000278:	2101      	movs	r1, #1
 800027a:	0018      	movs	r0, r3
 800027c:	f001 fdf3 	bl	8001e66 <HAL_GPIO_WritePin>
}
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	48000400 	.word	0x48000400

0800028c <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	0002      	movs	r2, r0
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	701a      	strb	r2, [r3, #0]
 8000298:	1dbb      	adds	r3, r7, #6
 800029a:	1c0a      	adds	r2, r1, #0
 800029c:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2220      	movs	r2, #32
 80002a4:	4313      	orrs	r3, r2
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	240c      	movs	r4, #12
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	701a      	strb	r2, [r3, #0]
	buf[1] = Data;
 80002ae:	193b      	adds	r3, r7, r4
 80002b0:	1dba      	adds	r2, r7, #6
 80002b2:	7812      	ldrb	r2, [r2, #0]
 80002b4:	705a      	strb	r2, [r3, #1]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002b6:	f7ff ffb1 	bl	800021c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80002ba:	23fa      	movs	r3, #250	; 0xfa
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	1939      	adds	r1, r7, r4
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <nrf24_WriteReg+0x48>)
 80002c2:	2202      	movs	r2, #2
 80002c4:	f002 fba0 	bl	8002a08 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80002c8:	f7ff ffb6 	bl	8000238 <CS_UnSelect>
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b005      	add	sp, #20
 80002d2:	bd90      	pop	{r4, r7, pc}
 80002d4:	20000050 	.word	0x20000050

080002d8 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b087      	sub	sp, #28
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60b9      	str	r1, [r7, #8]
 80002e0:	607a      	str	r2, [r7, #4]
 80002e2:	210f      	movs	r1, #15
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	1c02      	adds	r2, r0, #0
 80002e8:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2220      	movs	r2, #32
 80002f0:	4313      	orrs	r3, r2
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	2414      	movs	r4, #20
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	701a      	strb	r2, [r3, #0]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002fa:	f7ff ff8f 	bl	800021c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80002fe:	1939      	adds	r1, r7, r4
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <nrf24_WriteRegMulti+0x50>)
 8000302:	2364      	movs	r3, #100	; 0x64
 8000304:	2201      	movs	r2, #1
 8000306:	f002 fb7f 	bl	8002a08 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	b29a      	uxth	r2, r3
 800030e:	23fa      	movs	r3, #250	; 0xfa
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	68b9      	ldr	r1, [r7, #8]
 8000314:	4804      	ldr	r0, [pc, #16]	; (8000328 <nrf24_WriteRegMulti+0x50>)
 8000316:	f002 fb77 	bl	8002a08 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800031a:	f7ff ff8d 	bl	8000238 <CS_UnSelect>
}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	46bd      	mov	sp, r7
 8000322:	b007      	add	sp, #28
 8000324:	bd90      	pop	{r4, r7, pc}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	20000050 	.word	0x20000050

0800032c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800032c:	b590      	push	{r4, r7, lr}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	0002      	movs	r2, r0
 8000334:	1dfb      	adds	r3, r7, #7
 8000336:	701a      	strb	r2, [r3, #0]
	uint8_t data=0;
 8000338:	240f      	movs	r4, #15
 800033a:	193b      	adds	r3, r7, r4
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000340:	f7ff ff6c 	bl	800021c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000344:	1df9      	adds	r1, r7, #7
 8000346:	4809      	ldr	r0, [pc, #36]	; (800036c <nrf24_ReadReg+0x40>)
 8000348:	2364      	movs	r3, #100	; 0x64
 800034a:	2201      	movs	r2, #1
 800034c:	f002 fb5c 	bl	8002a08 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000350:	1939      	adds	r1, r7, r4
 8000352:	4806      	ldr	r0, [pc, #24]	; (800036c <nrf24_ReadReg+0x40>)
 8000354:	2364      	movs	r3, #100	; 0x64
 8000356:	2201      	movs	r2, #1
 8000358:	f002 fcae 	bl	8002cb8 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800035c:	f7ff ff6c 	bl	8000238 <CS_UnSelect>

	return data;
 8000360:	193b      	adds	r3, r7, r4
 8000362:	781b      	ldrb	r3, [r3, #0]
}
 8000364:	0018      	movs	r0, r3
 8000366:	46bd      	mov	sp, r7
 8000368:	b005      	add	sp, #20
 800036a:	bd90      	pop	{r4, r7, pc}
 800036c:	20000050 	.word	0x20000050

08000370 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	0002      	movs	r2, r0
 8000378:	1dfb      	adds	r3, r7, #7
 800037a:	701a      	strb	r2, [r3, #0]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800037c:	f7ff ff4e 	bl	800021c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000380:	1df9      	adds	r1, r7, #7
 8000382:	4805      	ldr	r0, [pc, #20]	; (8000398 <nrfsendCmd+0x28>)
 8000384:	2364      	movs	r3, #100	; 0x64
 8000386:	2201      	movs	r2, #1
 8000388:	f002 fb3e 	bl	8002a08 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800038c:	f7ff ff54 	bl	8000238 <CS_UnSelect>
}
 8000390:	46c0      	nop			; (mov r8, r8)
 8000392:	46bd      	mov	sp, r7
 8000394:	b002      	add	sp, #8
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000050 	.word	0x20000050

0800039c <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b088      	sub	sp, #32
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	0002      	movs	r2, r0
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	701a      	strb	r2, [r3, #0]
	if (REG == STATUS)
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b07      	cmp	r3, #7
 80003ae:	d104      	bne.n	80003ba <nrf24_reset+0x1e>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80003b0:	2100      	movs	r1, #0
 80003b2:	2007      	movs	r0, #7
 80003b4:	f7ff ff6a 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80003b8:	e08b      	b.n	80004d2 <nrf24_reset+0x136>
	else if (REG == FIFO_STATUS)
 80003ba:	1dfb      	adds	r3, r7, #7
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b17      	cmp	r3, #23
 80003c0:	d104      	bne.n	80003cc <nrf24_reset+0x30>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80003c2:	2111      	movs	r1, #17
 80003c4:	2017      	movs	r0, #23
 80003c6:	f7ff ff61 	bl	800028c <nrf24_WriteReg>
}
 80003ca:	e082      	b.n	80004d2 <nrf24_reset+0x136>
	nrf24_WriteReg(CONFIG, 0x08);
 80003cc:	2108      	movs	r1, #8
 80003ce:	2000      	movs	r0, #0
 80003d0:	f7ff ff5c 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80003d4:	213f      	movs	r1, #63	; 0x3f
 80003d6:	2001      	movs	r0, #1
 80003d8:	f7ff ff58 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80003dc:	2103      	movs	r1, #3
 80003de:	2002      	movs	r0, #2
 80003e0:	f7ff ff54 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80003e4:	2103      	movs	r1, #3
 80003e6:	2003      	movs	r0, #3
 80003e8:	f7ff ff50 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80003ec:	2103      	movs	r1, #3
 80003ee:	2004      	movs	r0, #4
 80003f0:	f7ff ff4c 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80003f4:	2102      	movs	r1, #2
 80003f6:	2005      	movs	r0, #5
 80003f8:	f7ff ff48 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80003fc:	210e      	movs	r1, #14
 80003fe:	2006      	movs	r0, #6
 8000400:	f7ff ff44 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000404:	2100      	movs	r1, #0
 8000406:	2007      	movs	r0, #7
 8000408:	f7ff ff40 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800040c:	2100      	movs	r1, #0
 800040e:	2008      	movs	r0, #8
 8000410:	f7ff ff3c 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000414:	2100      	movs	r1, #0
 8000416:	2009      	movs	r0, #9
 8000418:	f7ff ff38 	bl	800028c <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800041c:	2018      	movs	r0, #24
 800041e:	183b      	adds	r3, r7, r0
 8000420:	4a2e      	ldr	r2, [pc, #184]	; (80004dc <nrf24_reset+0x140>)
 8000422:	6811      	ldr	r1, [r2, #0]
 8000424:	6019      	str	r1, [r3, #0]
 8000426:	7912      	ldrb	r2, [r2, #4]
 8000428:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800042a:	183b      	adds	r3, r7, r0
 800042c:	2205      	movs	r2, #5
 800042e:	0019      	movs	r1, r3
 8000430:	200a      	movs	r0, #10
 8000432:	f7ff ff51 	bl	80002d8 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000436:	2010      	movs	r0, #16
 8000438:	183b      	adds	r3, r7, r0
 800043a:	4a29      	ldr	r2, [pc, #164]	; (80004e0 <nrf24_reset+0x144>)
 800043c:	6811      	ldr	r1, [r2, #0]
 800043e:	6019      	str	r1, [r3, #0]
 8000440:	7912      	ldrb	r2, [r2, #4]
 8000442:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000444:	183b      	adds	r3, r7, r0
 8000446:	2205      	movs	r2, #5
 8000448:	0019      	movs	r1, r3
 800044a:	200b      	movs	r0, #11
 800044c:	f7ff ff44 	bl	80002d8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000450:	21c3      	movs	r1, #195	; 0xc3
 8000452:	200c      	movs	r0, #12
 8000454:	f7ff ff1a 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000458:	21c4      	movs	r1, #196	; 0xc4
 800045a:	200d      	movs	r0, #13
 800045c:	f7ff ff16 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000460:	21c5      	movs	r1, #197	; 0xc5
 8000462:	200e      	movs	r0, #14
 8000464:	f7ff ff12 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000468:	21c6      	movs	r1, #198	; 0xc6
 800046a:	200f      	movs	r0, #15
 800046c:	f7ff ff0e 	bl	800028c <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000470:	2008      	movs	r0, #8
 8000472:	183b      	adds	r3, r7, r0
 8000474:	4a19      	ldr	r2, [pc, #100]	; (80004dc <nrf24_reset+0x140>)
 8000476:	6811      	ldr	r1, [r2, #0]
 8000478:	6019      	str	r1, [r3, #0]
 800047a:	7912      	ldrb	r2, [r2, #4]
 800047c:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800047e:	183b      	adds	r3, r7, r0
 8000480:	2205      	movs	r2, #5
 8000482:	0019      	movs	r1, r3
 8000484:	2010      	movs	r0, #16
 8000486:	f7ff ff27 	bl	80002d8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800048a:	2100      	movs	r1, #0
 800048c:	2011      	movs	r0, #17
 800048e:	f7ff fefd 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000492:	2100      	movs	r1, #0
 8000494:	2012      	movs	r0, #18
 8000496:	f7ff fef9 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800049a:	2100      	movs	r1, #0
 800049c:	2013      	movs	r0, #19
 800049e:	f7ff fef5 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80004a2:	2100      	movs	r1, #0
 80004a4:	2014      	movs	r0, #20
 80004a6:	f7ff fef1 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80004aa:	2100      	movs	r1, #0
 80004ac:	2015      	movs	r0, #21
 80004ae:	f7ff feed 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80004b2:	2100      	movs	r1, #0
 80004b4:	2016      	movs	r0, #22
 80004b6:	f7ff fee9 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80004ba:	2111      	movs	r1, #17
 80004bc:	2017      	movs	r0, #23
 80004be:	f7ff fee5 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80004c2:	2100      	movs	r1, #0
 80004c4:	201c      	movs	r0, #28
 80004c6:	f7ff fee1 	bl	800028c <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80004ca:	2100      	movs	r1, #0
 80004cc:	201d      	movs	r0, #29
 80004ce:	f7ff fedd 	bl	800028c <nrf24_WriteReg>
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b008      	add	sp, #32
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	0800370c 	.word	0x0800370c
 80004e0:	08003714 	.word	0x08003714

080004e4 <NRF24_Init>:




void NRF24_Init (void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80004e8:	f7ff fec2 	bl	8000270 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff ff55 	bl	800039c <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80004f2:	2100      	movs	r1, #0
 80004f4:	2000      	movs	r0, #0
 80004f6:	f7ff fec9 	bl	800028c <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80004fa:	2100      	movs	r1, #0
 80004fc:	2001      	movs	r0, #1
 80004fe:	f7ff fec5 	bl	800028c <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000502:	2100      	movs	r1, #0
 8000504:	2002      	movs	r0, #2
 8000506:	f7ff fec1 	bl	800028c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800050a:	2103      	movs	r1, #3
 800050c:	2003      	movs	r0, #3
 800050e:	f7ff febd 	bl	800028c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000512:	2100      	movs	r1, #0
 8000514:	2004      	movs	r0, #4
 8000516:	f7ff feb9 	bl	800028c <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800051a:	2100      	movs	r1, #0
 800051c:	2005      	movs	r0, #5
 800051e:	f7ff feb5 	bl	800028c <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000522:	210e      	movs	r1, #14
 8000524:	2006      	movs	r0, #6
 8000526:	f7ff feb1 	bl	800028c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800052a:	f7ff fe93 	bl	8000254 <CE_Enable>

}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	000a      	movs	r2, r1
 800053e:	1cfb      	adds	r3, r7, #3
 8000540:	701a      	strb	r2, [r3, #0]
	// disable the chip before configuring the device
	CE_Disable();
 8000542:	f7ff fe95 	bl	8000270 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000546:	1cfb      	adds	r3, r7, #3
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	0019      	movs	r1, r3
 800054c:	2005      	movs	r0, #5
 800054e:	f7ff fe9d 	bl	800028c <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2205      	movs	r2, #5
 8000556:	0019      	movs	r1, r3
 8000558:	2010      	movs	r0, #16
 800055a:	f7ff febd 	bl	80002d8 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 800055e:	250f      	movs	r5, #15
 8000560:	197c      	adds	r4, r7, r5
 8000562:	2000      	movs	r0, #0
 8000564:	f7ff fee2 	bl	800032c <nrf24_ReadReg>
 8000568:	0003      	movs	r3, r0
 800056a:	7023      	strb	r3, [r4, #0]
	config = config | (1<<1);   // write 1 in the PWR_UP bit
 800056c:	0028      	movs	r0, r5
 800056e:	183b      	adds	r3, r7, r0
 8000570:	183a      	adds	r2, r7, r0
 8000572:	7812      	ldrb	r2, [r2, #0]
 8000574:	2102      	movs	r1, #2
 8000576:	430a      	orrs	r2, r1
 8000578:	701a      	strb	r2, [r3, #0]
	//config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 800057a:	183b      	adds	r3, r7, r0
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	0019      	movs	r1, r3
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff fe83 	bl	800028c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000586:	f7ff fe65 	bl	8000254 <CE_Enable>
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b004      	add	sp, #16
 8000590:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000594 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (Package *data)
{
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 800059c:	250e      	movs	r5, #14
 800059e:	197b      	adds	r3, r7, r5
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]

	// select the device
	CS_Select();
 80005a4:	f7ff fe3a 	bl	800021c <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80005a8:	197b      	adds	r3, r7, r5
 80005aa:	22a0      	movs	r2, #160	; 0xa0
 80005ac:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80005ae:	1979      	adds	r1, r7, r5
 80005b0:	482f      	ldr	r0, [pc, #188]	; (8000670 <NRF24_Transmit+0xdc>)
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	2201      	movs	r2, #1
 80005b6:	f002 fa27 	bl	8002a08 <HAL_SPI_Transmit>

	// send the payload

	HAL_SPI_Transmit(NRF24_SPI, &(data->x1), 2, 1000);
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	23fa      	movs	r3, #250	; 0xfa
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	482b      	ldr	r0, [pc, #172]	; (8000670 <NRF24_Transmit+0xdc>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	f002 fa20 	bl	8002a08 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, &(data->y1), 2, 1000);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	1c99      	adds	r1, r3, #2
 80005cc:	23fa      	movs	r3, #250	; 0xfa
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4827      	ldr	r0, [pc, #156]	; (8000670 <NRF24_Transmit+0xdc>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	f002 fa18 	bl	8002a08 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, &(data->x2), 2, 1000);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	1d19      	adds	r1, r3, #4
 80005dc:	23fa      	movs	r3, #250	; 0xfa
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	4823      	ldr	r0, [pc, #140]	; (8000670 <NRF24_Transmit+0xdc>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	f002 fa10 	bl	8002a08 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(NRF24_SPI, &(data->y2), 2, 1000);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	1d99      	adds	r1, r3, #6
 80005ec:	23fa      	movs	r3, #250	; 0xfa
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	481f      	ldr	r0, [pc, #124]	; (8000670 <NRF24_Transmit+0xdc>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	f002 fa08 	bl	8002a08 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(NRF24_SPI, &(data->state1), 1, 1000);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3308      	adds	r3, #8
 80005fc:	0019      	movs	r1, r3
 80005fe:	23fa      	movs	r3, #250	; 0xfa
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	481b      	ldr	r0, [pc, #108]	; (8000670 <NRF24_Transmit+0xdc>)
 8000604:	2201      	movs	r2, #1
 8000606:	f002 f9ff 	bl	8002a08 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(NRF24_SPI, &(data->state2), 1, 1000);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3309      	adds	r3, #9
 800060e:	0019      	movs	r1, r3
 8000610:	23fa      	movs	r3, #250	; 0xfa
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	4816      	ldr	r0, [pc, #88]	; (8000670 <NRF24_Transmit+0xdc>)
 8000616:	2201      	movs	r2, #1
 8000618:	f002 f9f6 	bl	8002a08 <HAL_SPI_Transmit>


	// Unselect the device
	CS_UnSelect();
 800061c:	f7ff fe0c 	bl	8000238 <CS_UnSelect>

	HAL_Delay(10);
 8000620:	200a      	movs	r0, #10
 8000622:	f000 fbe3 	bl	8000dec <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 8000626:	260f      	movs	r6, #15
 8000628:	19bc      	adds	r4, r7, r6
 800062a:	2017      	movs	r0, #23
 800062c:	f7ff fe7e 	bl	800032c <nrf24_ReadReg>
 8000630:	0003      	movs	r3, r0
 8000632:	7023      	strb	r3, [r4, #0]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 8000634:	0031      	movs	r1, r6
 8000636:	187b      	adds	r3, r7, r1
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2210      	movs	r2, #16
 800063c:	4013      	ands	r3, r2
 800063e:	d011      	beq.n	8000664 <NRF24_Transmit+0xd0>
 8000640:	187b      	adds	r3, r7, r1
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2208      	movs	r2, #8
 8000646:	4013      	ands	r3, r2
 8000648:	d10c      	bne.n	8000664 <NRF24_Transmit+0xd0>
	{
		cmdtosend = FLUSH_TX;
 800064a:	197b      	adds	r3, r7, r5
 800064c:	22e1      	movs	r2, #225	; 0xe1
 800064e:	701a      	strb	r2, [r3, #0]
		nrfsendCmd(cmdtosend);
 8000650:	197b      	adds	r3, r7, r5
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	0018      	movs	r0, r3
 8000656:	f7ff fe8b 	bl	8000370 <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 800065a:	2017      	movs	r0, #23
 800065c:	f7ff fe9e 	bl	800039c <nrf24_reset>

		return 1;
 8000660:	2301      	movs	r3, #1
 8000662:	e000      	b.n	8000666 <NRF24_Transmit+0xd2>
	}

	return 0;
 8000664:	2300      	movs	r3, #0
}
 8000666:	0018      	movs	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	b005      	add	sp, #20
 800066c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	20000050 	.word	0x20000050

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 fb54 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f862 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f000 f982 	bl	8000988 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000684:	f000 f924 	bl	80008d0 <MX_SPI1_Init>
  MX_DMA_Init();
 8000688:	f000 f960 	bl	800094c <MX_DMA_Init>
  MX_ADC_Init();
 800068c:	f000 f89e 	bl	80007cc <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 8000690:	f7ff ff28 	bl	80004e4 <NRF24_Init>
  NRF24_TxMode(TxAddress, 10);
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <main+0xb4>)
 8000696:	210a      	movs	r1, #10
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff ff4b 	bl	8000534 <NRF24_TxMode>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //read switch value

	  switch1 = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0);
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <main+0xb8>)
 80006a0:	2101      	movs	r1, #1
 80006a2:	0018      	movs	r0, r3
 80006a4:	f001 fbc2 	bl	8001e2c <HAL_GPIO_ReadPin>
 80006a8:	0003      	movs	r3, r0
 80006aa:	001a      	movs	r2, r3
 80006ac:	4b20      	ldr	r3, [pc, #128]	; (8000730 <main+0xbc>)
 80006ae:	701a      	strb	r2, [r3, #0]
	  switch2 = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1);
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <main+0xb8>)
 80006b2:	2102      	movs	r1, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fbb9 	bl	8001e2c <HAL_GPIO_ReadPin>
 80006ba:	0003      	movs	r3, r0
 80006bc:	001a      	movs	r2, r3
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <main+0xc0>)
 80006c0:	701a      	strb	r2, [r3, #0]



	  //read x1 y1 x2 y2 from joystick
	 HAL_ADC_Start_DMA(&hadc, ADC_Value, 4); // Start ADC in dma mode :)
 80006c2:	491d      	ldr	r1, [pc, #116]	; (8000738 <main+0xc4>)
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <main+0xc8>)
 80006c6:	2204      	movs	r2, #4
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fcf3 	bl	80010b4 <HAL_ADC_Start_DMA>

	 temp.x1 = (uint16_t) ADC_Value[0];
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <main+0xc4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <main+0xcc>)
 80006d6:	801a      	strh	r2, [r3, #0]
	 temp.y1 = (uint16_t) ADC_Value[1];
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <main+0xc4>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <main+0xcc>)
 80006e0:	805a      	strh	r2, [r3, #2]
	 temp.x2 = (uint16_t) ADC_Value[2];
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <main+0xc4>)
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <main+0xcc>)
 80006ea:	809a      	strh	r2, [r3, #4]
	 temp.y2 = (uint16_t) ADC_Value[3];
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <main+0xc4>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <main+0xcc>)
 80006f4:	80da      	strh	r2, [r3, #6]
	 temp.state1 = switch1;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <main+0xbc>)
 80006f8:	781a      	ldrb	r2, [r3, #0]
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <main+0xcc>)
 80006fc:	721a      	strb	r2, [r3, #8]
	 temp.state2 = switch2;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <main+0xc0>)
 8000700:	781a      	ldrb	r2, [r3, #0]
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <main+0xcc>)
 8000704:	725a      	strb	r2, [r3, #9]


  	  if (NRF24_Transmit(&temp) == 1)
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <main+0xcc>)
 8000708:	0018      	movs	r0, r3
 800070a:	f7ff ff43 	bl	8000594 <NRF24_Transmit>
 800070e:	0003      	movs	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d1c4      	bne.n	800069e <main+0x2a>
  	  {
  		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <main+0xb8>)
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	0018      	movs	r0, r3
 800071a:	f001 fbc1 	bl	8001ea0 <HAL_GPIO_TogglePin>
  		  HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f000 fb64 	bl	8000dec <HAL_Delay>
	  switch1 = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0);
 8000724:	e7bb      	b.n	800069e <main+0x2a>
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	20000000 	.word	0x20000000
 800072c:	48000800 	.word	0x48000800
 8000730:	20000030 	.word	0x20000030
 8000734:	20000031 	.word	0x20000031
 8000738:	20000040 	.word	0x20000040
 800073c:	200000f8 	.word	0x200000f8
 8000740:	20000034 	.word	0x20000034

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b093      	sub	sp, #76	; 0x4c
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	2414      	movs	r4, #20
 800074c:	193b      	adds	r3, r7, r4
 800074e:	0018      	movs	r0, r3
 8000750:	2334      	movs	r3, #52	; 0x34
 8000752:	001a      	movs	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	f002 ffc5 	bl	80036e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	0018      	movs	r0, r3
 800075e:	2310      	movs	r3, #16
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f002 ffbe 	bl	80036e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8000768:	0021      	movs	r1, r4
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2230      	movs	r2, #48	; 0x30
 800076e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2201      	movs	r2, #1
 8000774:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2201      	movs	r2, #1
 800077a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2210      	movs	r2, #16
 8000780:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	187b      	adds	r3, r7, r1
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fba4 	bl	8001ed8 <HAL_RCC_OscConfig>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000794:	f000 f978 	bl	8000a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2207      	movs	r2, #7
 800079c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2203      	movs	r2, #3
 80007a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2101      	movs	r1, #1
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 ff15 	bl	80025e4 <HAL_RCC_ClockConfig>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80007be:	f000 f963 	bl	8000a88 <Error_Handler>
  }
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b013      	add	sp, #76	; 0x4c
 80007c8:	bd90      	pop	{r4, r7, pc}
	...

080007cc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	0018      	movs	r0, r3
 80007d6:	230c      	movs	r3, #12
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f002 ff82 	bl	80036e4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80007e0:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <MX_ADC_Init+0xfc>)
 80007e2:	4a3a      	ldr	r2, [pc, #232]	; (80008cc <MX_ADC_Init+0x100>)
 80007e4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e6:	4b38      	ldr	r3, [pc, #224]	; (80008c8 <MX_ADC_Init+0xfc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80007ec:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <MX_ADC_Init+0xfc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f2:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <MX_ADC_Init+0xfc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80007f8:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <MX_ADC_Init+0xfc>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fe:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <MX_ADC_Init+0xfc>)
 8000800:	2204      	movs	r2, #4
 8000802:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000804:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <MX_ADC_Init+0xfc>)
 8000806:	2200      	movs	r2, #0
 8000808:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800080a:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <MX_ADC_Init+0xfc>)
 800080c:	2200      	movs	r2, #0
 800080e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000810:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_ADC_Init+0xfc>)
 8000812:	2201      	movs	r2, #1
 8000814:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000816:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <MX_ADC_Init+0xfc>)
 8000818:	2200      	movs	r2, #0
 800081a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081c:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_ADC_Init+0xfc>)
 800081e:	22c2      	movs	r2, #194	; 0xc2
 8000820:	32ff      	adds	r2, #255	; 0xff
 8000822:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <MX_ADC_Init+0xfc>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_ADC_Init+0xfc>)
 800082c:	2224      	movs	r2, #36	; 0x24
 800082e:	2100      	movs	r1, #0
 8000830:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000832:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <MX_ADC_Init+0xfc>)
 8000834:	2201      	movs	r2, #1
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_ADC_Init+0xfc>)
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fafa 	bl	8000e34 <HAL_ADC_Init>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000844:	f000 f920 	bl	8000a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	0152      	lsls	r2, r2, #5
 8000854:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2207      	movs	r2, #7
 800085a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800085c:	1d3a      	adds	r2, r7, #4
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_ADC_Init+0xfc>)
 8000860:	0011      	movs	r1, r2
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fcc0 	bl	80011e8 <HAL_ADC_ConfigChannel>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800086c:	f000 f90c 	bl	8000a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2201      	movs	r2, #1
 8000874:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000876:	1d3a      	adds	r2, r7, #4
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_ADC_Init+0xfc>)
 800087a:	0011      	movs	r1, r2
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fcb3 	bl	80011e8 <HAL_ADC_ConfigChannel>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000886:	f000 f8ff 	bl	8000a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2202      	movs	r2, #2
 800088e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000890:	1d3a      	adds	r2, r7, #4
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_ADC_Init+0xfc>)
 8000894:	0011      	movs	r1, r2
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fca6 	bl	80011e8 <HAL_ADC_ConfigChannel>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80008a0:	f000 f8f2 	bl	8000a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2203      	movs	r2, #3
 80008a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008aa:	1d3a      	adds	r2, r7, #4
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_ADC_Init+0xfc>)
 80008ae:	0011      	movs	r1, r2
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fc99 	bl	80011e8 <HAL_ADC_ConfigChannel>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 80008ba:	f000 f8e5 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b004      	add	sp, #16
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	200000f8 	.word	0x200000f8
 80008cc:	40012400 	.word	0x40012400

080008d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_SPI1_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_SPI1_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_SPI1_Init+0x74>)
 80008dc:	2282      	movs	r2, #130	; 0x82
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_SPI1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_SPI1_Init+0x74>)
 80008ea:	22e0      	movs	r2, #224	; 0xe0
 80008ec:	00d2      	lsls	r2, r2, #3
 80008ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_SPI1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_SPI1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_SPI1_Init+0x74>)
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	0092      	lsls	r2, r2, #2
 8000902:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_SPI1_Init+0x74>)
 8000906:	2210      	movs	r2, #16
 8000908:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_SPI1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_SPI1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_SPI1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_SPI1_Init+0x74>)
 800091e:	2207      	movs	r2, #7
 8000920:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_SPI1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_SPI1_Init+0x74>)
 800092a:	2208      	movs	r2, #8
 800092c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MX_SPI1_Init+0x74>)
 8000930:	0018      	movs	r0, r3
 8000932:	f001 ffb1 	bl	8002898 <HAL_SPI_Init>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 f8a5 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000050 	.word	0x20000050
 8000948:	40013000 	.word	0x40013000

0800094c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_DMA_Init+0x38>)
 8000954:	695a      	ldr	r2, [r3, #20]
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_DMA_Init+0x38>)
 8000958:	2101      	movs	r1, #1
 800095a:	430a      	orrs	r2, r1
 800095c:	615a      	str	r2, [r3, #20]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_DMA_Init+0x38>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	2201      	movs	r2, #1
 8000964:	4013      	ands	r3, r2
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2009      	movs	r0, #9
 8000970:	f000 fefc 	bl	800176c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000974:	2009      	movs	r0, #9
 8000976:	f000 ff0e 	bl	8001796 <HAL_NVIC_EnableIRQ>

}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40021000 	.word	0x40021000

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	240c      	movs	r4, #12
 8000990:	193b      	adds	r3, r7, r4
 8000992:	0018      	movs	r0, r3
 8000994:	2314      	movs	r3, #20
 8000996:	001a      	movs	r2, r3
 8000998:	2100      	movs	r1, #0
 800099a:	f002 fea3 	bl	80036e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <MX_GPIO_Init+0xf4>)
 80009a0:	695a      	ldr	r2, [r3, #20]
 80009a2:	4b36      	ldr	r3, [pc, #216]	; (8000a7c <MX_GPIO_Init+0xf4>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	0309      	lsls	r1, r1, #12
 80009a8:	430a      	orrs	r2, r1
 80009aa:	615a      	str	r2, [r3, #20]
 80009ac:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <MX_GPIO_Init+0xf4>)
 80009ae:	695a      	ldr	r2, [r3, #20]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	031b      	lsls	r3, r3, #12
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <MX_GPIO_Init+0xf4>)
 80009bc:	695a      	ldr	r2, [r3, #20]
 80009be:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <MX_GPIO_Init+0xf4>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0289      	lsls	r1, r1, #10
 80009c4:	430a      	orrs	r2, r1
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <MX_GPIO_Init+0xf4>)
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	029b      	lsls	r3, r3, #10
 80009d0:	4013      	ands	r3, r2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <MX_GPIO_Init+0xf4>)
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_GPIO_Init+0xf4>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	02c9      	lsls	r1, r1, #11
 80009e0:	430a      	orrs	r2, r1
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <MX_GPIO_Init+0xf4>)
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	02db      	lsls	r3, r3, #11
 80009ec:	4013      	ands	r3, r2
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80009f2:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <MX_GPIO_Init+0xf8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	2103      	movs	r1, #3
 80009f8:	0018      	movs	r0, r3
 80009fa:	f001 fa34 	bl	8001e66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_GPIO_Init+0xfc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	21c0      	movs	r1, #192	; 0xc0
 8000a04:	0018      	movs	r0, r3
 8000a06:	f001 fa2e 	bl	8001e66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Switch_1_Pin Switch_2_Pin */
  GPIO_InitStruct.Pin = Switch_1_Pin|Switch_2_Pin;
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <MX_GPIO_Init+0xfc>)
 8000a20:	0019      	movs	r1, r3
 8000a22:	0010      	movs	r0, r2
 8000a24:	f001 f88a 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2201      	movs	r2, #1
 8000a32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <MX_GPIO_Init+0xf8>)
 8000a44:	0019      	movs	r1, r3
 8000a46:	0010      	movs	r0, r2
 8000a48:	f001 f878 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a4c:	0021      	movs	r1, r4
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	22c0      	movs	r2, #192	; 0xc0
 8000a52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2201      	movs	r2, #1
 8000a58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <MX_GPIO_Init+0xfc>)
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	f001 f865 	bl	8001b3c <HAL_GPIO_Init>

}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b009      	add	sp, #36	; 0x24
 8000a78:	bd90      	pop	{r4, r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	48000400 	.word	0x48000400
 8000a84:	48000800 	.word	0x48000800

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_MspInit+0x44>)
 8000a9c:	699a      	ldr	r2, [r3, #24]
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	619a      	str	r2, [r3, #24]
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab4:	69da      	ldr	r2, [r3, #28]
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	0549      	lsls	r1, r1, #21
 8000abc:	430a      	orrs	r2, r1
 8000abe:	61da      	str	r2, [r3, #28]
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ac2:	69da      	ldr	r2, [r3, #28]
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	055b      	lsls	r3, r3, #21
 8000ac8:	4013      	ands	r3, r2
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b08b      	sub	sp, #44	; 0x2c
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	2414      	movs	r4, #20
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	0018      	movs	r0, r3
 8000aea:	2314      	movs	r3, #20
 8000aec:	001a      	movs	r2, r3
 8000aee:	2100      	movs	r1, #0
 8000af0:	f002 fdf8 	bl	80036e4 <memset>
  if(hadc->Instance==ADC1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a35      	ldr	r2, [pc, #212]	; (8000bd0 <HAL_ADC_MspInit+0xf4>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d163      	bne.n	8000bc6 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <HAL_ADC_MspInit+0xf8>)
 8000b00:	699a      	ldr	r2, [r3, #24]
 8000b02:	4b34      	ldr	r3, [pc, #208]	; (8000bd4 <HAL_ADC_MspInit+0xf8>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	0089      	lsls	r1, r1, #2
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	619a      	str	r2, [r3, #24]
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <HAL_ADC_MspInit+0xf8>)
 8000b0e:	699a      	ldr	r2, [r3, #24]
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <HAL_ADC_MspInit+0xf8>)
 8000b1c:	695a      	ldr	r2, [r3, #20]
 8000b1e:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <HAL_ADC_MspInit+0xf8>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0289      	lsls	r1, r1, #10
 8000b24:	430a      	orrs	r2, r1
 8000b26:	615a      	str	r2, [r3, #20]
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <HAL_ADC_MspInit+0xf8>)
 8000b2a:	695a      	ldr	r2, [r3, #20]
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	029b      	lsls	r3, r3, #10
 8000b30:	4013      	ands	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	220f      	movs	r2, #15
 8000b3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	2203      	movs	r2, #3
 8000b40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	193a      	adds	r2, r7, r4
 8000b4a:	2390      	movs	r3, #144	; 0x90
 8000b4c:	05db      	lsls	r3, r3, #23
 8000b4e:	0011      	movs	r1, r2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f000 fff3 	bl	8001b3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <HAL_ADC_MspInit+0xfc>)
 8000b58:	4a20      	ldr	r2, [pc, #128]	; (8000bdc <HAL_ADC_MspInit+0x100>)
 8000b5a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <HAL_ADC_MspInit+0xfc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <HAL_ADC_MspInit+0xfc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_ADC_MspInit+0xfc>)
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <HAL_ADC_MspInit+0xfc>)
 8000b70:	2280      	movs	r2, #128	; 0x80
 8000b72:	0092      	lsls	r2, r2, #2
 8000b74:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_ADC_MspInit+0xfc>)
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_ADC_MspInit+0xfc>)
 8000b80:	2220      	movs	r2, #32
 8000b82:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_ADC_MspInit+0xfc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <HAL_ADC_MspInit+0xfc>)
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 fe1f 	bl	80017d0 <HAL_DMA_Init>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000b96:	f7ff ff77 	bl	8000a88 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8000b9a:	4a11      	ldr	r2, [pc, #68]	; (8000be0 <HAL_ADC_MspInit+0x104>)
 8000b9c:	23a8      	movs	r3, #168	; 0xa8
 8000b9e:	58d3      	ldr	r3, [r2, r3]
 8000ba0:	490f      	ldr	r1, [pc, #60]	; (8000be0 <HAL_ADC_MspInit+0x104>)
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	4393      	bics	r3, r2
 8000ba6:	22a8      	movs	r2, #168	; 0xa8
 8000ba8:	508b      	str	r3, [r1, r2]
 8000baa:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <HAL_ADC_MspInit+0x104>)
 8000bac:	23a8      	movs	r3, #168	; 0xa8
 8000bae:	58d3      	ldr	r3, [r2, r3]
 8000bb0:	490b      	ldr	r1, [pc, #44]	; (8000be0 <HAL_ADC_MspInit+0x104>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	22a8      	movs	r2, #168	; 0xa8
 8000bb8:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_ADC_MspInit+0xfc>)
 8000bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_ADC_MspInit+0xfc>)
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b00b      	add	sp, #44	; 0x2c
 8000bcc:	bd90      	pop	{r4, r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	40012400 	.word	0x40012400
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	200000b4 	.word	0x200000b4
 8000bdc:	40020008 	.word	0x40020008
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b08b      	sub	sp, #44	; 0x2c
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	2414      	movs	r4, #20
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	2314      	movs	r3, #20
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	f002 fd74 	bl	80036e4 <memset>
  if(hspi->Instance==SPI1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <HAL_SPI_MspInit+0x90>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d132      	bne.n	8000c6c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_SPI_MspInit+0x94>)
 8000c08:	699a      	ldr	r2, [r3, #24]
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_SPI_MspInit+0x94>)
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	0149      	lsls	r1, r1, #5
 8000c10:	430a      	orrs	r2, r1
 8000c12:	619a      	str	r2, [r3, #24]
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_SPI_MspInit+0x94>)
 8000c16:	699a      	ldr	r2, [r3, #24]
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	015b      	lsls	r3, r3, #5
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_SPI_MspInit+0x94>)
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_SPI_MspInit+0x94>)
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	0289      	lsls	r1, r1, #10
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	615a      	str	r2, [r3, #20]
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_SPI_MspInit+0x94>)
 8000c32:	695a      	ldr	r2, [r3, #20]
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	029b      	lsls	r3, r3, #10
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c3e:	0021      	movs	r1, r4
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	22e0      	movs	r2, #224	; 0xe0
 8000c44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2202      	movs	r2, #2
 8000c4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2203      	movs	r2, #3
 8000c56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	187a      	adds	r2, r7, r1
 8000c60:	2390      	movs	r3, #144	; 0x90
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	0011      	movs	r1, r2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 ff68 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b00b      	add	sp, #44	; 0x2c
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	40013000 	.word	0x40013000
 8000c78:	40021000 	.word	0x40021000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca0:	f000 f888 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <DMA1_Ch1_IRQHandler+0x14>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 fe3a 	bl	800192c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	200000b4 	.word	0x200000b4

08000cc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cec:	4c0b      	ldr	r4, [pc, #44]	; (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cfa:	f7ff ffe3 	bl	8000cc4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cfe:	f002 fccd 	bl	800369c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d02:	f7ff fcb7 	bl	8000674 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   r0, =_estack
 8000d08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d14:	08003754 	.word	0x08003754
  ldr r2, =_sbss
 8000d18:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d1c:	2000013c 	.word	0x2000013c

08000d20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_COMP_IRQHandler>
	...

08000d24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <HAL_Init+0x24>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_Init+0x24>)
 8000d2e:	2110      	movs	r1, #16
 8000d30:	430a      	orrs	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f809 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3a:	f7ff feab 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_InitTick+0x60>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	23fa      	movs	r3, #250	; 0xfa
 8000d60:	0098      	lsls	r0, r3, #2
 8000d62:	f7ff f9cf 	bl	8000104 <__udivsi3>
 8000d66:	0003      	movs	r3, r0
 8000d68:	0019      	movs	r1, r3
 8000d6a:	0020      	movs	r0, r4
 8000d6c:	f7ff f9ca 	bl	8000104 <__udivsi3>
 8000d70:	0003      	movs	r3, r0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 fd1f 	bl	80017b6 <HAL_SYSTICK_Config>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e00f      	b.n	8000da0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d80b      	bhi.n	8000d9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 fcec 	bl	800176c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_InitTick+0x64>)
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b003      	add	sp, #12
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000010 	.word	0x20000010
 8000db0:	2000000c 	.word	0x2000000c

08000db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x1c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	18d2      	adds	r2, r2, r3
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	20000010 	.word	0x20000010
 8000dd4:	20000138 	.word	0x20000138

08000dd8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	; (8000de8 <HAL_GetTick+0x10>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	20000138 	.word	0x20000138

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff fff0 	bl	8000dd8 <HAL_GetTick>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3301      	adds	r3, #1
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	189b      	adds	r3, r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	f7ff ffe0 	bl	8000dd8 <HAL_GetTick>
 8000e18:	0002      	movs	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b004      	add	sp, #16
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000010 	.word	0x20000010

08000e34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e125      	b.n	800109e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10a      	bne.n	8000e70 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2234      	movs	r2, #52	; 0x34
 8000e64:	2100      	movs	r1, #0
 8000e66:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff fe36 	bl	8000adc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e74:	2210      	movs	r2, #16
 8000e76:	4013      	ands	r3, r2
 8000e78:	d000      	beq.n	8000e7c <HAL_ADC_Init+0x48>
 8000e7a:	e103      	b.n	8001084 <HAL_ADC_Init+0x250>
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d000      	beq.n	8000e88 <HAL_ADC_Init+0x54>
 8000e86:	e0fd      	b.n	8001084 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	2204      	movs	r2, #4
 8000e90:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000e92:	d000      	beq.n	8000e96 <HAL_ADC_Init+0x62>
 8000e94:	e0f6      	b.n	8001084 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e9a:	4a83      	ldr	r2, [pc, #524]	; (80010a8 <HAL_ADC_Init+0x274>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	2203      	movs	r2, #3
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d112      	bne.n	8000eda <HAL_ADC_Init+0xa6>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d009      	beq.n	8000ed6 <HAL_ADC_Init+0xa2>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	401a      	ands	r2, r3
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d101      	bne.n	8000eda <HAL_ADC_Init+0xa6>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_ADC_Init+0xa8>
 8000eda:	2300      	movs	r3, #0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d116      	bne.n	8000f0e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	2218      	movs	r2, #24
 8000ee8:	4393      	bics	r3, r2
 8000eea:	0019      	movs	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	0899      	lsrs	r1, r3, #2
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4964      	ldr	r1, [pc, #400]	; (80010ac <HAL_ADC_Init+0x278>)
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7e1b      	ldrb	r3, [r3, #24]
 8000f22:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7e5b      	ldrb	r3, [r3, #25]
 8000f28:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7e9b      	ldrb	r3, [r3, #26]
 8000f30:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f32:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d002      	beq.n	8000f42 <HAL_ADC_Init+0x10e>
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	015b      	lsls	r3, r3, #5
 8000f40:	e000      	b.n	8000f44 <HAL_ADC_Init+0x110>
 8000f42:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f44:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f4a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d101      	bne.n	8000f58 <HAL_ADC_Init+0x124>
 8000f54:	2304      	movs	r3, #4
 8000f56:	e000      	b.n	8000f5a <HAL_ADC_Init+0x126>
 8000f58:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000f5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2124      	movs	r1, #36	; 0x24
 8000f60:	5c5b      	ldrb	r3, [r3, r1]
 8000f62:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f64:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7edb      	ldrb	r3, [r3, #27]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d115      	bne.n	8000fa0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7e9b      	ldrb	r3, [r3, #26]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d105      	bne.n	8000f88 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2280      	movs	r2, #128	; 0x80
 8000f80:	0252      	lsls	r2, r2, #9
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	e00b      	b.n	8000fa0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f98:	2201      	movs	r2, #1
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69da      	ldr	r2, [r3, #28]
 8000fa4:	23c2      	movs	r3, #194	; 0xc2
 8000fa6:	33ff      	adds	r3, #255	; 0xff
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d007      	beq.n	8000fbc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68d9      	ldr	r1, [r3, #12]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	055b      	lsls	r3, r3, #21
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d01b      	beq.n	8001010 <HAL_ADC_Init+0x1dc>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d017      	beq.n	8001010 <HAL_ADC_Init+0x1dc>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d013      	beq.n	8001010 <HAL_ADC_Init+0x1dc>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d00f      	beq.n	8001010 <HAL_ADC_Init+0x1dc>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d00b      	beq.n	8001010 <HAL_ADC_Init+0x1dc>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	2b05      	cmp	r3, #5
 8000ffe:	d007      	beq.n	8001010 <HAL_ADC_Init+0x1dc>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001004:	2b06      	cmp	r3, #6
 8001006:	d003      	beq.n	8001010 <HAL_ADC_Init+0x1dc>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100c:	2b07      	cmp	r3, #7
 800100e:	d112      	bne.n	8001036 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	695a      	ldr	r2, [r3, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2107      	movs	r1, #7
 800101c:	438a      	bics	r2, r1
 800101e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6959      	ldr	r1, [r3, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102a:	2207      	movs	r2, #7
 800102c:	401a      	ands	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	430a      	orrs	r2, r1
 8001034:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <HAL_ADC_Init+0x27c>)
 800103e:	4013      	ands	r3, r2
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	429a      	cmp	r2, r3
 8001044:	d10b      	bne.n	800105e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001050:	2203      	movs	r2, #3
 8001052:	4393      	bics	r3, r2
 8001054:	2201      	movs	r2, #1
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800105c:	e01c      	b.n	8001098 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001062:	2212      	movs	r2, #18
 8001064:	4393      	bics	r3, r2
 8001066:	2210      	movs	r2, #16
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001072:	2201      	movs	r2, #1
 8001074:	431a      	orrs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800107a:	230f      	movs	r3, #15
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001082:	e009      	b.n	8001098 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001088:	2210      	movs	r2, #16
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001090:	230f      	movs	r3, #15
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001098:	230f      	movs	r3, #15
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	781b      	ldrb	r3, [r3, #0]
}
 800109e:	0018      	movs	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b004      	add	sp, #16
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	fffffefd 	.word	0xfffffefd
 80010ac:	fffe0219 	.word	0xfffe0219
 80010b0:	833fffe7 	.word	0x833fffe7

080010b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c0:	2317      	movs	r3, #23
 80010c2:	18fb      	adds	r3, r7, r3
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2204      	movs	r2, #4
 80010d0:	4013      	ands	r3, r2
 80010d2:	d15e      	bne.n	8001192 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2234      	movs	r2, #52	; 0x34
 80010d8:	5c9b      	ldrb	r3, [r3, r2]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_Start_DMA+0x2e>
 80010de:	2302      	movs	r3, #2
 80010e0:	e05e      	b.n	80011a0 <HAL_ADC_Start_DMA+0xec>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2234      	movs	r2, #52	; 0x34
 80010e6:	2101      	movs	r1, #1
 80010e8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	7e5b      	ldrb	r3, [r3, #25]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d007      	beq.n	8001102 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80010f2:	2317      	movs	r3, #23
 80010f4:	18fc      	adds	r4, r7, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f000 f983 	bl	8001404 <ADC_Enable>
 80010fe:	0003      	movs	r3, r0
 8001100:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001102:	2317      	movs	r3, #23
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d146      	bne.n	800119a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001110:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <HAL_ADC_Start_DMA+0xf4>)
 8001112:	4013      	ands	r3, r2
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	0052      	lsls	r2, r2, #1
 8001118:	431a      	orrs	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2234      	movs	r2, #52	; 0x34
 8001128:	2100      	movs	r1, #0
 800112a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_ADC_Start_DMA+0xf8>)
 8001132:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_ADC_Start_DMA+0xfc>)
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <HAL_ADC_Start_DMA+0x100>)
 8001142:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	221c      	movs	r2, #28
 800114a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2110      	movs	r1, #16
 8001158:	430a      	orrs	r2, r1
 800115a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2101      	movs	r1, #1
 8001168:	430a      	orrs	r2, r1
 800116a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3340      	adds	r3, #64	; 0x40
 8001176:	0019      	movs	r1, r3
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f000 fb70 	bl	8001860 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2104      	movs	r1, #4
 800118c:	430a      	orrs	r2, r1
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	e003      	b.n	800119a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001192:	2317      	movs	r3, #23
 8001194:	18fb      	adds	r3, r7, r3
 8001196:	2202      	movs	r2, #2
 8001198:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800119a:	2317      	movs	r3, #23
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	781b      	ldrb	r3, [r3, #0]
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b007      	add	sp, #28
 80011a6:	bd90      	pop	{r4, r7, pc}
 80011a8:	fffff0fe 	.word	0xfffff0fe
 80011ac:	0800150d 	.word	0x0800150d
 80011b0:	080015c1 	.word	0x080015c1
 80011b4:	080015df 	.word	0x080015df

080011b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b002      	add	sp, #8
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f2:	230f      	movs	r3, #15
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	055b      	lsls	r3, r3, #21
 8001206:	429a      	cmp	r2, r3
 8001208:	d011      	beq.n	800122e <HAL_ADC_ConfigChannel+0x46>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	2b01      	cmp	r3, #1
 8001210:	d00d      	beq.n	800122e <HAL_ADC_ConfigChannel+0x46>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	2b02      	cmp	r3, #2
 8001218:	d009      	beq.n	800122e <HAL_ADC_ConfigChannel+0x46>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	2b03      	cmp	r3, #3
 8001220:	d005      	beq.n	800122e <HAL_ADC_ConfigChannel+0x46>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	2b04      	cmp	r3, #4
 8001228:	d001      	beq.n	800122e <HAL_ADC_ConfigChannel+0x46>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2234      	movs	r2, #52	; 0x34
 8001232:	5c9b      	ldrb	r3, [r3, r2]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <HAL_ADC_ConfigChannel+0x54>
 8001238:	2302      	movs	r3, #2
 800123a:	e0d0      	b.n	80013de <HAL_ADC_ConfigChannel+0x1f6>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2234      	movs	r2, #52	; 0x34
 8001240:	2101      	movs	r1, #1
 8001242:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2204      	movs	r2, #4
 800124c:	4013      	ands	r3, r2
 800124e:	d000      	beq.n	8001252 <HAL_ADC_ConfigChannel+0x6a>
 8001250:	e0b4      	b.n	80013bc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a64      	ldr	r2, [pc, #400]	; (80013e8 <HAL_ADC_ConfigChannel+0x200>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d100      	bne.n	800125e <HAL_ADC_ConfigChannel+0x76>
 800125c:	e082      	b.n	8001364 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2201      	movs	r2, #1
 800126a:	409a      	lsls	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	055b      	lsls	r3, r3, #21
 800127c:	429a      	cmp	r2, r3
 800127e:	d037      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0x108>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	2b01      	cmp	r3, #1
 8001286:	d033      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	2b02      	cmp	r3, #2
 800128e:	d02f      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0x108>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	2b03      	cmp	r3, #3
 8001296:	d02b      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0x108>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	2b04      	cmp	r3, #4
 800129e:	d027      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d023      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0x108>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	2b06      	cmp	r3, #6
 80012ae:	d01f      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0x108>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	2b07      	cmp	r3, #7
 80012b6:	d01b      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	2107      	movs	r1, #7
 80012c4:	400b      	ands	r3, r1
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d012      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	695a      	ldr	r2, [r3, #20]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2107      	movs	r1, #7
 80012d6:	438a      	bics	r2, r1
 80012d8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6959      	ldr	r1, [r3, #20]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2207      	movs	r2, #7
 80012e6:	401a      	ands	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b10      	cmp	r3, #16
 80012f6:	d007      	beq.n	8001308 <HAL_ADC_ConfigChannel+0x120>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b11      	cmp	r3, #17
 80012fe:	d003      	beq.n	8001308 <HAL_ADC_ConfigChannel+0x120>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b12      	cmp	r3, #18
 8001306:	d163      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001308:	4b38      	ldr	r3, [pc, #224]	; (80013ec <HAL_ADC_ConfigChannel+0x204>)
 800130a:	6819      	ldr	r1, [r3, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b10      	cmp	r3, #16
 8001312:	d009      	beq.n	8001328 <HAL_ADC_ConfigChannel+0x140>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b11      	cmp	r3, #17
 800131a:	d102      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x13a>
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	03db      	lsls	r3, r3, #15
 8001320:	e004      	b.n	800132c <HAL_ADC_ConfigChannel+0x144>
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	045b      	lsls	r3, r3, #17
 8001326:	e001      	b.n	800132c <HAL_ADC_ConfigChannel+0x144>
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	041b      	lsls	r3, r3, #16
 800132c:	4a2f      	ldr	r2, [pc, #188]	; (80013ec <HAL_ADC_ConfigChannel+0x204>)
 800132e:	430b      	orrs	r3, r1
 8001330:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b10      	cmp	r3, #16
 8001338:	d14a      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <HAL_ADC_ConfigChannel+0x208>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	492d      	ldr	r1, [pc, #180]	; (80013f4 <HAL_ADC_ConfigChannel+0x20c>)
 8001340:	0018      	movs	r0, r3
 8001342:	f7fe fedf 	bl	8000104 <__udivsi3>
 8001346:	0003      	movs	r3, r0
 8001348:	001a      	movs	r2, r3
 800134a:	0013      	movs	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	189b      	adds	r3, r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001354:	e002      	b.n	800135c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3b01      	subs	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f9      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x16e>
 8001362:	e035      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2101      	movs	r1, #1
 8001370:	4099      	lsls	r1, r3
 8001372:	000b      	movs	r3, r1
 8001374:	43d9      	mvns	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	400a      	ands	r2, r1
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b10      	cmp	r3, #16
 8001384:	d007      	beq.n	8001396 <HAL_ADC_ConfigChannel+0x1ae>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b11      	cmp	r3, #17
 800138c:	d003      	beq.n	8001396 <HAL_ADC_ConfigChannel+0x1ae>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b12      	cmp	r3, #18
 8001394:	d11c      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_ADC_ConfigChannel+0x204>)
 8001398:	6819      	ldr	r1, [r3, #0]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b10      	cmp	r3, #16
 80013a0:	d007      	beq.n	80013b2 <HAL_ADC_ConfigChannel+0x1ca>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b11      	cmp	r3, #17
 80013a8:	d101      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x1c6>
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <HAL_ADC_ConfigChannel+0x210>)
 80013ac:	e002      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x1cc>
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_ADC_ConfigChannel+0x214>)
 80013b0:	e000      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x1cc>
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <HAL_ADC_ConfigChannel+0x218>)
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_ADC_ConfigChannel+0x204>)
 80013b6:	400b      	ands	r3, r1
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e009      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c0:	2220      	movs	r2, #32
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80013c8:	230f      	movs	r3, #15
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2234      	movs	r2, #52	; 0x34
 80013d4:	2100      	movs	r1, #0
 80013d6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80013d8:	230f      	movs	r3, #15
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	781b      	ldrb	r3, [r3, #0]
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b004      	add	sp, #16
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	00001001 	.word	0x00001001
 80013ec:	40012708 	.word	0x40012708
 80013f0:	20000008 	.word	0x20000008
 80013f4:	000f4240 	.word	0x000f4240
 80013f8:	ffbfffff 	.word	0xffbfffff
 80013fc:	feffffff 	.word	0xfeffffff
 8001400:	ff7fffff 	.word	0xff7fffff

08001404 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2203      	movs	r2, #3
 800141c:	4013      	ands	r3, r2
 800141e:	2b01      	cmp	r3, #1
 8001420:	d112      	bne.n	8001448 <ADC_Enable+0x44>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2201      	movs	r2, #1
 800142a:	4013      	ands	r3, r2
 800142c:	2b01      	cmp	r3, #1
 800142e:	d009      	beq.n	8001444 <ADC_Enable+0x40>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	401a      	ands	r2, r3
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	429a      	cmp	r2, r3
 8001442:	d101      	bne.n	8001448 <ADC_Enable+0x44>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <ADC_Enable+0x46>
 8001448:	2300      	movs	r3, #0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d152      	bne.n	80014f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <ADC_Enable+0xfc>)
 8001456:	4013      	ands	r3, r2
 8001458:	d00d      	beq.n	8001476 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145e:	2210      	movs	r2, #16
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146a:	2201      	movs	r2, #1
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e03f      	b.n	80014f6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2101      	movs	r1, #1
 8001482:	430a      	orrs	r2, r1
 8001484:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <ADC_Enable+0x100>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	491f      	ldr	r1, [pc, #124]	; (8001508 <ADC_Enable+0x104>)
 800148c:	0018      	movs	r0, r3
 800148e:	f7fe fe39 	bl	8000104 <__udivsi3>
 8001492:	0003      	movs	r3, r0
 8001494:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001496:	e002      	b.n	800149e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	3b01      	subs	r3, #1
 800149c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f9      	bne.n	8001498 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80014a4:	f7ff fc98 	bl	8000dd8 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014ac:	e01b      	b.n	80014e6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014ae:	f7ff fc93 	bl	8000dd8 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d914      	bls.n	80014e6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2201      	movs	r2, #1
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d00d      	beq.n	80014e6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ce:	2210      	movs	r2, #16
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014da:	2201      	movs	r2, #1
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e007      	b.n	80014f6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d1dc      	bne.n	80014ae <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b004      	add	sp, #16
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	80000017 	.word	0x80000017
 8001504:	20000008 	.word	0x20000008
 8001508:	000f4240 	.word	0x000f4240

0800150c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151e:	2250      	movs	r2, #80	; 0x50
 8001520:	4013      	ands	r3, r2
 8001522:	d140      	bne.n	80015a6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	0092      	lsls	r2, r2, #2
 800152c:	431a      	orrs	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	23c0      	movs	r3, #192	; 0xc0
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	4013      	ands	r3, r2
 800153e:	d12d      	bne.n	800159c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001544:	2b00      	cmp	r3, #0
 8001546:	d129      	bne.n	800159c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2208      	movs	r2, #8
 8001550:	4013      	ands	r3, r2
 8001552:	2b08      	cmp	r3, #8
 8001554:	d122      	bne.n	800159c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2204      	movs	r2, #4
 800155e:	4013      	ands	r3, r2
 8001560:	d110      	bne.n	8001584 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	210c      	movs	r1, #12
 800156e:	438a      	bics	r2, r1
 8001570:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	4a11      	ldr	r2, [pc, #68]	; (80015bc <ADC_DMAConvCplt+0xb0>)
 8001578:	4013      	ands	r3, r2
 800157a:	2201      	movs	r2, #1
 800157c:	431a      	orrs	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	639a      	str	r2, [r3, #56]	; 0x38
 8001582:	e00b      	b.n	800159c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001588:	2220      	movs	r2, #32
 800158a:	431a      	orrs	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	2201      	movs	r2, #1
 8001596:	431a      	orrs	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	0018      	movs	r0, r3
 80015a0:	f7ff fe0a 	bl	80011b8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80015a4:	e005      	b.n	80015b2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	0010      	movs	r0, r2
 80015b0:	4798      	blx	r3
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b004      	add	sp, #16
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	fffffefe 	.word	0xfffffefe

080015c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	0018      	movs	r0, r3
 80015d2:	f7ff fdf9 	bl	80011c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	b004      	add	sp, #16
 80015dc:	bd80      	pop	{r7, pc}

080015de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f0:	2240      	movs	r2, #64	; 0x40
 80015f2:	431a      	orrs	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fc:	2204      	movs	r2, #4
 80015fe:	431a      	orrs	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff fde6 	bl	80011d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b004      	add	sp, #16
 8001612:	bd80      	pop	{r7, pc}

08001614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	0002      	movs	r2, r0
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b7f      	cmp	r3, #127	; 0x7f
 8001626:	d809      	bhi.n	800163c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001628:	1dfb      	adds	r3, r7, #7
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	001a      	movs	r2, r3
 800162e:	231f      	movs	r3, #31
 8001630:	401a      	ands	r2, r3
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_EnableIRQ+0x30>)
 8001634:	2101      	movs	r1, #1
 8001636:	4091      	lsls	r1, r2
 8001638:	000a      	movs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]
  }
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}
 8001644:	e000e100 	.word	0xe000e100

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	0002      	movs	r2, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001656:	1dfb      	adds	r3, r7, #7
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b7f      	cmp	r3, #127	; 0x7f
 800165c:	d828      	bhi.n	80016b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800165e:	4a2f      	ldr	r2, [pc, #188]	; (800171c <__NVIC_SetPriority+0xd4>)
 8001660:	1dfb      	adds	r3, r7, #7
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b25b      	sxtb	r3, r3
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	33c0      	adds	r3, #192	; 0xc0
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	589b      	ldr	r3, [r3, r2]
 800166e:	1dfa      	adds	r2, r7, #7
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	0011      	movs	r1, r2
 8001674:	2203      	movs	r2, #3
 8001676:	400a      	ands	r2, r1
 8001678:	00d2      	lsls	r2, r2, #3
 800167a:	21ff      	movs	r1, #255	; 0xff
 800167c:	4091      	lsls	r1, r2
 800167e:	000a      	movs	r2, r1
 8001680:	43d2      	mvns	r2, r2
 8001682:	401a      	ands	r2, r3
 8001684:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	019b      	lsls	r3, r3, #6
 800168a:	22ff      	movs	r2, #255	; 0xff
 800168c:	401a      	ands	r2, r3
 800168e:	1dfb      	adds	r3, r7, #7
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	0018      	movs	r0, r3
 8001694:	2303      	movs	r3, #3
 8001696:	4003      	ands	r3, r0
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800169c:	481f      	ldr	r0, [pc, #124]	; (800171c <__NVIC_SetPriority+0xd4>)
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	430a      	orrs	r2, r1
 80016a8:	33c0      	adds	r3, #192	; 0xc0
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016ae:	e031      	b.n	8001714 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016b0:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <__NVIC_SetPriority+0xd8>)
 80016b2:	1dfb      	adds	r3, r7, #7
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	0019      	movs	r1, r3
 80016b8:	230f      	movs	r3, #15
 80016ba:	400b      	ands	r3, r1
 80016bc:	3b08      	subs	r3, #8
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3306      	adds	r3, #6
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	18d3      	adds	r3, r2, r3
 80016c6:	3304      	adds	r3, #4
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	1dfa      	adds	r2, r7, #7
 80016cc:	7812      	ldrb	r2, [r2, #0]
 80016ce:	0011      	movs	r1, r2
 80016d0:	2203      	movs	r2, #3
 80016d2:	400a      	ands	r2, r1
 80016d4:	00d2      	lsls	r2, r2, #3
 80016d6:	21ff      	movs	r1, #255	; 0xff
 80016d8:	4091      	lsls	r1, r2
 80016da:	000a      	movs	r2, r1
 80016dc:	43d2      	mvns	r2, r2
 80016de:	401a      	ands	r2, r3
 80016e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	019b      	lsls	r3, r3, #6
 80016e6:	22ff      	movs	r2, #255	; 0xff
 80016e8:	401a      	ands	r2, r3
 80016ea:	1dfb      	adds	r3, r7, #7
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	0018      	movs	r0, r3
 80016f0:	2303      	movs	r3, #3
 80016f2:	4003      	ands	r3, r0
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016f8:	4809      	ldr	r0, [pc, #36]	; (8001720 <__NVIC_SetPriority+0xd8>)
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	001c      	movs	r4, r3
 8001700:	230f      	movs	r3, #15
 8001702:	4023      	ands	r3, r4
 8001704:	3b08      	subs	r3, #8
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	430a      	orrs	r2, r1
 800170a:	3306      	adds	r3, #6
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	18c3      	adds	r3, r0, r3
 8001710:	3304      	adds	r3, #4
 8001712:	601a      	str	r2, [r3, #0]
}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b003      	add	sp, #12
 800171a:	bd90      	pop	{r4, r7, pc}
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	1e5a      	subs	r2, r3, #1
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	045b      	lsls	r3, r3, #17
 8001734:	429a      	cmp	r2, r3
 8001736:	d301      	bcc.n	800173c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001738:	2301      	movs	r3, #1
 800173a:	e010      	b.n	800175e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <SysTick_Config+0x44>)
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	3a01      	subs	r2, #1
 8001742:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001744:	2301      	movs	r3, #1
 8001746:	425b      	negs	r3, r3
 8001748:	2103      	movs	r1, #3
 800174a:	0018      	movs	r0, r3
 800174c:	f7ff ff7c 	bl	8001648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SysTick_Config+0x44>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SysTick_Config+0x44>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	210f      	movs	r1, #15
 8001778:	187b      	adds	r3, r7, r1
 800177a:	1c02      	adds	r2, r0, #0
 800177c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	187b      	adds	r3, r7, r1
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b25b      	sxtb	r3, r3
 8001786:	0011      	movs	r1, r2
 8001788:	0018      	movs	r0, r3
 800178a:	f7ff ff5d 	bl	8001648 <__NVIC_SetPriority>
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	b004      	add	sp, #16
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	0002      	movs	r2, r0
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff ff33 	bl	8001614 <__NVIC_EnableIRQ>
}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b002      	add	sp, #8
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff ffaf 	bl	8001724 <SysTick_Config>
 80017c6:	0003      	movs	r3, r0
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e036      	b.n	8001854 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2221      	movs	r2, #33	; 0x21
 80017ea:	2102      	movs	r1, #2
 80017ec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4a18      	ldr	r2, [pc, #96]	; (800185c <HAL_DMA_Init+0x8c>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001806:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	0018      	movs	r0, r3
 8001838:	f000 f946 	bl	8001ac8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2221      	movs	r2, #33	; 0x21
 8001846:	2101      	movs	r1, #1
 8001848:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2220      	movs	r2, #32
 800184e:	2100      	movs	r1, #0
 8001850:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}  
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}
 800185c:	ffffc00f 	.word	0xffffc00f

08001860 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800186e:	2317      	movs	r3, #23
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2220      	movs	r2, #32
 800187a:	5c9b      	ldrb	r3, [r3, r2]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_DMA_Start_IT+0x24>
 8001880:	2302      	movs	r3, #2
 8001882:	e04f      	b.n	8001924 <HAL_DMA_Start_IT+0xc4>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2220      	movs	r2, #32
 8001888:	2101      	movs	r1, #1
 800188a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2221      	movs	r2, #33	; 0x21
 8001890:	5c9b      	ldrb	r3, [r3, r2]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d13a      	bne.n	800190e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2221      	movs	r2, #33	; 0x21
 800189c:	2102      	movs	r1, #2
 800189e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2101      	movs	r1, #1
 80018b2:	438a      	bics	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 f8d7 	bl	8001a70 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	210e      	movs	r1, #14
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e00f      	b.n	80018fc <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	210a      	movs	r1, #10
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2104      	movs	r1, #4
 80018f8:	438a      	bics	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2101      	movs	r1, #1
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e007      	b.n	800191e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2220      	movs	r2, #32
 8001912:	2100      	movs	r1, #0
 8001914:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001916:	2317      	movs	r3, #23
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	2202      	movs	r2, #2
 800191c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800191e:	2317      	movs	r3, #23
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	781b      	ldrb	r3, [r3, #0]
} 
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	b006      	add	sp, #24
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	2204      	movs	r2, #4
 800194a:	409a      	lsls	r2, r3
 800194c:	0013      	movs	r3, r2
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4013      	ands	r3, r2
 8001952:	d024      	beq.n	800199e <HAL_DMA_IRQHandler+0x72>
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2204      	movs	r2, #4
 8001958:	4013      	ands	r3, r2
 800195a:	d020      	beq.n	800199e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2220      	movs	r2, #32
 8001964:	4013      	ands	r3, r2
 8001966:	d107      	bne.n	8001978 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2104      	movs	r1, #4
 8001974:	438a      	bics	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001980:	2104      	movs	r1, #4
 8001982:	4091      	lsls	r1, r2
 8001984:	000a      	movs	r2, r1
 8001986:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	2b00      	cmp	r3, #0
 800198e:	d100      	bne.n	8001992 <HAL_DMA_IRQHandler+0x66>
 8001990:	e06a      	b.n	8001a68 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	0010      	movs	r0, r2
 800199a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800199c:	e064      	b.n	8001a68 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	2202      	movs	r2, #2
 80019a4:	409a      	lsls	r2, r3
 80019a6:	0013      	movs	r3, r2
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4013      	ands	r3, r2
 80019ac:	d02b      	beq.n	8001a06 <HAL_DMA_IRQHandler+0xda>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2202      	movs	r2, #2
 80019b2:	4013      	ands	r3, r2
 80019b4:	d027      	beq.n	8001a06 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2220      	movs	r2, #32
 80019be:	4013      	ands	r3, r2
 80019c0:	d10b      	bne.n	80019da <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	210a      	movs	r1, #10
 80019ce:	438a      	bics	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2221      	movs	r2, #33	; 0x21
 80019d6:	2101      	movs	r1, #1
 80019d8:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e2:	2102      	movs	r1, #2
 80019e4:	4091      	lsls	r1, r2
 80019e6:	000a      	movs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2220      	movs	r2, #32
 80019ee:	2100      	movs	r1, #0
 80019f0:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d036      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	0010      	movs	r0, r2
 8001a02:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001a04:	e030      	b.n	8001a68 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	0013      	movs	r3, r2
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	d028      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x13c>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2208      	movs	r2, #8
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d024      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	210e      	movs	r1, #14
 8001a2a:	438a      	bics	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a36:	2101      	movs	r1, #1
 8001a38:	4091      	lsls	r1, r2
 8001a3a:	000a      	movs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2221      	movs	r2, #33	; 0x21
 8001a48:	2101      	movs	r1, #1
 8001a4a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	2100      	movs	r1, #0
 8001a52:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	0010      	movs	r0, r2
 8001a64:	4798      	blx	r3
    }
   }
}  
 8001a66:	e7ff      	b.n	8001a68 <HAL_DMA_IRQHandler+0x13c>
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b004      	add	sp, #16
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a86:	2101      	movs	r1, #1
 8001a88:	4091      	lsls	r1, r2
 8001a8a:	000a      	movs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b10      	cmp	r3, #16
 8001a9c:	d108      	bne.n	8001ab0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001aae:	e007      	b.n	8001ac0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	60da      	str	r2, [r3, #12]
}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b004      	add	sp, #16
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <DMA_CalcBaseAndBitshift+0x60>)
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d810      	bhi.n	8001afe <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <DMA_CalcBaseAndBitshift+0x64>)
 8001ae2:	4694      	mov	ip, r2
 8001ae4:	4463      	add	r3, ip
 8001ae6:	2114      	movs	r1, #20
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f7fe fb0b 	bl	8000104 <__udivsi3>
 8001aee:	0003      	movs	r3, r0
 8001af0:	009a      	lsls	r2, r3, #2
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <DMA_CalcBaseAndBitshift+0x68>)
 8001afa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001afc:	e00f      	b.n	8001b1e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <DMA_CalcBaseAndBitshift+0x6c>)
 8001b04:	4694      	mov	ip, r2
 8001b06:	4463      	add	r3, ip
 8001b08:	2114      	movs	r1, #20
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f7fe fafa 	bl	8000104 <__udivsi3>
 8001b10:	0003      	movs	r3, r0
 8001b12:	009a      	lsls	r2, r3, #2
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <DMA_CalcBaseAndBitshift+0x70>)
 8001b1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b002      	add	sp, #8
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	40020407 	.word	0x40020407
 8001b2c:	bffdfff8 	.word	0xbffdfff8
 8001b30:	40020000 	.word	0x40020000
 8001b34:	bffdfbf8 	.word	0xbffdfbf8
 8001b38:	40020400 	.word	0x40020400

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4a:	e155      	b.n	8001df8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2101      	movs	r1, #1
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4091      	lsls	r1, r2
 8001b56:	000a      	movs	r2, r1
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d100      	bne.n	8001b64 <HAL_GPIO_Init+0x28>
 8001b62:	e146      	b.n	8001df2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d005      	beq.n	8001b7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2203      	movs	r2, #3
 8001b76:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d130      	bne.n	8001bde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	0013      	movs	r3, r2
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	0013      	movs	r3, r2
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	2201      	movs	r2, #1
 8001bca:	401a      	ands	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	0013      	movs	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2203      	movs	r2, #3
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d017      	beq.n	8001c1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2203      	movs	r2, #3
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d123      	bne.n	8001c6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	58d3      	ldr	r3, [r2, r3]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2207      	movs	r2, #7
 8001c38:	4013      	ands	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	0013      	movs	r3, r2
 8001c42:	43da      	mvns	r2, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2107      	movs	r1, #7
 8001c52:	400b      	ands	r3, r1
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	409a      	lsls	r2, r3
 8001c58:	0013      	movs	r3, r2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	0092      	lsls	r2, r2, #2
 8001c6a:	6939      	ldr	r1, [r7, #16]
 8001c6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	409a      	lsls	r2, r3
 8001c94:	0013      	movs	r3, r2
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	23c0      	movs	r3, #192	; 0xc0
 8001ca8:	029b      	lsls	r3, r3, #10
 8001caa:	4013      	ands	r3, r2
 8001cac:	d100      	bne.n	8001cb0 <HAL_GPIO_Init+0x174>
 8001cae:	e0a0      	b.n	8001df2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb0:	4b57      	ldr	r3, [pc, #348]	; (8001e10 <HAL_GPIO_Init+0x2d4>)
 8001cb2:	699a      	ldr	r2, [r3, #24]
 8001cb4:	4b56      	ldr	r3, [pc, #344]	; (8001e10 <HAL_GPIO_Init+0x2d4>)
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	619a      	str	r2, [r3, #24]
 8001cbc:	4b54      	ldr	r3, [pc, #336]	; (8001e10 <HAL_GPIO_Init+0x2d4>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cc8:	4a52      	ldr	r2, [pc, #328]	; (8001e14 <HAL_GPIO_Init+0x2d8>)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	589b      	ldr	r3, [r3, r2]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2203      	movs	r2, #3
 8001cda:	4013      	ands	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	220f      	movs	r2, #15
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	0013      	movs	r3, r2
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	2390      	movs	r3, #144	; 0x90
 8001cf0:	05db      	lsls	r3, r3, #23
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d019      	beq.n	8001d2a <HAL_GPIO_Init+0x1ee>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a47      	ldr	r2, [pc, #284]	; (8001e18 <HAL_GPIO_Init+0x2dc>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0x1ea>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a46      	ldr	r2, [pc, #280]	; (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00d      	beq.n	8001d22 <HAL_GPIO_Init+0x1e6>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a45      	ldr	r2, [pc, #276]	; (8001e20 <HAL_GPIO_Init+0x2e4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d007      	beq.n	8001d1e <HAL_GPIO_Init+0x1e2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a44      	ldr	r2, [pc, #272]	; (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_GPIO_Init+0x1de>
 8001d16:	2304      	movs	r3, #4
 8001d18:	e008      	b.n	8001d2c <HAL_GPIO_Init+0x1f0>
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x1f0>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e004      	b.n	8001d2c <HAL_GPIO_Init+0x1f0>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_Init+0x1f0>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x1f0>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	2103      	movs	r1, #3
 8001d30:	400a      	ands	r2, r1
 8001d32:	0092      	lsls	r2, r2, #2
 8001d34:	4093      	lsls	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d3c:	4935      	ldr	r1, [pc, #212]	; (8001e14 <HAL_GPIO_Init+0x2d8>)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d4a:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43da      	mvns	r2, r3
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	025b      	lsls	r3, r3, #9
 8001d62:	4013      	ands	r3, r2
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d74:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43da      	mvns	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	029b      	lsls	r3, r3, #10
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d98:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43da      	mvns	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	035b      	lsls	r3, r3, #13
 8001db6:	4013      	ands	r3, r2
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	039b      	lsls	r3, r3, #14
 8001de0:	4013      	ands	r3, r2
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3301      	adds	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	40da      	lsrs	r2, r3
 8001e00:	1e13      	subs	r3, r2, #0
 8001e02:	d000      	beq.n	8001e06 <HAL_GPIO_Init+0x2ca>
 8001e04:	e6a2      	b.n	8001b4c <HAL_GPIO_Init+0x10>
  } 
}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b006      	add	sp, #24
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010000 	.word	0x40010000
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	48000800 	.word	0x48000800
 8001e20:	48000c00 	.word	0x48000c00
 8001e24:	48001000 	.word	0x48001000
 8001e28:	40010400 	.word	0x40010400

08001e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	000a      	movs	r2, r1
 8001e36:	1cbb      	adds	r3, r7, #2
 8001e38:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	1cba      	adds	r2, r7, #2
 8001e40:	8812      	ldrh	r2, [r2, #0]
 8001e42:	4013      	ands	r3, r2
 8001e44:	d004      	beq.n	8001e50 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e46:	230f      	movs	r3, #15
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e003      	b.n	8001e58 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e50:	230f      	movs	r3, #15
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001e58:	230f      	movs	r3, #15
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	781b      	ldrb	r3, [r3, #0]
  }
 8001e5e:	0018      	movs	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b004      	add	sp, #16
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	0008      	movs	r0, r1
 8001e70:	0011      	movs	r1, r2
 8001e72:	1cbb      	adds	r3, r7, #2
 8001e74:	1c02      	adds	r2, r0, #0
 8001e76:	801a      	strh	r2, [r3, #0]
 8001e78:	1c7b      	adds	r3, r7, #1
 8001e7a:	1c0a      	adds	r2, r1, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e7e:	1c7b      	adds	r3, r7, #1
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e86:	1cbb      	adds	r3, r7, #2
 8001e88:	881a      	ldrh	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e8e:	e003      	b.n	8001e98 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e90:	1cbb      	adds	r3, r7, #2
 8001e92:	881a      	ldrh	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	000a      	movs	r2, r1
 8001eaa:	1cbb      	adds	r3, r7, #2
 8001eac:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eb4:	1cbb      	adds	r3, r7, #2
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	041a      	lsls	r2, r3, #16
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	1cb9      	adds	r1, r7, #2
 8001ec4:	8809      	ldrh	r1, [r1, #0]
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	619a      	str	r2, [r3, #24]
}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b004      	add	sp, #16
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f000 fb76 	bl	80025d8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d100      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x20>
 8001ef6:	e08e      	b.n	8002016 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ef8:	4bc5      	ldr	r3, [pc, #788]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	220c      	movs	r2, #12
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d00e      	beq.n	8001f22 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f04:	4bc2      	ldr	r3, [pc, #776]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	220c      	movs	r2, #12
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d117      	bne.n	8001f40 <HAL_RCC_OscConfig+0x68>
 8001f10:	4bbf      	ldr	r3, [pc, #764]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	23c0      	movs	r3, #192	; 0xc0
 8001f16:	025b      	lsls	r3, r3, #9
 8001f18:	401a      	ands	r2, r3
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	025b      	lsls	r3, r3, #9
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d10e      	bne.n	8001f40 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	4bbb      	ldr	r3, [pc, #748]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	029b      	lsls	r3, r3, #10
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d100      	bne.n	8001f30 <HAL_RCC_OscConfig+0x58>
 8001f2e:	e071      	b.n	8002014 <HAL_RCC_OscConfig+0x13c>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d000      	beq.n	8001f3a <HAL_RCC_OscConfig+0x62>
 8001f38:	e06c      	b.n	8002014 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f000 fb4c 	bl	80025d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_OscConfig+0x80>
 8001f48:	4bb1      	ldr	r3, [pc, #708]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4bb0      	ldr	r3, [pc, #704]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001f4e:	2180      	movs	r1, #128	; 0x80
 8001f50:	0249      	lsls	r1, r1, #9
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e02f      	b.n	8001fb8 <HAL_RCC_OscConfig+0xe0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10c      	bne.n	8001f7a <HAL_RCC_OscConfig+0xa2>
 8001f60:	4bab      	ldr	r3, [pc, #684]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4baa      	ldr	r3, [pc, #680]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001f66:	49ab      	ldr	r1, [pc, #684]	; (8002214 <HAL_RCC_OscConfig+0x33c>)
 8001f68:	400a      	ands	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	4ba8      	ldr	r3, [pc, #672]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4ba7      	ldr	r3, [pc, #668]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001f72:	49a9      	ldr	r1, [pc, #676]	; (8002218 <HAL_RCC_OscConfig+0x340>)
 8001f74:	400a      	ands	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e01e      	b.n	8001fb8 <HAL_RCC_OscConfig+0xe0>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	d10e      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xc8>
 8001f82:	4ba3      	ldr	r3, [pc, #652]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4ba2      	ldr	r3, [pc, #648]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	02c9      	lsls	r1, r1, #11
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	4b9f      	ldr	r3, [pc, #636]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b9e      	ldr	r3, [pc, #632]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	0249      	lsls	r1, r1, #9
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xe0>
 8001fa0:	4b9b      	ldr	r3, [pc, #620]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b9a      	ldr	r3, [pc, #616]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001fa6:	499b      	ldr	r1, [pc, #620]	; (8002214 <HAL_RCC_OscConfig+0x33c>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	4b98      	ldr	r3, [pc, #608]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b97      	ldr	r3, [pc, #604]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001fb2:	4999      	ldr	r1, [pc, #612]	; (8002218 <HAL_RCC_OscConfig+0x340>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d014      	beq.n	8001fea <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ff0a 	bl	8000dd8 <HAL_GetTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fca:	f7fe ff05 	bl	8000dd8 <HAL_GetTick>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b64      	cmp	r3, #100	; 0x64
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e2fd      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fdc:	4b8c      	ldr	r3, [pc, #560]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	029b      	lsls	r3, r3, #10
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0xf2>
 8001fe8:	e015      	b.n	8002016 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe fef5 	bl	8000dd8 <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7fe fef0 	bl	8000dd8 <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e2e8      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002006:	4b82      	ldr	r3, [pc, #520]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	029b      	lsls	r3, r3, #10
 800200e:	4013      	ands	r3, r2
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x11c>
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002014:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	d100      	bne.n	8002022 <HAL_RCC_OscConfig+0x14a>
 8002020:	e06c      	b.n	80020fc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002022:	4b7b      	ldr	r3, [pc, #492]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	220c      	movs	r2, #12
 8002028:	4013      	ands	r3, r2
 800202a:	d00e      	beq.n	800204a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800202c:	4b78      	ldr	r3, [pc, #480]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	220c      	movs	r2, #12
 8002032:	4013      	ands	r3, r2
 8002034:	2b08      	cmp	r3, #8
 8002036:	d11f      	bne.n	8002078 <HAL_RCC_OscConfig+0x1a0>
 8002038:	4b75      	ldr	r3, [pc, #468]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	23c0      	movs	r3, #192	; 0xc0
 800203e:	025b      	lsls	r3, r3, #9
 8002040:	401a      	ands	r2, r3
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	429a      	cmp	r2, r3
 8002048:	d116      	bne.n	8002078 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	4b71      	ldr	r3, [pc, #452]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2202      	movs	r2, #2
 8002050:	4013      	ands	r3, r2
 8002052:	d005      	beq.n	8002060 <HAL_RCC_OscConfig+0x188>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d001      	beq.n	8002060 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e2bb      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002060:	4b6b      	ldr	r3, [pc, #428]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	22f8      	movs	r2, #248	; 0xf8
 8002066:	4393      	bics	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	00da      	lsls	r2, r3, #3
 8002070:	4b67      	ldr	r3, [pc, #412]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002072:	430a      	orrs	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	e041      	b.n	80020fc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d024      	beq.n	80020ca <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002080:	4b63      	ldr	r3, [pc, #396]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b62      	ldr	r3, [pc, #392]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002086:	2101      	movs	r1, #1
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7fe fea4 	bl	8000dd8 <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002096:	f7fe fe9f 	bl	8000dd8 <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e297      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	4b59      	ldr	r3, [pc, #356]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2202      	movs	r2, #2
 80020ae:	4013      	ands	r3, r2
 80020b0:	d0f1      	beq.n	8002096 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b2:	4b57      	ldr	r3, [pc, #348]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	22f8      	movs	r2, #248	; 0xf8
 80020b8:	4393      	bics	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	00da      	lsls	r2, r3, #3
 80020c2:	4b53      	ldr	r3, [pc, #332]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e018      	b.n	80020fc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ca:	4b51      	ldr	r3, [pc, #324]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4b50      	ldr	r3, [pc, #320]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	438a      	bics	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7fe fe7f 	bl	8000dd8 <HAL_GetTick>
 80020da:	0003      	movs	r3, r0
 80020dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e0:	f7fe fe7a 	bl	8000dd8 <HAL_GetTick>
 80020e4:	0002      	movs	r2, r0
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e272      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	4b47      	ldr	r3, [pc, #284]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2202      	movs	r2, #2
 80020f8:	4013      	ands	r3, r2
 80020fa:	d1f1      	bne.n	80020e0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2208      	movs	r2, #8
 8002102:	4013      	ands	r3, r2
 8002104:	d036      	beq.n	8002174 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d019      	beq.n	8002142 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210e:	4b40      	ldr	r3, [pc, #256]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002112:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002114:	2101      	movs	r1, #1
 8002116:	430a      	orrs	r2, r1
 8002118:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7fe fe5d 	bl	8000dd8 <HAL_GetTick>
 800211e:	0003      	movs	r3, r0
 8002120:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002124:	f7fe fe58 	bl	8000dd8 <HAL_GetTick>
 8002128:	0002      	movs	r2, r0
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e250      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002136:	4b36      	ldr	r3, [pc, #216]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	2202      	movs	r2, #2
 800213c:	4013      	ands	r3, r2
 800213e:	d0f1      	beq.n	8002124 <HAL_RCC_OscConfig+0x24c>
 8002140:	e018      	b.n	8002174 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002142:	4b33      	ldr	r3, [pc, #204]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002146:	4b32      	ldr	r3, [pc, #200]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002148:	2101      	movs	r1, #1
 800214a:	438a      	bics	r2, r1
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214e:	f7fe fe43 	bl	8000dd8 <HAL_GetTick>
 8002152:	0003      	movs	r3, r0
 8002154:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002158:	f7fe fe3e 	bl	8000dd8 <HAL_GetTick>
 800215c:	0002      	movs	r2, r0
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e236      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d1f1      	bne.n	8002158 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2204      	movs	r2, #4
 800217a:	4013      	ands	r3, r2
 800217c:	d100      	bne.n	8002180 <HAL_RCC_OscConfig+0x2a8>
 800217e:	e0b5      	b.n	80022ec <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002180:	201f      	movs	r0, #31
 8002182:	183b      	adds	r3, r7, r0
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 800218a:	69da      	ldr	r2, [r3, #28]
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	055b      	lsls	r3, r3, #21
 8002190:	4013      	ands	r3, r2
 8002192:	d110      	bne.n	80021b6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002196:	69da      	ldr	r2, [r3, #28]
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	0549      	lsls	r1, r1, #21
 800219e:	430a      	orrs	r2, r1
 80021a0:	61da      	str	r2, [r3, #28]
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 80021a4:	69da      	ldr	r2, [r3, #28]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	055b      	lsls	r3, r3, #21
 80021aa:	4013      	ands	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021b0:	183b      	adds	r3, r7, r0
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_RCC_OscConfig+0x344>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4013      	ands	r3, r2
 80021c0:	d11a      	bne.n	80021f8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <HAL_RCC_OscConfig+0x344>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_RCC_OscConfig+0x344>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0049      	lsls	r1, r1, #1
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d0:	f7fe fe02 	bl	8000dd8 <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021da:	f7fe fdfd 	bl	8000dd8 <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b64      	cmp	r3, #100	; 0x64
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e1f5      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_OscConfig+0x344>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4013      	ands	r3, r2
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d10f      	bne.n	8002220 <HAL_RCC_OscConfig+0x348>
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002202:	6a1a      	ldr	r2, [r3, #32]
 8002204:	4b02      	ldr	r3, [pc, #8]	; (8002210 <HAL_RCC_OscConfig+0x338>)
 8002206:	2101      	movs	r1, #1
 8002208:	430a      	orrs	r2, r1
 800220a:	621a      	str	r2, [r3, #32]
 800220c:	e036      	b.n	800227c <HAL_RCC_OscConfig+0x3a4>
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	40021000 	.word	0x40021000
 8002214:	fffeffff 	.word	0xfffeffff
 8002218:	fffbffff 	.word	0xfffbffff
 800221c:	40007000 	.word	0x40007000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10c      	bne.n	8002242 <HAL_RCC_OscConfig+0x36a>
 8002228:	4bca      	ldr	r3, [pc, #808]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800222a:	6a1a      	ldr	r2, [r3, #32]
 800222c:	4bc9      	ldr	r3, [pc, #804]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800222e:	2101      	movs	r1, #1
 8002230:	438a      	bics	r2, r1
 8002232:	621a      	str	r2, [r3, #32]
 8002234:	4bc7      	ldr	r3, [pc, #796]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002236:	6a1a      	ldr	r2, [r3, #32]
 8002238:	4bc6      	ldr	r3, [pc, #792]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800223a:	2104      	movs	r1, #4
 800223c:	438a      	bics	r2, r1
 800223e:	621a      	str	r2, [r3, #32]
 8002240:	e01c      	b.n	800227c <HAL_RCC_OscConfig+0x3a4>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x38c>
 800224a:	4bc2      	ldr	r3, [pc, #776]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800224c:	6a1a      	ldr	r2, [r3, #32]
 800224e:	4bc1      	ldr	r3, [pc, #772]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002250:	2104      	movs	r1, #4
 8002252:	430a      	orrs	r2, r1
 8002254:	621a      	str	r2, [r3, #32]
 8002256:	4bbf      	ldr	r3, [pc, #764]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002258:	6a1a      	ldr	r2, [r3, #32]
 800225a:	4bbe      	ldr	r3, [pc, #760]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800225c:	2101      	movs	r1, #1
 800225e:	430a      	orrs	r2, r1
 8002260:	621a      	str	r2, [r3, #32]
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0x3a4>
 8002264:	4bbb      	ldr	r3, [pc, #748]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002266:	6a1a      	ldr	r2, [r3, #32]
 8002268:	4bba      	ldr	r3, [pc, #744]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800226a:	2101      	movs	r1, #1
 800226c:	438a      	bics	r2, r1
 800226e:	621a      	str	r2, [r3, #32]
 8002270:	4bb8      	ldr	r3, [pc, #736]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002272:	6a1a      	ldr	r2, [r3, #32]
 8002274:	4bb7      	ldr	r3, [pc, #732]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002276:	2104      	movs	r1, #4
 8002278:	438a      	bics	r2, r1
 800227a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d014      	beq.n	80022ae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002284:	f7fe fda8 	bl	8000dd8 <HAL_GetTick>
 8002288:	0003      	movs	r3, r0
 800228a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228c:	e009      	b.n	80022a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7fe fda3 	bl	8000dd8 <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	4aaf      	ldr	r2, [pc, #700]	; (8002558 <HAL_RCC_OscConfig+0x680>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e19a      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a2:	4bac      	ldr	r3, [pc, #688]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x3b6>
 80022ac:	e013      	b.n	80022d6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ae:	f7fe fd93 	bl	8000dd8 <HAL_GetTick>
 80022b2:	0003      	movs	r3, r0
 80022b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b6:	e009      	b.n	80022cc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f7fe fd8e 	bl	8000dd8 <HAL_GetTick>
 80022bc:	0002      	movs	r2, r0
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	4aa5      	ldr	r2, [pc, #660]	; (8002558 <HAL_RCC_OscConfig+0x680>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e185      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022cc:	4ba1      	ldr	r3, [pc, #644]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	2202      	movs	r2, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d6:	231f      	movs	r3, #31
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e0:	4b9c      	ldr	r3, [pc, #624]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	4b9b      	ldr	r3, [pc, #620]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80022e6:	499d      	ldr	r1, [pc, #628]	; (800255c <HAL_RCC_OscConfig+0x684>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2210      	movs	r2, #16
 80022f2:	4013      	ands	r3, r2
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d12a      	bne.n	8002354 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022fe:	4b95      	ldr	r3, [pc, #596]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002302:	4b94      	ldr	r3, [pc, #592]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002304:	2104      	movs	r1, #4
 8002306:	430a      	orrs	r2, r1
 8002308:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800230a:	4b92      	ldr	r3, [pc, #584]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800230c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800230e:	4b91      	ldr	r3, [pc, #580]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002310:	2101      	movs	r1, #1
 8002312:	430a      	orrs	r2, r1
 8002314:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002316:	f7fe fd5f 	bl	8000dd8 <HAL_GetTick>
 800231a:	0003      	movs	r3, r0
 800231c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002320:	f7fe fd5a 	bl	8000dd8 <HAL_GetTick>
 8002324:	0002      	movs	r2, r0
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e152      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002332:	4b88      	ldr	r3, [pc, #544]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002336:	2202      	movs	r2, #2
 8002338:	4013      	ands	r3, r2
 800233a:	d0f1      	beq.n	8002320 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800233c:	4b85      	ldr	r3, [pc, #532]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800233e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002340:	22f8      	movs	r2, #248	; 0xf8
 8002342:	4393      	bics	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	00da      	lsls	r2, r3, #3
 800234c:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800234e:	430a      	orrs	r2, r1
 8002350:	635a      	str	r2, [r3, #52]	; 0x34
 8002352:	e034      	b.n	80023be <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	3305      	adds	r3, #5
 800235a:	d111      	bne.n	8002380 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800235c:	4b7d      	ldr	r3, [pc, #500]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800235e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002360:	4b7c      	ldr	r3, [pc, #496]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002362:	2104      	movs	r1, #4
 8002364:	438a      	bics	r2, r1
 8002366:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002368:	4b7a      	ldr	r3, [pc, #488]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	22f8      	movs	r2, #248	; 0xf8
 800236e:	4393      	bics	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	00da      	lsls	r2, r3, #3
 8002378:	4b76      	ldr	r3, [pc, #472]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800237a:	430a      	orrs	r2, r1
 800237c:	635a      	str	r2, [r3, #52]	; 0x34
 800237e:	e01e      	b.n	80023be <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002380:	4b74      	ldr	r3, [pc, #464]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002384:	4b73      	ldr	r3, [pc, #460]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002386:	2104      	movs	r1, #4
 8002388:	430a      	orrs	r2, r1
 800238a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800238c:	4b71      	ldr	r3, [pc, #452]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800238e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002390:	4b70      	ldr	r3, [pc, #448]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002392:	2101      	movs	r1, #1
 8002394:	438a      	bics	r2, r1
 8002396:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002398:	f7fe fd1e 	bl	8000dd8 <HAL_GetTick>
 800239c:	0003      	movs	r3, r0
 800239e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023a2:	f7fe fd19 	bl	8000dd8 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e111      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023b4:	4b67      	ldr	r3, [pc, #412]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	2202      	movs	r2, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d1f1      	bne.n	80023a2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2220      	movs	r2, #32
 80023c4:	4013      	ands	r3, r2
 80023c6:	d05c      	beq.n	8002482 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80023c8:	4b62      	ldr	r3, [pc, #392]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	220c      	movs	r2, #12
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b0c      	cmp	r3, #12
 80023d2:	d00e      	beq.n	80023f2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80023d4:	4b5f      	ldr	r3, [pc, #380]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	220c      	movs	r2, #12
 80023da:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d114      	bne.n	800240a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80023e0:	4b5c      	ldr	r3, [pc, #368]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	23c0      	movs	r3, #192	; 0xc0
 80023e6:	025b      	lsls	r3, r3, #9
 80023e8:	401a      	ands	r2, r3
 80023ea:	23c0      	movs	r3, #192	; 0xc0
 80023ec:	025b      	lsls	r3, r3, #9
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d10b      	bne.n	800240a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80023f2:	4b58      	ldr	r3, [pc, #352]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80023f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	025b      	lsls	r3, r3, #9
 80023fa:	4013      	ands	r3, r2
 80023fc:	d040      	beq.n	8002480 <HAL_RCC_OscConfig+0x5a8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d03c      	beq.n	8002480 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0e6      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d01b      	beq.n	800244a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002412:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002416:	4b4f      	ldr	r3, [pc, #316]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	0249      	lsls	r1, r1, #9
 800241c:	430a      	orrs	r2, r1
 800241e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fcda 	bl	8000dd8 <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800242a:	f7fe fcd5 	bl	8000dd8 <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0cd      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800243c:	4b45      	ldr	r3, [pc, #276]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800243e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	025b      	lsls	r3, r3, #9
 8002444:	4013      	ands	r3, r2
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x552>
 8002448:	e01b      	b.n	8002482 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800244a:	4b42      	ldr	r3, [pc, #264]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800244c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800244e:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002450:	4943      	ldr	r1, [pc, #268]	; (8002560 <HAL_RCC_OscConfig+0x688>)
 8002452:	400a      	ands	r2, r1
 8002454:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7fe fcbf 	bl	8000dd8 <HAL_GetTick>
 800245a:	0003      	movs	r3, r0
 800245c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002460:	f7fe fcba 	bl	8000dd8 <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e0b2      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002472:	4b38      	ldr	r3, [pc, #224]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	025b      	lsls	r3, r3, #9
 800247a:	4013      	ands	r3, r2
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x588>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002480:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	2b00      	cmp	r3, #0
 8002488:	d100      	bne.n	800248c <HAL_RCC_OscConfig+0x5b4>
 800248a:	e0a4      	b.n	80025d6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800248c:	4b31      	ldr	r3, [pc, #196]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	220c      	movs	r2, #12
 8002492:	4013      	ands	r3, r2
 8002494:	2b08      	cmp	r3, #8
 8002496:	d100      	bne.n	800249a <HAL_RCC_OscConfig+0x5c2>
 8002498:	e078      	b.n	800258c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d14c      	bne.n	800253c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80024a8:	492e      	ldr	r1, [pc, #184]	; (8002564 <HAL_RCC_OscConfig+0x68c>)
 80024aa:	400a      	ands	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7fe fc93 	bl	8000dd8 <HAL_GetTick>
 80024b2:	0003      	movs	r3, r0
 80024b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b8:	f7fe fc8e 	bl	8000dd8 <HAL_GetTick>
 80024bc:	0002      	movs	r2, r0
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e086      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ca:	4b22      	ldr	r3, [pc, #136]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	049b      	lsls	r3, r3, #18
 80024d2:	4013      	ands	r3, r2
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d6:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	220f      	movs	r2, #15
 80024dc:	4393      	bics	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80024e6:	430a      	orrs	r2, r1
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4a1e      	ldr	r2, [pc, #120]	; (8002568 <HAL_RCC_OscConfig+0x690>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	431a      	orrs	r2, r3
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002504:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	0449      	lsls	r1, r1, #17
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7fe fc61 	bl	8000dd8 <HAL_GetTick>
 8002516:	0003      	movs	r3, r0
 8002518:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251c:	f7fe fc5c 	bl	8000dd8 <HAL_GetTick>
 8002520:	0002      	movs	r2, r0
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e054      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	049b      	lsls	r3, r3, #18
 8002536:	4013      	ands	r3, r2
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x644>
 800253a:	e04c      	b.n	80025d6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <HAL_RCC_OscConfig+0x67c>)
 8002542:	4908      	ldr	r1, [pc, #32]	; (8002564 <HAL_RCC_OscConfig+0x68c>)
 8002544:	400a      	ands	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe fc46 	bl	8000dd8 <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002550:	e015      	b.n	800257e <HAL_RCC_OscConfig+0x6a6>
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	40021000 	.word	0x40021000
 8002558:	00001388 	.word	0x00001388
 800255c:	efffffff 	.word	0xefffffff
 8002560:	fffeffff 	.word	0xfffeffff
 8002564:	feffffff 	.word	0xfeffffff
 8002568:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fc34 	bl	8000dd8 <HAL_GetTick>
 8002570:	0002      	movs	r2, r0
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e02c      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_RCC_OscConfig+0x708>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	049b      	lsls	r3, r3, #18
 8002586:	4013      	ands	r3, r2
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x694>
 800258a:	e024      	b.n	80025d6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e01f      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_RCC_OscConfig+0x708>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCC_OscConfig+0x708>)
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	23c0      	movs	r3, #192	; 0xc0
 80025a8:	025b      	lsls	r3, r3, #9
 80025aa:	401a      	ands	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d10e      	bne.n	80025d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	220f      	movs	r2, #15
 80025b8:	401a      	ands	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	23f0      	movs	r3, #240	; 0xf0
 80025c6:	039b      	lsls	r3, r3, #14
 80025c8:	401a      	ands	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b008      	add	sp, #32
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0bf      	b.n	8002778 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025f8:	4b61      	ldr	r3, [pc, #388]	; (8002780 <HAL_RCC_ClockConfig+0x19c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2201      	movs	r2, #1
 80025fe:	4013      	ands	r3, r2
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d911      	bls.n	800262a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <HAL_RCC_ClockConfig+0x19c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2201      	movs	r2, #1
 800260c:	4393      	bics	r3, r2
 800260e:	0019      	movs	r1, r3
 8002610:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <HAL_RCC_ClockConfig+0x19c>)
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_RCC_ClockConfig+0x19c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2201      	movs	r2, #1
 800261e:	4013      	ands	r3, r2
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0a6      	b.n	8002778 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2202      	movs	r2, #2
 8002630:	4013      	ands	r3, r2
 8002632:	d015      	beq.n	8002660 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2204      	movs	r2, #4
 800263a:	4013      	ands	r3, r2
 800263c:	d006      	beq.n	800264c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800263e:	4b51      	ldr	r3, [pc, #324]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	4b50      	ldr	r3, [pc, #320]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 8002644:	21e0      	movs	r1, #224	; 0xe0
 8002646:	00c9      	lsls	r1, r1, #3
 8002648:	430a      	orrs	r2, r1
 800264a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264c:	4b4d      	ldr	r3, [pc, #308]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	22f0      	movs	r2, #240	; 0xf0
 8002652:	4393      	bics	r3, r2
 8002654:	0019      	movs	r1, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 800265c:	430a      	orrs	r2, r1
 800265e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	d04c      	beq.n	8002704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	4b44      	ldr	r3, [pc, #272]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	029b      	lsls	r3, r3, #10
 800267a:	4013      	ands	r3, r2
 800267c:	d120      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e07a      	b.n	8002778 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	049b      	lsls	r3, r3, #18
 8002692:	4013      	ands	r3, r2
 8002694:	d114      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e06e      	b.n	8002778 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 80026a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	025b      	lsls	r3, r3, #9
 80026aa:	4013      	ands	r3, r2
 80026ac:	d108      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e062      	b.n	8002778 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	4b34      	ldr	r3, [pc, #208]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2202      	movs	r2, #2
 80026b8:	4013      	ands	r3, r2
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e05b      	b.n	8002778 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c0:	4b30      	ldr	r3, [pc, #192]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2203      	movs	r2, #3
 80026c6:	4393      	bics	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 80026d0:	430a      	orrs	r2, r1
 80026d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d4:	f7fe fb80 	bl	8000dd8 <HAL_GetTick>
 80026d8:	0003      	movs	r3, r0
 80026da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026dc:	e009      	b.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026de:	f7fe fb7b 	bl	8000dd8 <HAL_GetTick>
 80026e2:	0002      	movs	r2, r0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	4a27      	ldr	r2, [pc, #156]	; (8002788 <HAL_RCC_ClockConfig+0x1a4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e042      	b.n	8002778 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	220c      	movs	r2, #12
 80026f8:	401a      	ands	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	429a      	cmp	r2, r3
 8002702:	d1ec      	bne.n	80026de <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002704:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <HAL_RCC_ClockConfig+0x19c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2201      	movs	r2, #1
 800270a:	4013      	ands	r3, r2
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d211      	bcs.n	8002736 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_RCC_ClockConfig+0x19c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2201      	movs	r2, #1
 8002718:	4393      	bics	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	4b18      	ldr	r3, [pc, #96]	; (8002780 <HAL_RCC_ClockConfig+0x19c>)
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_RCC_ClockConfig+0x19c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2201      	movs	r2, #1
 800272a:	4013      	ands	r3, r2
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d001      	beq.n	8002736 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e020      	b.n	8002778 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2204      	movs	r2, #4
 800273c:	4013      	ands	r3, r2
 800273e:	d009      	beq.n	8002754 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002740:	4b10      	ldr	r3, [pc, #64]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a11      	ldr	r2, [pc, #68]	; (800278c <HAL_RCC_ClockConfig+0x1a8>)
 8002746:	4013      	ands	r3, r2
 8002748:	0019      	movs	r1, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 8002750:	430a      	orrs	r2, r1
 8002752:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002754:	f000 f820 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8002758:	0001      	movs	r1, r0
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_RCC_ClockConfig+0x1a0>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	091b      	lsrs	r3, r3, #4
 8002760:	220f      	movs	r2, #15
 8002762:	4013      	ands	r3, r2
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <HAL_RCC_ClockConfig+0x1ac>)
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	000a      	movs	r2, r1
 800276a:	40da      	lsrs	r2, r3
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1b0>)
 800276e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002770:	2003      	movs	r0, #3
 8002772:	f7fe faeb 	bl	8000d4c <HAL_InitTick>
  
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	b004      	add	sp, #16
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40022000 	.word	0x40022000
 8002784:	40021000 	.word	0x40021000
 8002788:	00001388 	.word	0x00001388
 800278c:	fffff8ff 	.word	0xfffff8ff
 8002790:	0800373c 	.word	0x0800373c
 8002794:	20000008 	.word	0x20000008

08002798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b08f      	sub	sp, #60	; 0x3c
 800279c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800279e:	2314      	movs	r3, #20
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	4a38      	ldr	r2, [pc, #224]	; (8002884 <HAL_RCC_GetSysClockFreq+0xec>)
 80027a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80027a6:	c313      	stmia	r3!, {r0, r1, r4}
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	4a36      	ldr	r2, [pc, #216]	; (8002888 <HAL_RCC_GetSysClockFreq+0xf0>)
 80027b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80027b2:	c313      	stmia	r3!, {r0, r1, r4}
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027bc:	2300      	movs	r3, #0
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c0:	2300      	movs	r3, #0
 80027c2:	637b      	str	r3, [r7, #52]	; 0x34
 80027c4:	2300      	movs	r3, #0
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80027cc:	4b2f      	ldr	r3, [pc, #188]	; (800288c <HAL_RCC_GetSysClockFreq+0xf4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	220c      	movs	r2, #12
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d047      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0xd4>
 80027dc:	d849      	bhi.n	8002872 <HAL_RCC_GetSysClockFreq+0xda>
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d002      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x50>
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d003      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x56>
 80027e6:	e044      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027e8:	4b29      	ldr	r3, [pc, #164]	; (8002890 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027ec:	e044      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80027ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f0:	0c9b      	lsrs	r3, r3, #18
 80027f2:	220f      	movs	r2, #15
 80027f4:	4013      	ands	r3, r2
 80027f6:	2214      	movs	r2, #20
 80027f8:	18ba      	adds	r2, r7, r2
 80027fa:	5cd3      	ldrb	r3, [r2, r3]
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80027fe:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	220f      	movs	r2, #15
 8002804:	4013      	ands	r3, r2
 8002806:	1d3a      	adds	r2, r7, #4
 8002808:	5cd3      	ldrb	r3, [r2, r3]
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800280c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800280e:	23c0      	movs	r3, #192	; 0xc0
 8002810:	025b      	lsls	r3, r3, #9
 8002812:	401a      	ands	r2, r3
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	025b      	lsls	r3, r3, #9
 8002818:	429a      	cmp	r2, r3
 800281a:	d109      	bne.n	8002830 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800281c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800281e:	481c      	ldr	r0, [pc, #112]	; (8002890 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002820:	f7fd fc70 	bl	8000104 <__udivsi3>
 8002824:	0003      	movs	r3, r0
 8002826:	001a      	movs	r2, r3
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	4353      	muls	r3, r2
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
 800282e:	e01a      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002832:	23c0      	movs	r3, #192	; 0xc0
 8002834:	025b      	lsls	r3, r3, #9
 8002836:	401a      	ands	r2, r3
 8002838:	23c0      	movs	r3, #192	; 0xc0
 800283a:	025b      	lsls	r3, r3, #9
 800283c:	429a      	cmp	r2, r3
 800283e:	d109      	bne.n	8002854 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002842:	4814      	ldr	r0, [pc, #80]	; (8002894 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002844:	f7fd fc5e 	bl	8000104 <__udivsi3>
 8002848:	0003      	movs	r3, r0
 800284a:	001a      	movs	r2, r3
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	4353      	muls	r3, r2
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
 8002852:	e008      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002856:	480e      	ldr	r0, [pc, #56]	; (8002890 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002858:	f7fd fc54 	bl	8000104 <__udivsi3>
 800285c:	0003      	movs	r3, r0
 800285e:	001a      	movs	r2, r3
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	4353      	muls	r3, r2
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800286a:	e005      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_GetSysClockFreq+0xfc>)
 800286e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002870:	e002      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002874:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002876:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b00f      	add	sp, #60	; 0x3c
 8002880:	bd90      	pop	{r4, r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	0800371c 	.word	0x0800371c
 8002888:	0800372c 	.word	0x0800372c
 800288c:	40021000 	.word	0x40021000
 8002890:	007a1200 	.word	0x007a1200
 8002894:	02dc6c00 	.word	0x02dc6c00

08002898 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0a8      	b.n	80029fc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	2382      	movs	r3, #130	; 0x82
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d009      	beq.n	80028d2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	61da      	str	r2, [r3, #28]
 80028c4:	e005      	b.n	80028d2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	225d      	movs	r2, #93	; 0x5d
 80028dc:	5c9b      	ldrb	r3, [r3, r2]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	225c      	movs	r2, #92	; 0x5c
 80028e8:	2100      	movs	r1, #0
 80028ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f7fe f978 	bl	8000be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	225d      	movs	r2, #93	; 0x5d
 80028f8:	2102      	movs	r1, #2
 80028fa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2140      	movs	r1, #64	; 0x40
 8002908:	438a      	bics	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	23e0      	movs	r3, #224	; 0xe0
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	429a      	cmp	r2, r3
 8002916:	d902      	bls.n	800291e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	e002      	b.n	8002924 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	015b      	lsls	r3, r3, #5
 8002922:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	23f0      	movs	r3, #240	; 0xf0
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	429a      	cmp	r2, r3
 800292e:	d008      	beq.n	8002942 <HAL_SPI_Init+0xaa>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	23e0      	movs	r3, #224	; 0xe0
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	429a      	cmp	r2, r3
 800293a:	d002      	beq.n	8002942 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	2382      	movs	r3, #130	; 0x82
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	401a      	ands	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6899      	ldr	r1, [r3, #8]
 8002950:	2384      	movs	r3, #132	; 0x84
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	400b      	ands	r3, r1
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2102      	movs	r1, #2
 800295e:	400b      	ands	r3, r1
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	2101      	movs	r1, #1
 8002968:	400b      	ands	r3, r1
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6999      	ldr	r1, [r3, #24]
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	400b      	ands	r3, r1
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	2138      	movs	r1, #56	; 0x38
 800297e:	400b      	ands	r3, r1
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	400b      	ands	r3, r1
 800298a:	431a      	orrs	r2, r3
 800298c:	0011      	movs	r1, r2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	019b      	lsls	r3, r3, #6
 8002996:	401a      	ands	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	2204      	movs	r2, #4
 80029a8:	401a      	ands	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	2110      	movs	r1, #16
 80029b0:	400b      	ands	r3, r1
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b8:	2108      	movs	r1, #8
 80029ba:	400b      	ands	r3, r1
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68d9      	ldr	r1, [r3, #12]
 80029c2:	23f0      	movs	r3, #240	; 0xf0
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	400b      	ands	r3, r1
 80029c8:	431a      	orrs	r2, r3
 80029ca:	0011      	movs	r1, r2
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	015b      	lsls	r3, r3, #5
 80029d2:	401a      	ands	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4907      	ldr	r1, [pc, #28]	; (8002a04 <HAL_SPI_Init+0x16c>)
 80029e8:	400a      	ands	r2, r1
 80029ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	225d      	movs	r2, #93	; 0x5d
 80029f6:	2101      	movs	r1, #1
 80029f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b004      	add	sp, #16
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	fffff7ff 	.word	0xfffff7ff

08002a08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	1dbb      	adds	r3, r7, #6
 8002a16:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a18:	231f      	movs	r3, #31
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	225c      	movs	r2, #92	; 0x5c
 8002a24:	5c9b      	ldrb	r3, [r3, r2]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_SPI_Transmit+0x26>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e140      	b.n	8002cb0 <HAL_SPI_Transmit+0x2a8>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	225c      	movs	r2, #92	; 0x5c
 8002a32:	2101      	movs	r1, #1
 8002a34:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a36:	f7fe f9cf 	bl	8000dd8 <HAL_GetTick>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002a3e:	2316      	movs	r3, #22
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	1dba      	adds	r2, r7, #6
 8002a44:	8812      	ldrh	r2, [r2, #0]
 8002a46:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	225d      	movs	r2, #93	; 0x5d
 8002a4c:	5c9b      	ldrb	r3, [r3, r2]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d004      	beq.n	8002a5e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002a54:	231f      	movs	r3, #31
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	2202      	movs	r2, #2
 8002a5a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a5c:	e11d      	b.n	8002c9a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_SPI_Transmit+0x64>
 8002a64:	1dbb      	adds	r3, r7, #6
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d104      	bne.n	8002a76 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002a6c:	231f      	movs	r3, #31
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a74:	e111      	b.n	8002c9a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	225d      	movs	r2, #93	; 0x5d
 8002a7a:	2103      	movs	r1, #3
 8002a7c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1dba      	adds	r2, r7, #6
 8002a8e:	8812      	ldrh	r2, [r2, #0]
 8002a90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1dba      	adds	r2, r7, #6
 8002a96:	8812      	ldrh	r2, [r2, #0]
 8002a98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2244      	movs	r2, #68	; 0x44
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2246      	movs	r2, #70	; 0x46
 8002aac:	2100      	movs	r1, #0
 8002aae:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d110      	bne.n	8002aea <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2140      	movs	r1, #64	; 0x40
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	01c9      	lsls	r1, r1, #7
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2240      	movs	r2, #64	; 0x40
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d007      	beq.n	8002b08 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2140      	movs	r1, #64	; 0x40
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	23e0      	movs	r3, #224	; 0xe0
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d94e      	bls.n	8002bb2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_SPI_Transmit+0x11e>
 8002b1c:	2316      	movs	r3, #22
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d13f      	bne.n	8002ba6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	1c9a      	adds	r2, r3, #2
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b4a:	e02c      	b.n	8002ba6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2202      	movs	r2, #2
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d112      	bne.n	8002b80 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	881a      	ldrh	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	1c9a      	adds	r2, r3, #2
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b7e:	e012      	b.n	8002ba6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b80:	f7fe f92a 	bl	8000dd8 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d802      	bhi.n	8002b96 <HAL_SPI_Transmit+0x18e>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	3301      	adds	r3, #1
 8002b94:	d102      	bne.n	8002b9c <HAL_SPI_Transmit+0x194>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d104      	bne.n	8002ba6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002b9c:	231f      	movs	r3, #31
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	701a      	strb	r2, [r3, #0]
          goto error;
 8002ba4:	e079      	b.n	8002c9a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1cd      	bne.n	8002b4c <HAL_SPI_Transmit+0x144>
 8002bb0:	e04f      	b.n	8002c52 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_SPI_Transmit+0x1bc>
 8002bba:	2316      	movs	r3, #22
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d141      	bne.n	8002c48 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	7812      	ldrb	r2, [r2, #0]
 8002bd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002bea:	e02d      	b.n	8002c48 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d113      	bne.n	8002c22 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	330c      	adds	r3, #12
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c20:	e012      	b.n	8002c48 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c22:	f7fe f8d9 	bl	8000dd8 <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d802      	bhi.n	8002c38 <HAL_SPI_Transmit+0x230>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	d102      	bne.n	8002c3e <HAL_SPI_Transmit+0x236>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d104      	bne.n	8002c48 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002c3e:	231f      	movs	r3, #31
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2203      	movs	r2, #3
 8002c44:	701a      	strb	r2, [r3, #0]
          goto error;
 8002c46:	e028      	b.n	8002c9a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1cc      	bne.n	8002bec <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	6839      	ldr	r1, [r7, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f000 fcd9 	bl	8003610 <SPI_EndRxTxTransaction>
 8002c5e:	1e03      	subs	r3, r0, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d004      	beq.n	8002c98 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002c8e:	231f      	movs	r3, #31
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
 8002c96:	e000      	b.n	8002c9a <HAL_SPI_Transmit+0x292>
  }

error:
 8002c98:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	225d      	movs	r2, #93	; 0x5d
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	225c      	movs	r2, #92	; 0x5c
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002caa:	231f      	movs	r3, #31
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	781b      	ldrb	r3, [r3, #0]
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b008      	add	sp, #32
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b089      	sub	sp, #36	; 0x24
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	1dbb      	adds	r3, r7, #6
 8002cc6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cc8:	2317      	movs	r3, #23
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	2382      	movs	r3, #130	; 0x82
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d113      	bne.n	8002d04 <HAL_SPI_Receive+0x4c>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10f      	bne.n	8002d04 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	225d      	movs	r2, #93	; 0x5d
 8002ce8:	2104      	movs	r1, #4
 8002cea:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002cec:	1dbb      	adds	r3, r7, #6
 8002cee:	881c      	ldrh	r4, [r3, #0]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	0023      	movs	r3, r4
 8002cfc:	f000 f928 	bl	8002f50 <HAL_SPI_TransmitReceive>
 8002d00:	0003      	movs	r3, r0
 8002d02:	e11c      	b.n	8002f3e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	225c      	movs	r2, #92	; 0x5c
 8002d08:	5c9b      	ldrb	r3, [r3, r2]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_SPI_Receive+0x5a>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e115      	b.n	8002f3e <HAL_SPI_Receive+0x286>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	225c      	movs	r2, #92	; 0x5c
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d1a:	f7fe f85d 	bl	8000dd8 <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	225d      	movs	r2, #93	; 0x5d
 8002d26:	5c9b      	ldrb	r3, [r3, r2]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d004      	beq.n	8002d38 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002d2e:	2317      	movs	r3, #23
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	2202      	movs	r2, #2
 8002d34:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d36:	e0f7      	b.n	8002f28 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_SPI_Receive+0x8e>
 8002d3e:	1dbb      	adds	r3, r7, #6
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002d46:	2317      	movs	r3, #23
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d4e:	e0eb      	b.n	8002f28 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	225d      	movs	r2, #93	; 0x5d
 8002d54:	2104      	movs	r1, #4
 8002d56:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1dba      	adds	r2, r7, #6
 8002d68:	2144      	movs	r1, #68	; 0x44
 8002d6a:	8812      	ldrh	r2, [r2, #0]
 8002d6c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1dba      	adds	r2, r7, #6
 8002d72:	2146      	movs	r1, #70	; 0x46
 8002d74:	8812      	ldrh	r2, [r2, #0]
 8002d76:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	23e0      	movs	r3, #224	; 0xe0
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d908      	bls.n	8002db4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4966      	ldr	r1, [pc, #408]	; (8002f48 <HAL_SPI_Receive+0x290>)
 8002dae:	400a      	ands	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	e008      	b.n	8002dc6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2180      	movs	r1, #128	; 0x80
 8002dc0:	0149      	lsls	r1, r1, #5
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d10f      	bne.n	8002df2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2140      	movs	r1, #64	; 0x40
 8002dde:	438a      	bics	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4957      	ldr	r1, [pc, #348]	; (8002f4c <HAL_SPI_Receive+0x294>)
 8002dee:	400a      	ands	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2240      	movs	r2, #64	; 0x40
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d007      	beq.n	8002e10 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2140      	movs	r1, #64	; 0x40
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	23e0      	movs	r3, #224	; 0xe0
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d900      	bls.n	8002e1e <HAL_SPI_Receive+0x166>
 8002e1c:	e069      	b.n	8002ef2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e1e:	e031      	b.n	8002e84 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2201      	movs	r2, #1
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d117      	bne.n	8002e5e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	330c      	adds	r3, #12
 8002e34:	001a      	movs	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	7812      	ldrb	r2, [r2, #0]
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2246      	movs	r2, #70	; 0x46
 8002e4e:	5a9b      	ldrh	r3, [r3, r2]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b299      	uxth	r1, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2246      	movs	r2, #70	; 0x46
 8002e5a:	5299      	strh	r1, [r3, r2]
 8002e5c:	e012      	b.n	8002e84 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e5e:	f7fd ffbb 	bl	8000dd8 <HAL_GetTick>
 8002e62:	0002      	movs	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d802      	bhi.n	8002e74 <HAL_SPI_Receive+0x1bc>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	d102      	bne.n	8002e7a <HAL_SPI_Receive+0x1c2>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d104      	bne.n	8002e84 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002e7a:	2317      	movs	r3, #23
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	2203      	movs	r2, #3
 8002e80:	701a      	strb	r2, [r3, #0]
          goto error;
 8002e82:	e051      	b.n	8002f28 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2246      	movs	r2, #70	; 0x46
 8002e88:	5a9b      	ldrh	r3, [r3, r2]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1c7      	bne.n	8002e20 <HAL_SPI_Receive+0x168>
 8002e90:	e035      	b.n	8002efe <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d115      	bne.n	8002ecc <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	b292      	uxth	r2, r2
 8002eac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	1c9a      	adds	r2, r3, #2
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2246      	movs	r2, #70	; 0x46
 8002ebc:	5a9b      	ldrh	r3, [r3, r2]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b299      	uxth	r1, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2246      	movs	r2, #70	; 0x46
 8002ec8:	5299      	strh	r1, [r3, r2]
 8002eca:	e012      	b.n	8002ef2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ecc:	f7fd ff84 	bl	8000dd8 <HAL_GetTick>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d802      	bhi.n	8002ee2 <HAL_SPI_Receive+0x22a>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	d102      	bne.n	8002ee8 <HAL_SPI_Receive+0x230>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d104      	bne.n	8002ef2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002ee8:	2317      	movs	r3, #23
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	2203      	movs	r2, #3
 8002eee:	701a      	strb	r2, [r3, #0]
          goto error;
 8002ef0:	e01a      	b.n	8002f28 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2246      	movs	r2, #70	; 0x46
 8002ef6:	5a9b      	ldrh	r3, [r3, r2]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1c9      	bne.n	8002e92 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	6839      	ldr	r1, [r7, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	0018      	movs	r0, r3
 8002f06:	f000 fb25 	bl	8003554 <SPI_EndRxTransaction>
 8002f0a:	1e03      	subs	r3, r0, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2220      	movs	r2, #32
 8002f12:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d004      	beq.n	8002f26 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002f1c:	2317      	movs	r3, #23
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	e000      	b.n	8002f28 <HAL_SPI_Receive+0x270>
  }

error :
 8002f26:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	225d      	movs	r2, #93	; 0x5d
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	225c      	movs	r2, #92	; 0x5c
 8002f34:	2100      	movs	r1, #0
 8002f36:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002f38:	2317      	movs	r3, #23
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	781b      	ldrb	r3, [r3, #0]
}
 8002f3e:	0018      	movs	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b007      	add	sp, #28
 8002f44:	bd90      	pop	{r4, r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	ffffefff 	.word	0xffffefff
 8002f4c:	ffffbfff 	.word	0xffffbfff

08002f50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	001a      	movs	r2, r3
 8002f5e:	1cbb      	adds	r3, r7, #2
 8002f60:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f62:	2301      	movs	r3, #1
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f66:	2323      	movs	r3, #35	; 0x23
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	225c      	movs	r2, #92	; 0x5c
 8002f72:	5c9b      	ldrb	r3, [r3, r2]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x2c>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e1b5      	b.n	80032e8 <HAL_SPI_TransmitReceive+0x398>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	225c      	movs	r2, #92	; 0x5c
 8002f80:	2101      	movs	r1, #1
 8002f82:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f84:	f7fd ff28 	bl	8000dd8 <HAL_GetTick>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f8c:	201b      	movs	r0, #27
 8002f8e:	183b      	adds	r3, r7, r0
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	215d      	movs	r1, #93	; 0x5d
 8002f94:	5c52      	ldrb	r2, [r2, r1]
 8002f96:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f9e:	2312      	movs	r3, #18
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	1cba      	adds	r2, r7, #2
 8002fa4:	8812      	ldrh	r2, [r2, #0]
 8002fa6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fa8:	183b      	adds	r3, r7, r0
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d011      	beq.n	8002fd4 <HAL_SPI_TransmitReceive+0x84>
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	2382      	movs	r3, #130	; 0x82
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d107      	bne.n	8002fca <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <HAL_SPI_TransmitReceive+0x7a>
 8002fc2:	183b      	adds	r3, r7, r0
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d004      	beq.n	8002fd4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002fca:	2323      	movs	r3, #35	; 0x23
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	2202      	movs	r2, #2
 8002fd0:	701a      	strb	r2, [r3, #0]
    goto error;
 8002fd2:	e17e      	b.n	80032d2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d006      	beq.n	8002fe8 <HAL_SPI_TransmitReceive+0x98>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_SPI_TransmitReceive+0x98>
 8002fe0:	1cbb      	adds	r3, r7, #2
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d104      	bne.n	8002ff2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002fe8:	2323      	movs	r3, #35	; 0x23
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ff0:	e16f      	b.n	80032d2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	225d      	movs	r2, #93	; 0x5d
 8002ff6:	5c9b      	ldrb	r3, [r3, r2]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d003      	beq.n	8003006 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	225d      	movs	r2, #93	; 0x5d
 8003002:	2105      	movs	r1, #5
 8003004:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1cba      	adds	r2, r7, #2
 8003016:	2146      	movs	r1, #70	; 0x46
 8003018:	8812      	ldrh	r2, [r2, #0]
 800301a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1cba      	adds	r2, r7, #2
 8003020:	2144      	movs	r1, #68	; 0x44
 8003022:	8812      	ldrh	r2, [r2, #0]
 8003024:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1cba      	adds	r2, r7, #2
 8003030:	8812      	ldrh	r2, [r2, #0]
 8003032:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1cba      	adds	r2, r7, #2
 8003038:	8812      	ldrh	r2, [r2, #0]
 800303a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	23e0      	movs	r3, #224	; 0xe0
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	429a      	cmp	r2, r3
 8003052:	d908      	bls.n	8003066 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	49a4      	ldr	r1, [pc, #656]	; (80032f0 <HAL_SPI_TransmitReceive+0x3a0>)
 8003060:	400a      	ands	r2, r1
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	e008      	b.n	8003078 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2180      	movs	r1, #128	; 0x80
 8003072:	0149      	lsls	r1, r1, #5
 8003074:	430a      	orrs	r2, r1
 8003076:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2240      	movs	r2, #64	; 0x40
 8003080:	4013      	ands	r3, r2
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d007      	beq.n	8003096 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2140      	movs	r1, #64	; 0x40
 8003092:	430a      	orrs	r2, r1
 8003094:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	23e0      	movs	r3, #224	; 0xe0
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	429a      	cmp	r2, r3
 80030a0:	d800      	bhi.n	80030a4 <HAL_SPI_TransmitReceive+0x154>
 80030a2:	e07f      	b.n	80031a4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_SPI_TransmitReceive+0x168>
 80030ac:	2312      	movs	r3, #18
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d000      	beq.n	80030b8 <HAL_SPI_TransmitReceive+0x168>
 80030b6:	e069      	b.n	800318c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	881a      	ldrh	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	1c9a      	adds	r2, r3, #2
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030dc:	e056      	b.n	800318c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2202      	movs	r2, #2
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d11b      	bne.n	8003124 <HAL_SPI_TransmitReceive+0x1d4>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d016      	beq.n	8003124 <HAL_SPI_TransmitReceive+0x1d4>
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d113      	bne.n	8003124 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	1c9a      	adds	r2, r3, #2
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2201      	movs	r2, #1
 800312c:	4013      	ands	r3, r2
 800312e:	2b01      	cmp	r3, #1
 8003130:	d11c      	bne.n	800316c <HAL_SPI_TransmitReceive+0x21c>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2246      	movs	r2, #70	; 0x46
 8003136:	5a9b      	ldrh	r3, [r3, r2]
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d016      	beq.n	800316c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	b292      	uxth	r2, r2
 800314a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	1c9a      	adds	r2, r3, #2
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2246      	movs	r2, #70	; 0x46
 800315a:	5a9b      	ldrh	r3, [r3, r2]
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b299      	uxth	r1, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2246      	movs	r2, #70	; 0x46
 8003166:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003168:	2301      	movs	r3, #1
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800316c:	f7fd fe34 	bl	8000dd8 <HAL_GetTick>
 8003170:	0002      	movs	r2, r0
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003178:	429a      	cmp	r2, r3
 800317a:	d807      	bhi.n	800318c <HAL_SPI_TransmitReceive+0x23c>
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	3301      	adds	r3, #1
 8003180:	d004      	beq.n	800318c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003182:	2323      	movs	r3, #35	; 0x23
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2203      	movs	r2, #3
 8003188:	701a      	strb	r2, [r3, #0]
        goto error;
 800318a:	e0a2      	b.n	80032d2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1a3      	bne.n	80030de <HAL_SPI_TransmitReceive+0x18e>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2246      	movs	r2, #70	; 0x46
 800319a:	5a9b      	ldrh	r3, [r3, r2]
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d19d      	bne.n	80030de <HAL_SPI_TransmitReceive+0x18e>
 80031a2:	e085      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x268>
 80031ac:	2312      	movs	r3, #18
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d000      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x268>
 80031b6:	e070      	b.n	800329a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	330c      	adds	r3, #12
 80031c2:	7812      	ldrb	r2, [r2, #0]
 80031c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031de:	e05c      	b.n	800329a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2202      	movs	r2, #2
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d11c      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x2d8>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d017      	beq.n	8003228 <HAL_SPI_TransmitReceive+0x2d8>
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d114      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	7812      	ldrb	r2, [r2, #0]
 800320a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2201      	movs	r2, #1
 8003230:	4013      	ands	r3, r2
 8003232:	2b01      	cmp	r3, #1
 8003234:	d11e      	bne.n	8003274 <HAL_SPI_TransmitReceive+0x324>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2246      	movs	r2, #70	; 0x46
 800323a:	5a9b      	ldrh	r3, [r3, r2]
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d018      	beq.n	8003274 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	001a      	movs	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	7812      	ldrb	r2, [r2, #0]
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2246      	movs	r2, #70	; 0x46
 8003262:	5a9b      	ldrh	r3, [r3, r2]
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b299      	uxth	r1, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2246      	movs	r2, #70	; 0x46
 800326e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003270:	2301      	movs	r3, #1
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003274:	f7fd fdb0 	bl	8000dd8 <HAL_GetTick>
 8003278:	0002      	movs	r2, r0
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003280:	429a      	cmp	r2, r3
 8003282:	d802      	bhi.n	800328a <HAL_SPI_TransmitReceive+0x33a>
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	3301      	adds	r3, #1
 8003288:	d102      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x340>
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003290:	2323      	movs	r3, #35	; 0x23
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	2203      	movs	r2, #3
 8003296:	701a      	strb	r2, [r3, #0]
        goto error;
 8003298:	e01b      	b.n	80032d2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d19d      	bne.n	80031e0 <HAL_SPI_TransmitReceive+0x290>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2246      	movs	r2, #70	; 0x46
 80032a8:	5a9b      	ldrh	r3, [r3, r2]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d197      	bne.n	80031e0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f000 f9aa 	bl	8003610 <SPI_EndRxTxTransaction>
 80032bc:	1e03      	subs	r3, r0, #0
 80032be:	d007      	beq.n	80032d0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80032c0:	2323      	movs	r3, #35	; 0x23
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	661a      	str	r2, [r3, #96]	; 0x60
 80032ce:	e000      	b.n	80032d2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80032d0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	225d      	movs	r2, #93	; 0x5d
 80032d6:	2101      	movs	r1, #1
 80032d8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	225c      	movs	r2, #92	; 0x5c
 80032de:	2100      	movs	r1, #0
 80032e0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80032e2:	2323      	movs	r3, #35	; 0x23
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	781b      	ldrb	r3, [r3, #0]
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b00a      	add	sp, #40	; 0x28
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	ffffefff 	.word	0xffffefff

080032f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	1dfb      	adds	r3, r7, #7
 8003302:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003304:	f7fd fd68 	bl	8000dd8 <HAL_GetTick>
 8003308:	0002      	movs	r2, r0
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	18d3      	adds	r3, r2, r3
 8003312:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003314:	f7fd fd60 	bl	8000dd8 <HAL_GetTick>
 8003318:	0003      	movs	r3, r0
 800331a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800331c:	4b3a      	ldr	r3, [pc, #232]	; (8003408 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	015b      	lsls	r3, r3, #5
 8003322:	0d1b      	lsrs	r3, r3, #20
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	4353      	muls	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800332a:	e058      	b.n	80033de <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	3301      	adds	r3, #1
 8003330:	d055      	beq.n	80033de <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003332:	f7fd fd51 	bl	8000dd8 <HAL_GetTick>
 8003336:	0002      	movs	r2, r0
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	429a      	cmp	r2, r3
 8003340:	d902      	bls.n	8003348 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d142      	bne.n	80033ce <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	21e0      	movs	r1, #224	; 0xe0
 8003354:	438a      	bics	r2, r1
 8003356:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	2382      	movs	r3, #130	; 0x82
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	429a      	cmp	r2, r3
 8003362:	d113      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	429a      	cmp	r2, r3
 800336e:	d005      	beq.n	800337c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	429a      	cmp	r2, r3
 800337a:	d107      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2140      	movs	r1, #64	; 0x40
 8003388:	438a      	bics	r2, r1
 800338a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	019b      	lsls	r3, r3, #6
 8003394:	429a      	cmp	r2, r3
 8003396:	d110      	bne.n	80033ba <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	491a      	ldr	r1, [pc, #104]	; (800340c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80033a4:	400a      	ands	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2180      	movs	r1, #128	; 0x80
 80033b4:	0189      	lsls	r1, r1, #6
 80033b6:	430a      	orrs	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	225d      	movs	r2, #93	; 0x5d
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	225c      	movs	r2, #92	; 0x5c
 80033c6:	2100      	movs	r1, #0
 80033c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e017      	b.n	80033fe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3b01      	subs	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	425a      	negs	r2, r3
 80033ee:	4153      	adcs	r3, r2
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	001a      	movs	r2, r3
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d197      	bne.n	800332c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b008      	add	sp, #32
 8003404:	bd80      	pop	{r7, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	20000008 	.word	0x20000008
 800340c:	ffffdfff 	.word	0xffffdfff

08003410 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800341e:	2317      	movs	r3, #23
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003426:	f7fd fcd7 	bl	8000dd8 <HAL_GetTick>
 800342a:	0002      	movs	r2, r0
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	18d3      	adds	r3, r2, r3
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003436:	f7fd fccf 	bl	8000dd8 <HAL_GetTick>
 800343a:	0003      	movs	r3, r0
 800343c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	330c      	adds	r3, #12
 8003444:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	0013      	movs	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	189b      	adds	r3, r3, r2
 8003450:	00da      	lsls	r2, r3, #3
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	0d1b      	lsrs	r3, r3, #20
 8003456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003458:	4353      	muls	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800345c:	e068      	b.n	8003530 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	23c0      	movs	r3, #192	; 0xc0
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	429a      	cmp	r2, r3
 8003466:	d10a      	bne.n	800347e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d107      	bne.n	800347e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	2117      	movs	r1, #23
 8003476:	187b      	adds	r3, r7, r1
 8003478:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800347a:	187b      	adds	r3, r7, r1
 800347c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	d055      	beq.n	8003530 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003484:	f7fd fca8 	bl	8000dd8 <HAL_GetTick>
 8003488:	0002      	movs	r2, r0
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003490:	429a      	cmp	r2, r3
 8003492:	d902      	bls.n	800349a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d142      	bne.n	8003520 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	21e0      	movs	r1, #224	; 0xe0
 80034a6:	438a      	bics	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	2382      	movs	r3, #130	; 0x82
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d113      	bne.n	80034de <SPI_WaitFifoStateUntilTimeout+0xce>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	429a      	cmp	r2, r3
 80034c0:	d005      	beq.n	80034ce <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d107      	bne.n	80034de <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2140      	movs	r1, #64	; 0x40
 80034da:	438a      	bics	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034e2:	2380      	movs	r3, #128	; 0x80
 80034e4:	019b      	lsls	r3, r3, #6
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d110      	bne.n	800350c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4916      	ldr	r1, [pc, #88]	; (8003550 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80034f6:	400a      	ands	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2180      	movs	r1, #128	; 0x80
 8003506:	0189      	lsls	r1, r1, #6
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	225d      	movs	r2, #93	; 0x5d
 8003510:	2101      	movs	r1, #1
 8003512:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	225c      	movs	r2, #92	; 0x5c
 8003518:	2100      	movs	r1, #0
 800351a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e010      	b.n	8003542 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	3b01      	subs	r3, #1
 800352e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	4013      	ands	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	d18e      	bne.n	800345e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	0018      	movs	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	b00a      	add	sp, #40	; 0x28
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	20000008 	.word	0x20000008
 8003550:	ffffdfff 	.word	0xffffdfff

08003554 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	2382      	movs	r3, #130	; 0x82
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	429a      	cmp	r2, r3
 800356a:	d113      	bne.n	8003594 <SPI_EndRxTransaction+0x40>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	429a      	cmp	r2, r3
 8003576:	d005      	beq.n	8003584 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	429a      	cmp	r2, r3
 8003582:	d107      	bne.n	8003594 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2140      	movs	r1, #64	; 0x40
 8003590:	438a      	bics	r2, r1
 8003592:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	0013      	movs	r3, r2
 800359e:	2200      	movs	r2, #0
 80035a0:	2180      	movs	r1, #128	; 0x80
 80035a2:	f7ff fea7 	bl	80032f4 <SPI_WaitFlagStateUntilTimeout>
 80035a6:	1e03      	subs	r3, r0, #0
 80035a8:	d007      	beq.n	80035ba <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ae:	2220      	movs	r2, #32
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e026      	b.n	8003608 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	2382      	movs	r3, #130	; 0x82
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d11f      	bne.n	8003606 <SPI_EndRxTransaction+0xb2>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d005      	beq.n	80035de <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	429a      	cmp	r2, r3
 80035dc:	d113      	bne.n	8003606 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	23c0      	movs	r3, #192	; 0xc0
 80035e2:	00d9      	lsls	r1, r3, #3
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	0013      	movs	r3, r2
 80035ec:	2200      	movs	r2, #0
 80035ee:	f7ff ff0f 	bl	8003410 <SPI_WaitFifoStateUntilTimeout>
 80035f2:	1e03      	subs	r3, r0, #0
 80035f4:	d007      	beq.n	8003606 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fa:	2220      	movs	r2, #32
 80035fc:	431a      	orrs	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e000      	b.n	8003608 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b004      	add	sp, #16
 800360e:	bd80      	pop	{r7, pc}

08003610 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	23c0      	movs	r3, #192	; 0xc0
 8003620:	0159      	lsls	r1, r3, #5
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	0013      	movs	r3, r2
 800362a:	2200      	movs	r2, #0
 800362c:	f7ff fef0 	bl	8003410 <SPI_WaitFifoStateUntilTimeout>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d007      	beq.n	8003644 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003638:	2220      	movs	r2, #32
 800363a:	431a      	orrs	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e027      	b.n	8003694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	0013      	movs	r3, r2
 800364e:	2200      	movs	r2, #0
 8003650:	2180      	movs	r1, #128	; 0x80
 8003652:	f7ff fe4f 	bl	80032f4 <SPI_WaitFlagStateUntilTimeout>
 8003656:	1e03      	subs	r3, r0, #0
 8003658:	d007      	beq.n	800366a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365e:	2220      	movs	r2, #32
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e014      	b.n	8003694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	23c0      	movs	r3, #192	; 0xc0
 800366e:	00d9      	lsls	r1, r3, #3
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	0013      	movs	r3, r2
 8003678:	2200      	movs	r2, #0
 800367a:	f7ff fec9 	bl	8003410 <SPI_WaitFifoStateUntilTimeout>
 800367e:	1e03      	subs	r3, r0, #0
 8003680:	d007      	beq.n	8003692 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003686:	2220      	movs	r2, #32
 8003688:	431a      	orrs	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e000      	b.n	8003694 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b004      	add	sp, #16
 800369a:	bd80      	pop	{r7, pc}

0800369c <__libc_init_array>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	2600      	movs	r6, #0
 80036a0:	4d0c      	ldr	r5, [pc, #48]	; (80036d4 <__libc_init_array+0x38>)
 80036a2:	4c0d      	ldr	r4, [pc, #52]	; (80036d8 <__libc_init_array+0x3c>)
 80036a4:	1b64      	subs	r4, r4, r5
 80036a6:	10a4      	asrs	r4, r4, #2
 80036a8:	42a6      	cmp	r6, r4
 80036aa:	d109      	bne.n	80036c0 <__libc_init_array+0x24>
 80036ac:	2600      	movs	r6, #0
 80036ae:	f000 f821 	bl	80036f4 <_init>
 80036b2:	4d0a      	ldr	r5, [pc, #40]	; (80036dc <__libc_init_array+0x40>)
 80036b4:	4c0a      	ldr	r4, [pc, #40]	; (80036e0 <__libc_init_array+0x44>)
 80036b6:	1b64      	subs	r4, r4, r5
 80036b8:	10a4      	asrs	r4, r4, #2
 80036ba:	42a6      	cmp	r6, r4
 80036bc:	d105      	bne.n	80036ca <__libc_init_array+0x2e>
 80036be:	bd70      	pop	{r4, r5, r6, pc}
 80036c0:	00b3      	lsls	r3, r6, #2
 80036c2:	58eb      	ldr	r3, [r5, r3]
 80036c4:	4798      	blx	r3
 80036c6:	3601      	adds	r6, #1
 80036c8:	e7ee      	b.n	80036a8 <__libc_init_array+0xc>
 80036ca:	00b3      	lsls	r3, r6, #2
 80036cc:	58eb      	ldr	r3, [r5, r3]
 80036ce:	4798      	blx	r3
 80036d0:	3601      	adds	r6, #1
 80036d2:	e7f2      	b.n	80036ba <__libc_init_array+0x1e>
 80036d4:	0800374c 	.word	0x0800374c
 80036d8:	0800374c 	.word	0x0800374c
 80036dc:	0800374c 	.word	0x0800374c
 80036e0:	08003750 	.word	0x08003750

080036e4 <memset>:
 80036e4:	0003      	movs	r3, r0
 80036e6:	1882      	adds	r2, r0, r2
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d100      	bne.n	80036ee <memset+0xa>
 80036ec:	4770      	bx	lr
 80036ee:	7019      	strb	r1, [r3, #0]
 80036f0:	3301      	adds	r3, #1
 80036f2:	e7f9      	b.n	80036e8 <memset+0x4>

080036f4 <_init>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fa:	bc08      	pop	{r3}
 80036fc:	469e      	mov	lr, r3
 80036fe:	4770      	bx	lr

08003700 <_fini>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr
