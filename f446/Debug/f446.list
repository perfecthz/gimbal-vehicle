
f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e764  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c20  0800e938  0800e938  0001e938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f558  0800f558  00020280  2**0
                  CONTENTS
  4 .ARM          00000008  0800f558  0800f558  0001f558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f560  0800f560  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f560  0800f560  0001f560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f564  0800f564  0001f564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0800f568  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c88  20000280  0800f7e8  00020280  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000f08  0800f7e8  00020f08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a85f  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003637  00000000  00000000  0003ab0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003e148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003f528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cef  00000000  00000000  00040790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cfc  00000000  00000000  0006547f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d65ce  00000000  00000000  0007e17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006524  00000000  00000000  0015479c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000280 	.word	0x20000280
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e91c 	.word	0x0800e91c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000284 	.word	0x20000284
 800020c:	0800e91c 	.word	0x0800e91c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96e 	b.w	8000fbc <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468c      	mov	ip, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8083 	bne.w	8000e0e <__udivmoddi4+0x116>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d947      	bls.n	8000d9e <__udivmoddi4+0xa6>
 8000d0e:	fab2 f282 	clz	r2, r2
 8000d12:	b142      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	f1c2 0020 	rsb	r0, r2, #32
 8000d18:	fa24 f000 	lsr.w	r0, r4, r0
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4097      	lsls	r7, r2
 8000d20:	ea40 0c01 	orr.w	ip, r0, r1
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d30:	fa1f fe87 	uxth.w	lr, r7
 8000d34:	fb08 c116 	mls	r1, r8, r6, ip
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4a:	f080 8119 	bcs.w	8000f80 <__udivmoddi4+0x288>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8116 	bls.w	8000f80 <__udivmoddi4+0x288>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8105 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f240 8102 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	b11d      	cbz	r5, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c5 4300 	strd	r4, r3, [r5]
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xaa>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d150      	bne.n	8000e4c <__udivmoddi4+0x154>
 8000daa:	1bcb      	subs	r3, r1, r7
 8000dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	2601      	movs	r6, #1
 8000db6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dba:	0c21      	lsrs	r1, r4, #16
 8000dbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0xe2>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	f200 80e9 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1ac9      	subs	r1, r1, r3
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x10c>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x10a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80d9 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e7bf      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0x12e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80b1 	beq.w	8000f7a <__udivmoddi4+0x282>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x1cc>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0x140>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80b8 	bhi.w	8000fa8 <__udivmoddi4+0x2b0>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	468c      	mov	ip, r1
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0a8      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000e46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e4a:	e7a5      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f603 	lsr.w	r6, r0, r3
 8000e54:	4097      	lsls	r7, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5e:	40d9      	lsrs	r1, r3
 8000e60:	4330      	orrs	r0, r6
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e68:	fa1f f887 	uxth.w	r8, r7
 8000e6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e74:	fb06 f108 	mul.w	r1, r6, r8
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x19c>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e86:	f080 808d 	bcs.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 808a 	bls.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b281      	uxth	r1, r0
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb00 f308 	mul.w	r3, r0, r8
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x1c4>
 8000eac:	1879      	adds	r1, r7, r1
 8000eae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb2:	d273      	bcs.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d971      	bls.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	4439      	add	r1, r7
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ec2:	e778      	b.n	8000db6 <__udivmoddi4+0xbe>
 8000ec4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ec8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ecc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ed0:	431c      	orrs	r4, r3
 8000ed2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ede:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ee2:	431f      	orrs	r7, r3
 8000ee4:	0c3b      	lsrs	r3, r7, #16
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fa1f f884 	uxth.w	r8, r4
 8000eee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ef2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ef6:	fb09 fa08 	mul.w	sl, r9, r8
 8000efa:	458a      	cmp	sl, r1
 8000efc:	fa02 f206 	lsl.w	r2, r2, r6
 8000f00:	fa00 f306 	lsl.w	r3, r0, r6
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x220>
 8000f06:	1861      	adds	r1, r4, r1
 8000f08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f0c:	d248      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f0e:	458a      	cmp	sl, r1
 8000f10:	d946      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f12:	f1a9 0902 	sub.w	r9, r9, #2
 8000f16:	4421      	add	r1, r4
 8000f18:	eba1 010a 	sub.w	r1, r1, sl
 8000f1c:	b2bf      	uxth	r7, r7
 8000f1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f2a:	fb00 f808 	mul.w	r8, r0, r8
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x24a>
 8000f32:	19e7      	adds	r7, r4, r7
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d22e      	bcs.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d92c      	bls.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	4427      	add	r7, r4
 8000f42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f46:	eba7 0708 	sub.w	r7, r7, r8
 8000f4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4e:	454f      	cmp	r7, r9
 8000f50:	46c6      	mov	lr, r8
 8000f52:	4649      	mov	r1, r9
 8000f54:	d31a      	bcc.n	8000f8c <__udivmoddi4+0x294>
 8000f56:	d017      	beq.n	8000f88 <__udivmoddi4+0x290>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x27a>
 8000f5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f66:	40f2      	lsrs	r2, r6
 8000f68:	ea4c 0202 	orr.w	r2, ip, r2
 8000f6c:	40f7      	lsrs	r7, r6
 8000f6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f72:	2600      	movs	r6, #0
 8000f74:	4631      	mov	r1, r6
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e70b      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6fd      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f88:	4543      	cmp	r3, r8
 8000f8a:	d2e5      	bcs.n	8000f58 <__udivmoddi4+0x260>
 8000f8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f90:	eb69 0104 	sbc.w	r1, r9, r4
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7df      	b.n	8000f58 <__udivmoddi4+0x260>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e7d2      	b.n	8000f42 <__udivmoddi4+0x24a>
 8000f9c:	4660      	mov	r0, ip
 8000f9e:	e78d      	b.n	8000ebc <__udivmoddi4+0x1c4>
 8000fa0:	4681      	mov	r9, r0
 8000fa2:	e7b9      	b.n	8000f18 <__udivmoddi4+0x220>
 8000fa4:	4666      	mov	r6, ip
 8000fa6:	e775      	b.n	8000e94 <__udivmoddi4+0x19c>
 8000fa8:	4630      	mov	r0, r6
 8000faa:	e74a      	b.n	8000e42 <__udivmoddi4+0x14a>
 8000fac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb0:	4439      	add	r1, r7
 8000fb2:	e713      	b.n	8000ddc <__udivmoddi4+0xe4>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	443c      	add	r4, r7
 8000fb8:	e724      	b.n	8000e04 <__udivmoddi4+0x10c>
 8000fba:	bf00      	nop

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <Encoder_Struct_Init>:
__IO uint16_t TIM3_OverflowCount;//定时器3溢出次数计数值
__IO uint16_t TIM4_OverflowCount;//定时器4溢出次数计数值
__IO uint16_t TIM5_OverflowCount;//定时器5溢出次数计数值

void Encoder_Struct_Init(Encoder_Struct *Encoder, uint8_t TIMx)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	Encoder->CaptureCount = 0;	//编码器捕获计数值
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
	Encoder->OverflowCount = 0;//编码器溢出次数
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	809a      	strh	r2, [r3, #4]
	Encoder->Capture_D_Value = 0;//编码器前后2次捕获计数的差值
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	80da      	strh	r2, [r3, #6]
	Encoder->CNT_Last = 0;//缓存上一次的TIMx->CNT计数器值
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	811a      	strh	r2, [r3, #8]
	Encoder->TIMx = TIMx;//对应的定时器序号
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	78fa      	ldrb	r2, [r7, #3]
 8000fe8:	729a      	strb	r2, [r3, #10]

	switch(TIMx)//清0对应定时器溢出次数计数值
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	3b02      	subs	r3, #2
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d81a      	bhi.n	8001028 <Encoder_Struct_Init+0x68>
 8000ff2:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <Encoder_Struct_Init+0x38>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	08001009 	.word	0x08001009
 8000ffc:	08001011 	.word	0x08001011
 8001000:	08001019 	.word	0x08001019
 8001004:	08001021 	.word	0x08001021
	{
		case 2: TIM2_OverflowCount=0;break;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <Encoder_Struct_Init+0x78>)
 800100a:	2200      	movs	r2, #0
 800100c:	801a      	strh	r2, [r3, #0]
 800100e:	e00c      	b.n	800102a <Encoder_Struct_Init+0x6a>
		case 3: TIM3_OverflowCount=0;break;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <Encoder_Struct_Init+0x7c>)
 8001012:	2200      	movs	r2, #0
 8001014:	801a      	strh	r2, [r3, #0]
 8001016:	e008      	b.n	800102a <Encoder_Struct_Init+0x6a>
		case 4: TIM4_OverflowCount=0;break;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <Encoder_Struct_Init+0x80>)
 800101a:	2200      	movs	r2, #0
 800101c:	801a      	strh	r2, [r3, #0]
 800101e:	e004      	b.n	800102a <Encoder_Struct_Init+0x6a>
		case 5: TIM5_OverflowCount=0;break;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <Encoder_Struct_Init+0x84>)
 8001022:	2200      	movs	r2, #0
 8001024:	801a      	strh	r2, [r3, #0]
 8001026:	e000      	b.n	800102a <Encoder_Struct_Init+0x6a>
		default:break;
 8001028:	bf00      	nop
	}
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000089a 	.word	0x2000089a
 800103c:	200007bc 	.word	0x200007bc
 8001040:	20000898 	.word	0x20000898
 8001044:	200007be 	.word	0x200007be

08001048 <Encoder_UpdataValue>:




void Encoder_UpdataValue(Encoder_Struct *Encoder, int8_t Signed)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
  uint16_t Encoder_TIM;

	switch(Encoder->TIMx)//获取对应定时器的计数值与溢出次数计数值
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7a9b      	ldrb	r3, [r3, #10]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	3b02      	subs	r3, #2
 800105c:	2b03      	cmp	r3, #3
 800105e:	f200 8084 	bhi.w	800116a <Encoder_UpdataValue+0x122>
 8001062:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <Encoder_UpdataValue+0x20>)
 8001064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001068:	08001079 	.word	0x08001079
 800106c:	0800108d 	.word	0x0800108d
 8001070:	080010a1 	.word	0x080010a1
 8001074:	080010b5 	.word	0x080010b5
	{

		case 2:
		{
			Encoder_TIM = __HAL_TIM_GET_COUNTER(&htim2);
 8001078:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <Encoder_UpdataValue+0x130>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	81fb      	strh	r3, [r7, #14]
			Encoder->OverflowCount = TIM2_OverflowCount;//定时器1溢出次数计数值
 8001080:	4b3e      	ldr	r3, [pc, #248]	; (800117c <Encoder_UpdataValue+0x134>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	b29a      	uxth	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	809a      	strh	r2, [r3, #4]
		}break;
 800108a:	e01d      	b.n	80010c8 <Encoder_UpdataValue+0x80>

		case 3:
		{
			Encoder_TIM = __HAL_TIM_GET_COUNTER(&htim3);//读取TIMx->CNT计数器值
 800108c:	4b3c      	ldr	r3, [pc, #240]	; (8001180 <Encoder_UpdataValue+0x138>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	81fb      	strh	r3, [r7, #14]
			Encoder->OverflowCount = TIM3_OverflowCount;//定时器1溢出次数计数值
 8001094:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <Encoder_UpdataValue+0x13c>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	b29a      	uxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	809a      	strh	r2, [r3, #4]
		}break;
 800109e:	e013      	b.n	80010c8 <Encoder_UpdataValue+0x80>

		case 4:
		{
			Encoder_TIM = __HAL_TIM_GET_COUNTER(&htim4);//读取TIMx->CNT计数器值
 80010a0:	4b39      	ldr	r3, [pc, #228]	; (8001188 <Encoder_UpdataValue+0x140>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	81fb      	strh	r3, [r7, #14]
			Encoder->OverflowCount = TIM4_OverflowCount;//定时器1溢出次数计数值
 80010a8:	4b38      	ldr	r3, [pc, #224]	; (800118c <Encoder_UpdataValue+0x144>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	809a      	strh	r2, [r3, #4]
		}break;
 80010b2:	e009      	b.n	80010c8 <Encoder_UpdataValue+0x80>

		case 5:
		{
			Encoder_TIM = __HAL_TIM_GET_COUNTER(&htim5);//读取TIMx->CNT计数器值
 80010b4:	4b36      	ldr	r3, [pc, #216]	; (8001190 <Encoder_UpdataValue+0x148>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	81fb      	strh	r3, [r7, #14]
			Encoder->OverflowCount = TIM5_OverflowCount;//定时器1溢出次数计数值
 80010bc:	4b35      	ldr	r3, [pc, #212]	; (8001194 <Encoder_UpdataValue+0x14c>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	809a      	strh	r2, [r3, #4]
		}break;
 80010c6:	bf00      	nop

		default: return;//退出函数
	}

	if(Encoder_TIM > Encoder->CNT_Last)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	891b      	ldrh	r3, [r3, #8]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	89fa      	ldrh	r2, [r7, #14]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d916      	bls.n	8001102 <Encoder_UpdataValue+0xba>
	{
		Encoder->Capture_D_Value = Encoder_TIM - Encoder->CNT_Last;//获取编码器前后2次捕获计数的差值
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	891b      	ldrh	r3, [r3, #8]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	89fa      	ldrh	r2, [r7, #14]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	80da      	strh	r2, [r3, #6]
		if((uint16_t)Encoder->Capture_D_Value > 10000) Encoder->Capture_D_Value -= 65536;//判断是否溢出跳变
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	88db      	ldrh	r3, [r3, #6]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d91b      	bls.n	800112e <Encoder_UpdataValue+0xe6>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	88db      	ldrh	r3, [r3, #6]
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	80da      	strh	r2, [r3, #6]
 8001100:	e015      	b.n	800112e <Encoder_UpdataValue+0xe6>
	}
	else
	{
		Encoder->Capture_D_Value = 0-(Encoder->CNT_Last - Encoder_TIM);//获取编码器前后2次捕获计数的差值
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	891b      	ldrh	r3, [r3, #8]
 8001106:	b29b      	uxth	r3, r3
 8001108:	89fa      	ldrh	r2, [r7, #14]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	b29b      	uxth	r3, r3
 800110e:	b21a      	sxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	80da      	strh	r2, [r3, #6]
		if((uint16_t)Encoder->Capture_D_Value > 10000) Encoder->Capture_D_Value += 65536;//判断是否溢出跳变
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	88db      	ldrh	r3, [r3, #6]
 8001118:	b21b      	sxth	r3, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001120:	4293      	cmp	r3, r2
 8001122:	d904      	bls.n	800112e <Encoder_UpdataValue+0xe6>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	88db      	ldrh	r3, [r3, #6]
 8001128:	b21a      	sxth	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	80da      	strh	r2, [r3, #6]
	}

	Encoder->CNT_Last = Encoder_TIM;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	89fa      	ldrh	r2, [r7, #14]
 8001132:	811a      	strh	r2, [r3, #8]

	Encoder->Capture_D_Value = (Encoder->Capture_D_Value) * Signed;//获取编码器前后2次捕获计数的差值
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	88db      	ldrh	r3, [r3, #6]
 8001138:	b21b      	sxth	r3, r3
 800113a:	b29a      	uxth	r2, r3
 800113c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001140:	b29b      	uxth	r3, r3
 8001142:	fb12 f303 	smulbb	r3, r2, r3
 8001146:	b29b      	uxth	r3, r3
 8001148:	b21a      	sxth	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	80da      	strh	r2, [r3, #6]
	Encoder->CaptureCount = (Encoder->OverflowCount*65536 + Encoder_TIM) * Signed;//获取编码器捕获计数值
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	889b      	ldrh	r3, [r3, #4]
 8001152:	b29b      	uxth	r3, r3
 8001154:	041a      	lsls	r2, r3, #16
 8001156:	89fb      	ldrh	r3, [r7, #14]
 8001158:	4413      	add	r3, r2
 800115a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800115e:	fb02 f303 	mul.w	r3, r2, r3
 8001162:	461a      	mov	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e000      	b.n	800116c <Encoder_UpdataValue+0x124>
		default: return;//退出函数
 800116a:	bf00      	nop
}
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000850 	.word	0x20000850
 800117c:	2000089a 	.word	0x2000089a
 8001180:	20000774 	.word	0x20000774
 8001184:	200007bc 	.word	0x200007bc
 8001188:	200006e4 	.word	0x200006e4
 800118c:	20000898 	.word	0x20000898
 8001190:	2000072c 	.word	0x2000072c
 8001194:	200007be 	.word	0x200007be

08001198 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a8:	d116      	bne.n	80011d8 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	2b10      	cmp	r3, #16
 80011b6:	d107      	bne.n	80011c8 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			TIM2_OverflowCount--;       //向下计数溢出
 80011b8:	4b34      	ldr	r3, [pc, #208]	; (800128c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	3b01      	subs	r3, #1
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b32      	ldr	r3, [pc, #200]	; (800128c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80011c4:	801a      	strh	r2, [r3, #0]
		else
		{
			TIM5_OverflowCount++;  		 //向上计数溢出
		}
	}
}
 80011c6:	e05a      	b.n	800127e <HAL_TIM_PeriodElapsedCallback+0xe6>
			TIM2_OverflowCount++;  		 //向上计数溢出
 80011c8:	4b30      	ldr	r3, [pc, #192]	; (800128c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	3301      	adds	r3, #1
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b2e      	ldr	r3, [pc, #184]	; (800128c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80011d4:	801a      	strh	r2, [r3, #0]
}
 80011d6:	e052      	b.n	800127e <HAL_TIM_PeriodElapsedCallback+0xe6>
	else if(htim->Instance == TIM3)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a2c      	ldr	r2, [pc, #176]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d116      	bne.n	8001210 <HAL_TIM_PeriodElapsedCallback+0x78>
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d107      	bne.n	8001200 <HAL_TIM_PeriodElapsedCallback+0x68>
			TIM3_OverflowCount--;       //向下计数溢出
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	3b01      	subs	r3, #1
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	4b26      	ldr	r3, [pc, #152]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80011fc:	801a      	strh	r2, [r3, #0]
}
 80011fe:	e03e      	b.n	800127e <HAL_TIM_PeriodElapsedCallback+0xe6>
			TIM3_OverflowCount++;  		 //向上计数溢出
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	b29b      	uxth	r3, r3
 8001206:	3301      	adds	r3, #1
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800120c:	801a      	strh	r2, [r3, #0]
}
 800120e:	e036      	b.n	800127e <HAL_TIM_PeriodElapsedCallback+0xe6>
	else if(htim->Instance == TIM4)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a20      	ldr	r2, [pc, #128]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d116      	bne.n	8001248 <HAL_TIM_PeriodElapsedCallback+0xb0>
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	2b10      	cmp	r3, #16
 8001226:	d107      	bne.n	8001238 <HAL_TIM_PeriodElapsedCallback+0xa0>
			TIM4_OverflowCount--;       //向下计数溢出
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x104>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	3b01      	subs	r3, #1
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001234:	801a      	strh	r2, [r3, #0]
}
 8001236:	e022      	b.n	800127e <HAL_TIM_PeriodElapsedCallback+0xe6>
			TIM4_OverflowCount++;  		 //向上计数溢出
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x104>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	b29b      	uxth	r3, r3
 800123e:	3301      	adds	r3, #1
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001244:	801a      	strh	r2, [r3, #0]
}
 8001246:	e01a      	b.n	800127e <HAL_TIM_PeriodElapsedCallback+0xe6>
	else if(htim->Instance == TIM5)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d115      	bne.n	800127e <HAL_TIM_PeriodElapsedCallback+0xe6>
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b10      	cmp	r3, #16
 800125e:	d107      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0xd8>
			TIM5_OverflowCount--;       //向下计数溢出
 8001260:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	b29b      	uxth	r3, r3
 8001266:	3b01      	subs	r3, #1
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800126c:	801a      	strh	r2, [r3, #0]
}
 800126e:	e006      	b.n	800127e <HAL_TIM_PeriodElapsedCallback+0xe6>
			TIM5_OverflowCount++;  		 //向上计数溢出
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	3301      	adds	r3, #1
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800127c:	801a      	strh	r2, [r3, #0]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	2000089a 	.word	0x2000089a
 8001290:	40000400 	.word	0x40000400
 8001294:	200007bc 	.word	0x200007bc
 8001298:	40000800 	.word	0x40000800
 800129c:	20000898 	.word	0x20000898
 80012a0:	40000c00 	.word	0x40000c00
 80012a4:	200007be 	.word	0x200007be

080012a8 <kenematics_mecanum_inverse>:
 */
#include <math.h>
#include "Kinematics_Mecanum.h"
#include "MotorControl.h"

VelControl_Struct kenematics_mecanum_inverse (uint16_t x1, uint16_t y1, uint16_t x2){
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b098      	sub	sp, #96	; 0x60
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	817b      	strh	r3, [r7, #10]
 80012ba:	460b      	mov	r3, r1
 80012bc:	813b      	strh	r3, [r7, #8]
 80012be:	4613      	mov	r3, r2
 80012c0:	80fb      	strh	r3, [r7, #6]
	VelControl_Struct expected_rpms;
	float scaled_x1, scaled_y1, scaled_x2;
	float temp_x1, temp_y1, temp_x2;
	int RL, FB, Turn;
	RL = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	647b      	str	r3, [r7, #68]	; 0x44
	FB = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	643b      	str	r3, [r7, #64]	; 0x40
	Turn = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	float k;
	float move_sum;
	// our implementation decided that the activation trigger value for any slight movement starts at 1500 - 2500, total possible value for x1 (right and left movement), y1(front and back movement), x2(rotation) would be 0 - 4000
	if (abs(x1-2000) < 500){
 80012ce:	897b      	ldrh	r3, [r7, #10]
 80012d0:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80012d4:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 80012d8:	dd09      	ble.n	80012ee <kenematics_mecanum_inverse+0x46>
 80012da:	897b      	ldrh	r3, [r7, #10]
 80012dc:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80012e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012e4:	da03      	bge.n	80012ee <kenematics_mecanum_inverse+0x46>
		scaled_x1 = 0;
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012ec:	e024      	b.n	8001338 <kenematics_mecanum_inverse+0x90>
	}
	else {
		scaled_x1 = ((x1 - 2000)>= 0) ?  (float)(x1 - 2500) / 1500 * 100  : (float)(x1 - 1500) / 1500 * 100;
 80012ee:	897b      	ldrh	r3, [r7, #10]
 80012f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012f4:	d30f      	bcc.n	8001316 <kenematics_mecanum_inverse+0x6e>
 80012f6:	897b      	ldrh	r3, [r7, #10]
 80012f8:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001304:	eddf 6abc 	vldr	s13, [pc, #752]	; 80015f8 <kenematics_mecanum_inverse+0x350>
 8001308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130c:	ed9f 7abb 	vldr	s14, [pc, #748]	; 80015fc <kenematics_mecanum_inverse+0x354>
 8001310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001314:	e00e      	b.n	8001334 <kenematics_mecanum_inverse+0x8c>
 8001316:	897b      	ldrh	r3, [r7, #10]
 8001318:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001324:	eddf 6ab4 	vldr	s13, [pc, #720]	; 80015f8 <kenematics_mecanum_inverse+0x350>
 8001328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132c:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80015fc <kenematics_mecanum_inverse+0x354>
 8001330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001334:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	}

	if (abs(y1-2000) < 500){
 8001338:	893b      	ldrh	r3, [r7, #8]
 800133a:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800133e:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8001342:	dd09      	ble.n	8001358 <kenematics_mecanum_inverse+0xb0>
 8001344:	893b      	ldrh	r3, [r7, #8]
 8001346:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800134a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800134e:	da03      	bge.n	8001358 <kenematics_mecanum_inverse+0xb0>
		scaled_y1 = 0;
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	65bb      	str	r3, [r7, #88]	; 0x58
 8001356:	e024      	b.n	80013a2 <kenematics_mecanum_inverse+0xfa>
	}
	else {
		scaled_y1 = ((y1 - 2000)>= 0) ?  (float)(y1 - 2500) / 1500 * 100  : (float)(y1 - 1500) / 1500 * 100;
 8001358:	893b      	ldrh	r3, [r7, #8]
 800135a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800135e:	d30f      	bcc.n	8001380 <kenematics_mecanum_inverse+0xd8>
 8001360:	893b      	ldrh	r3, [r7, #8]
 8001362:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800136e:	eddf 6aa2 	vldr	s13, [pc, #648]	; 80015f8 <kenematics_mecanum_inverse+0x350>
 8001372:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001376:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80015fc <kenematics_mecanum_inverse+0x354>
 800137a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137e:	e00e      	b.n	800139e <kenematics_mecanum_inverse+0xf6>
 8001380:	893b      	ldrh	r3, [r7, #8]
 8001382:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800138e:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80015f8 <kenematics_mecanum_inverse+0x350>
 8001392:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001396:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80015fc <kenematics_mecanum_inverse+0x354>
 800139a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	}
	if (abs(x2-2000) < 500){
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80013a8:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 80013ac:	dd09      	ble.n	80013c2 <kenematics_mecanum_inverse+0x11a>
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80013b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013b8:	da03      	bge.n	80013c2 <kenematics_mecanum_inverse+0x11a>
		scaled_x2 = 0;
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	657b      	str	r3, [r7, #84]	; 0x54
 80013c0:	e024      	b.n	800140c <kenematics_mecanum_inverse+0x164>
	}
	else {
		scaled_x2 = ((x2 - 2000)>= 0) ?  (float)(x2 - 2500) / 1500 * 100  : (float)(x2 - 1500) / 1500 * 100;
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013c8:	d30f      	bcc.n	80013ea <kenematics_mecanum_inverse+0x142>
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d8:	eddf 6a87 	vldr	s13, [pc, #540]	; 80015f8 <kenematics_mecanum_inverse+0x350>
 80013dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e0:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80015fc <kenematics_mecanum_inverse+0x354>
 80013e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e8:	e00e      	b.n	8001408 <kenematics_mecanum_inverse+0x160>
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f8:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80015f8 <kenematics_mecanum_inverse+0x350>
 80013fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001400:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80015fc <kenematics_mecanum_inverse+0x354>
 8001404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001408:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
//	scaled_x1 = ((x1 - 2000)>= 0) ?  (x1 - 2500) / 1500 * 100  : (x1 - 1500) / 1500 * 100;
//	scaled_y1 = ((x1 - 2000)>= 0) ?  (x1 - 2500) / 1500 * 100  : (x1 - 1500) / 1500 * 100;
//	scaled_x2 = ((x1 - 2000)>= 0) ?  (x1 - 2500) / 1500 * 100  : (x1 - 1500) / 1500 * 100;

	//	move_sum = abs(scaled_x1) + abs(scaled_y1) + abs(scaled_x2);
	temp_x1 = scaled_x1;
 800140c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140e:	653b      	str	r3, [r7, #80]	; 0x50
	temp_y1 = scaled_y1;
 8001410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001412:	64fb      	str	r3, [r7, #76]	; 0x4c
	temp_x2 = scaled_x2;
 8001414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001416:	64bb      	str	r3, [r7, #72]	; 0x48
	if(scaled_x1 < 0) {
 8001418:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800141c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001424:	d505      	bpl.n	8001432 <kenematics_mecanum_inverse+0x18a>
		temp_x1 = scaled_x1 * -1;
 8001426:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800142a:	eef1 7a67 	vneg.f32	s15, s15
 800142e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	}
	if(scaled_y1 < 0) {
 8001432:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001436:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	d505      	bpl.n	800144c <kenematics_mecanum_inverse+0x1a4>
		temp_y1 = scaled_y1 * -1;
 8001440:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001444:	eef1 7a67 	vneg.f32	s15, s15
 8001448:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	}
	if(scaled_x2 < 0) {
 800144c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001450:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	d505      	bpl.n	8001466 <kenematics_mecanum_inverse+0x1be>
		temp_x2 = scaled_x2 * -1;
 800145a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800145e:	eef1 7a67 	vneg.f32	s15, s15
 8001462:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	}

	move_sum = temp_x1 + temp_y1 + temp_x2;
 8001466:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800146a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800146e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001472:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	if(move_sum == 0){
 800147e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001482:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148a:	d106      	bne.n	800149a <kenematics_mecanum_inverse+0x1f2>
		RL = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	647b      	str	r3, [r7, #68]	; 0x44
		FB = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	643b      	str	r3, [r7, #64]	; 0x40
		Turn = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001498:	e047      	b.n	800152a <kenematics_mecanum_inverse+0x282>
	}
	else if(move_sum >=100){
 800149a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800149e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80015fc <kenematics_mecanum_inverse+0x354>
 80014a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014aa:	db29      	blt.n	8001500 <kenematics_mecanum_inverse+0x258>
		k = 100 / move_sum;
 80014ac:	eddf 6a53 	vldr	s13, [pc, #332]	; 80015fc <kenematics_mecanum_inverse+0x354>
 80014b0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80014b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		FB = scaled_y1 * k;
 80014bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80014c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014cc:	ee17 3a90 	vmov	r3, s15
 80014d0:	643b      	str	r3, [r7, #64]	; 0x40
		RL = scaled_x1 * k;
 80014d2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80014d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e2:	ee17 3a90 	vmov	r3, s15
 80014e6:	647b      	str	r3, [r7, #68]	; 0x44
		Turn = scaled_x2 * k;
 80014e8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80014ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f8:	ee17 3a90 	vmov	r3, s15
 80014fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014fe:	e014      	b.n	800152a <kenematics_mecanum_inverse+0x282>
	}
	else{
		FB = scaled_y1;
 8001500:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001508:	ee17 3a90 	vmov	r3, s15
 800150c:	643b      	str	r3, [r7, #64]	; 0x40
		RL = scaled_x1;
 800150e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001516:	ee17 3a90 	vmov	r3, s15
 800151a:	647b      	str	r3, [r7, #68]	; 0x44
		Turn = scaled_x2;
 800151c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001524:	ee17 3a90 	vmov	r3, s15
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	MotorFL_Input(FB + RL * 1 + Turn);
 800152a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800152c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800152e:	441a      	add	r2, r3
 8001530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001532:	4413      	add	r3, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fa27 	bl	8001988 <MotorFL_Input>
	MotorBL_Input(FB + RL * -1 + Turn);
 800153a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800153c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800153e:	1ad2      	subs	r2, r2, r3
 8001540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001542:	4413      	add	r3, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f000 fa63 	bl	8001a10 <MotorBL_Input>
	MotorFR_Input(FB + RL * -1 + Turn * -1);
 800154a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800154c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800154e:	1ad2      	subs	r2, r2, r3
 8001550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fa39 	bl	80019cc <MotorFR_Input>
	MotorBR_Input(FB + RL * 1 + Turn * -1);
 800155a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800155c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800155e:	441a      	add	r2, r3
 8001560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fa75 	bl	8001a54 <MotorBR_Input>


	expected_rpms.M1_SetRPM = abs(FB + RL * 1 + Turn) < 40 ? 0: (abs(FB + RL * 1 + Turn)*6.5267 - 243.98);
 800156a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800156c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800156e:	441a      	add	r2, r3
 8001570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001572:	4413      	add	r3, r2
 8001574:	f113 0f27 	cmn.w	r3, #39	; 0x27
 8001578:	db06      	blt.n	8001588 <kenematics_mecanum_inverse+0x2e0>
 800157a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800157c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800157e:	441a      	add	r2, r3
 8001580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001582:	4413      	add	r3, r2
 8001584:	2b27      	cmp	r3, #39	; 0x27
 8001586:	dd20      	ble.n	80015ca <kenematics_mecanum_inverse+0x322>
 8001588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800158a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800158c:	441a      	add	r2, r3
 800158e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001590:	4413      	add	r3, r2
 8001592:	2b00      	cmp	r3, #0
 8001594:	bfb8      	it	lt
 8001596:	425b      	neglt	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffe3 	bl	8000564 <__aeabi_i2d>
 800159e:	a312      	add	r3, pc, #72	; (adr r3, 80015e8 <kenematics_mecanum_inverse+0x340>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f848 	bl	8000638 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	a30f      	add	r3, pc, #60	; (adr r3, 80015f0 <kenematics_mecanum_inverse+0x348>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7fe fe87 	bl	80002c8 <__aeabi_dsub>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fb31 	bl	8000c28 <__aeabi_d2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	e001      	b.n	80015ce <kenematics_mecanum_inverse+0x326>
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
	expected_rpms.M1_SetRPM = expected_rpms.M1_SetRPM > 330 ? 330: expected_rpms.M1_SetRPM;
 80015d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015d4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001600 <kenematics_mecanum_inverse+0x358>
 80015d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	dd12      	ble.n	8001608 <kenematics_mecanum_inverse+0x360>
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <kenematics_mecanum_inverse+0x35c>)
 80015e4:	e011      	b.n	800160a <kenematics_mecanum_inverse+0x362>
 80015e6:	bf00      	nop
 80015e8:	3eab367a 	.word	0x3eab367a
 80015ec:	401a1b57 	.word	0x401a1b57
 80015f0:	28f5c28f 	.word	0x28f5c28f
 80015f4:	406e7f5c 	.word	0x406e7f5c
 80015f8:	44bb8000 	.word	0x44bb8000
 80015fc:	42c80000 	.word	0x42c80000
 8001600:	43a50000 	.word	0x43a50000
 8001604:	43a50000 	.word	0x43a50000
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	627b      	str	r3, [r7, #36]	; 0x24

	expected_rpms.M2_SetRPM = abs(FB + RL * -1 + Turn) < 40 ? 0: (abs(FB + RL * -1 + Turn)*6.5267 - 243.98);
 800160c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800160e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001610:	1ad2      	subs	r2, r2, r3
 8001612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001614:	4413      	add	r3, r2
 8001616:	f113 0f27 	cmn.w	r3, #39	; 0x27
 800161a:	db06      	blt.n	800162a <kenematics_mecanum_inverse+0x382>
 800161c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800161e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001620:	1ad2      	subs	r2, r2, r3
 8001622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001624:	4413      	add	r3, r2
 8001626:	2b27      	cmp	r3, #39	; 0x27
 8001628:	dd20      	ble.n	800166c <kenematics_mecanum_inverse+0x3c4>
 800162a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800162c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800162e:	1ad2      	subs	r2, r2, r3
 8001630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001632:	4413      	add	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	bfb8      	it	lt
 8001638:	425b      	neglt	r3, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff92 	bl	8000564 <__aeabi_i2d>
 8001640:	a359      	add	r3, pc, #356	; (adr r3, 80017a8 <kenematics_mecanum_inverse+0x500>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe fff7 	bl	8000638 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	a357      	add	r3, pc, #348	; (adr r3, 80017b0 <kenematics_mecanum_inverse+0x508>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe fe36 	bl	80002c8 <__aeabi_dsub>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff fae0 	bl	8000c28 <__aeabi_d2f>
 8001668:	4603      	mov	r3, r0
 800166a:	e001      	b.n	8001670 <kenematics_mecanum_inverse+0x3c8>
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
	expected_rpms.M2_SetRPM = expected_rpms.M2_SetRPM > 330 ? 330: expected_rpms.M2_SetRPM;
 8001672:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001676:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80017b8 <kenematics_mecanum_inverse+0x510>
 800167a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	dd01      	ble.n	8001688 <kenematics_mecanum_inverse+0x3e0>
 8001684:	4b4d      	ldr	r3, [pc, #308]	; (80017bc <kenematics_mecanum_inverse+0x514>)
 8001686:	e000      	b.n	800168a <kenematics_mecanum_inverse+0x3e2>
 8001688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28

	expected_rpms.M3_SetRPM = abs(FB + RL * -1 + Turn * -1) < 40 ? 0: (abs(FB + RL * -1 + Turn * -1)*6.5267 - 243.98);
 800168c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800168e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001690:	1ad2      	subs	r2, r2, r3
 8001692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f113 0f27 	cmn.w	r3, #39	; 0x27
 800169a:	db06      	blt.n	80016aa <kenematics_mecanum_inverse+0x402>
 800169c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800169e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016a0:	1ad2      	subs	r2, r2, r3
 80016a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b27      	cmp	r3, #39	; 0x27
 80016a8:	dd20      	ble.n	80016ec <kenematics_mecanum_inverse+0x444>
 80016aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ae:	1ad2      	subs	r2, r2, r3
 80016b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bfb8      	it	lt
 80016b8:	425b      	neglt	r3, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff52 	bl	8000564 <__aeabi_i2d>
 80016c0:	a339      	add	r3, pc, #228	; (adr r3, 80017a8 <kenematics_mecanum_inverse+0x500>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7fe ffb7 	bl	8000638 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	a337      	add	r3, pc, #220	; (adr r3, 80017b0 <kenematics_mecanum_inverse+0x508>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe fdf6 	bl	80002c8 <__aeabi_dsub>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff faa0 	bl	8000c28 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	e001      	b.n	80016f0 <kenematics_mecanum_inverse+0x448>
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	expected_rpms.M3_SetRPM = expected_rpms.M3_SetRPM > 330 ? 330: expected_rpms.M3_SetRPM;
 80016f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016f6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80017b8 <kenematics_mecanum_inverse+0x510>
 80016fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	dd01      	ble.n	8001708 <kenematics_mecanum_inverse+0x460>
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <kenematics_mecanum_inverse+0x514>)
 8001706:	e000      	b.n	800170a <kenematics_mecanum_inverse+0x462>
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c

	expected_rpms.M4_SetRPM = abs(FB + RL * 1 + Turn * -1) < 40 ? 0: (abs(FB + RL * 1 + Turn * -1)*6.5267 - 243.98);
 800170c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800170e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001710:	441a      	add	r2, r3
 8001712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f113 0f27 	cmn.w	r3, #39	; 0x27
 800171a:	db06      	blt.n	800172a <kenematics_mecanum_inverse+0x482>
 800171c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800171e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001720:	441a      	add	r2, r3
 8001722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b27      	cmp	r3, #39	; 0x27
 8001728:	dd20      	ble.n	800176c <kenematics_mecanum_inverse+0x4c4>
 800172a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800172c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800172e:	441a      	add	r2, r3
 8001730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	bfb8      	it	lt
 8001738:	425b      	neglt	r3, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff12 	bl	8000564 <__aeabi_i2d>
 8001740:	a319      	add	r3, pc, #100	; (adr r3, 80017a8 <kenematics_mecanum_inverse+0x500>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7fe ff77 	bl	8000638 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	a317      	add	r3, pc, #92	; (adr r3, 80017b0 <kenematics_mecanum_inverse+0x508>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe fdb6 	bl	80002c8 <__aeabi_dsub>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f7ff fa60 	bl	8000c28 <__aeabi_d2f>
 8001768:	4603      	mov	r3, r0
 800176a:	e001      	b.n	8001770 <kenematics_mecanum_inverse+0x4c8>
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
	expected_rpms.M4_SetRPM = expected_rpms.M4_SetRPM > 330 ? 330: expected_rpms.M4_SetRPM;
 8001772:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001776:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80017b8 <kenematics_mecanum_inverse+0x510>
 800177a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	dd01      	ble.n	8001788 <kenematics_mecanum_inverse+0x4e0>
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <kenematics_mecanum_inverse+0x514>)
 8001786:	e000      	b.n	800178a <kenematics_mecanum_inverse+0x4e2>
 8001788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178a:	633b      	str	r3, [r7, #48]	; 0x30

	return expected_rpms;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	461d      	mov	r5, r3
 8001790:	f107 0414 	add.w	r4, r7, #20
 8001794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001798:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800179c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
////	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
//	  MotorBL_Forward();
//	  TIM1->CCR3 = 50;
//	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);

}
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	3760      	adds	r7, #96	; 0x60
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdb0      	pop	{r4, r5, r7, pc}
 80017a8:	3eab367a 	.word	0x3eab367a
 80017ac:	401a1b57 	.word	0x401a1b57
 80017b0:	28f5c28f 	.word	0x28f5c28f
 80017b4:	406e7f5c 	.word	0x406e7f5c
 80017b8:	43a50000 	.word	0x43a50000
 80017bc:	43a50000 	.word	0x43a50000

080017c0 <MotorFL_Forward>:

#include "MotorControl.h"
#include "Kinematics_Mecanum.h"
#include "main.h"
//FL
void MotorFL_Forward(void){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MotorFL_Forward+0x20>)
 80017cc:	f004 fb9a 	bl	8005f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d6:	4803      	ldr	r0, [pc, #12]	; (80017e4 <MotorFL_Forward+0x24>)
 80017d8:	f004 fb94 	bl	8005f04 <HAL_GPIO_WritePin>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40020800 	.word	0x40020800

080017e8 <MotorFL_Reverse>:

void MotorFL_Reverse(void){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MotorFL_Reverse+0x20>)
 80017f4:	f004 fb86 	bl	8005f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017fe:	4803      	ldr	r0, [pc, #12]	; (800180c <MotorFL_Reverse+0x24>)
 8001800:	f004 fb80 	bl	8005f04 <HAL_GPIO_WritePin>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40020000 	.word	0x40020000
 800180c:	40020800 	.word	0x40020800

08001810 <MotorFL_Stop>:

void MotorFL_Stop(void){
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MotorFL_Stop+0x20>)
 800181c:	f004 fb72 	bl	8005f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001826:	4803      	ldr	r0, [pc, #12]	; (8001834 <MotorFL_Stop+0x24>)
 8001828:	f004 fb6c 	bl	8005f04 <HAL_GPIO_WritePin>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40020000 	.word	0x40020000
 8001834:	40020800 	.word	0x40020800

08001838 <MotorFR_Forward>:
//FR
void MotorFR_Forward(void){
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MotorFR_Forward+0x20>)
 8001844:	f004 fb5e 	bl	8005f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800184e:	4802      	ldr	r0, [pc, #8]	; (8001858 <MotorFR_Forward+0x20>)
 8001850:	f004 fb58 	bl	8005f04 <HAL_GPIO_WritePin>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40020400 	.word	0x40020400

0800185c <MotorFR_Reverse>:

void MotorFR_Reverse(void){
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <MotorFR_Reverse+0x20>)
 8001868:	f004 fb4c 	bl	8005f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001872:	4802      	ldr	r0, [pc, #8]	; (800187c <MotorFR_Reverse+0x20>)
 8001874:	f004 fb46 	bl	8005f04 <HAL_GPIO_WritePin>
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40020400 	.word	0x40020400

08001880 <MotorFR_Stop>:

void MotorFR_Stop(void){
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MotorFR_Stop+0x20>)
 800188c:	f004 fb3a 	bl	8005f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001896:	4802      	ldr	r0, [pc, #8]	; (80018a0 <MotorFR_Stop+0x20>)
 8001898:	f004 fb34 	bl	8005f04 <HAL_GPIO_WritePin>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40020400 	.word	0x40020400

080018a4 <MotorBL_Forward>:
//BL
void MotorBL_Forward(void){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MotorBL_Forward+0x20>)
 80018b0:	f004 fb28 	bl	8005f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2104      	movs	r1, #4
 80018b8:	4803      	ldr	r0, [pc, #12]	; (80018c8 <MotorBL_Forward+0x24>)
 80018ba:	f004 fb23 	bl	8005f04 <HAL_GPIO_WritePin>
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020400 	.word	0x40020400

080018cc <MotorBL_Reverse>:

void MotorBL_Reverse(void){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MotorBL_Reverse+0x20>)
 80018d8:	f004 fb14 	bl	8005f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	2104      	movs	r1, #4
 80018e0:	4803      	ldr	r0, [pc, #12]	; (80018f0 <MotorBL_Reverse+0x24>)
 80018e2:	f004 fb0f 	bl	8005f04 <HAL_GPIO_WritePin>
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40020800 	.word	0x40020800
 80018f0:	40020400 	.word	0x40020400

080018f4 <MotorBL_Stop>:

void MotorBL_Stop(void){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <MotorBL_Stop+0x20>)
 8001900:	f004 fb00 	bl	8005f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	2104      	movs	r1, #4
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <MotorBL_Stop+0x24>)
 800190a:	f004 fafb 	bl	8005f04 <HAL_GPIO_WritePin>
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40020800 	.word	0x40020800
 8001918:	40020400 	.word	0x40020400

0800191c <MotorBR_Forward>:
//BR
void MotorBR_Forward(void){
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001926:	4805      	ldr	r0, [pc, #20]	; (800193c <MotorBR_Forward+0x20>)
 8001928:	f004 faec 	bl	8005f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001932:	4802      	ldr	r0, [pc, #8]	; (800193c <MotorBR_Forward+0x20>)
 8001934:	f004 fae6 	bl	8005f04 <HAL_GPIO_WritePin>
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40020400 	.word	0x40020400

08001940 <MotorBR_Reverse>:

void MotorBR_Reverse(void){
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MotorBR_Reverse+0x20>)
 800194c:	f004 fada 	bl	8005f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001956:	4802      	ldr	r0, [pc, #8]	; (8001960 <MotorBR_Reverse+0x20>)
 8001958:	f004 fad4 	bl	8005f04 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40020400 	.word	0x40020400

08001964 <MotorBR_Stop>:

void MotorBR_Stop(void){
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <MotorBR_Stop+0x20>)
 8001970:	f004 fac8 	bl	8005f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197a:	4802      	ldr	r0, [pc, #8]	; (8001984 <MotorBR_Stop+0x20>)
 800197c:	f004 fac2 	bl	8005f04 <HAL_GPIO_WritePin>
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40020400 	.word	0x40020400

08001988 <MotorFL_Input>:
//INPUT
void MotorFL_Input(int speed) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	if(speed > 0 ){
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	dd05      	ble.n	80019a2 <MotorFL_Input+0x1a>
		  MotorFL_Forward();
 8001996:	f7ff ff13 	bl	80017c0 <MotorFL_Forward>
		  TIM1->CCR1 = speed;
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <MotorFL_Input+0x40>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else{
		TIM1->CCR1 = 100;
		MotorFL_Stop();
	}
}
 80019a0:	e00e      	b.n	80019c0 <MotorFL_Input+0x38>
	else if(speed < 0){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	da06      	bge.n	80019b6 <MotorFL_Input+0x2e>
		  MotorFL_Reverse();
 80019a8:	f7ff ff1e 	bl	80017e8 <MotorFL_Reverse>
		  TIM1->CCR1 = -1 * speed;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	425a      	negs	r2, r3
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <MotorFL_Input+0x40>)
 80019b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80019b4:	e004      	b.n	80019c0 <MotorFL_Input+0x38>
		TIM1->CCR1 = 100;
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <MotorFL_Input+0x40>)
 80019b8:	2264      	movs	r2, #100	; 0x64
 80019ba:	635a      	str	r2, [r3, #52]	; 0x34
		MotorFL_Stop();
 80019bc:	f7ff ff28 	bl	8001810 <MotorFL_Stop>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40010000 	.word	0x40010000

080019cc <MotorFR_Input>:

void MotorFR_Input(int speed) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	if(speed > 0){
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	dd05      	ble.n	80019e6 <MotorFR_Input+0x1a>
		  MotorFR_Forward();
 80019da:	f7ff ff2d 	bl	8001838 <MotorFR_Forward>
		  TIM1->CCR2 = speed;
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <MotorFR_Input+0x40>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6393      	str	r3, [r2, #56]	; 0x38
	}
	else{
		TIM1->CCR2 = 100;
		MotorFR_Stop();
	}
}
 80019e4:	e00e      	b.n	8001a04 <MotorFR_Input+0x38>
	else if(speed < 0){
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da06      	bge.n	80019fa <MotorFR_Input+0x2e>
		  MotorFR_Reverse();
 80019ec:	f7ff ff36 	bl	800185c <MotorFR_Reverse>
		  TIM1->CCR2 = -1 * speed;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	425a      	negs	r2, r3
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <MotorFR_Input+0x40>)
 80019f6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80019f8:	e004      	b.n	8001a04 <MotorFR_Input+0x38>
		TIM1->CCR2 = 100;
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <MotorFR_Input+0x40>)
 80019fc:	2264      	movs	r2, #100	; 0x64
 80019fe:	639a      	str	r2, [r3, #56]	; 0x38
		MotorFR_Stop();
 8001a00:	f7ff ff3e 	bl	8001880 <MotorFR_Stop>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40010000 	.word	0x40010000

08001a10 <MotorBL_Input>:

void MotorBL_Input(int speed) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	if(speed > 0 ){
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	dd05      	ble.n	8001a2a <MotorBL_Input+0x1a>
		  MotorBL_Forward();
 8001a1e:	f7ff ff41 	bl	80018a4 <MotorBL_Forward>
		  TIM1->CCR3 = speed;
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <MotorBL_Input+0x40>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
	else{
		TIM1->CCR3 = 100;
		MotorBL_Stop();
	}
}
 8001a28:	e00e      	b.n	8001a48 <MotorBL_Input+0x38>
	else if(speed < 0){
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	da06      	bge.n	8001a3e <MotorBL_Input+0x2e>
		  MotorBL_Reverse();
 8001a30:	f7ff ff4c 	bl	80018cc <MotorBL_Reverse>
		  TIM1->CCR3 = -1 * speed;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	425a      	negs	r2, r3
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <MotorBL_Input+0x40>)
 8001a3a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a3c:	e004      	b.n	8001a48 <MotorBL_Input+0x38>
		TIM1->CCR3 = 100;
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <MotorBL_Input+0x40>)
 8001a40:	2264      	movs	r2, #100	; 0x64
 8001a42:	63da      	str	r2, [r3, #60]	; 0x3c
		MotorBL_Stop();
 8001a44:	f7ff ff56 	bl	80018f4 <MotorBL_Stop>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40010000 	.word	0x40010000

08001a54 <MotorBR_Input>:

void MotorBR_Input(int speed) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	if(speed > 0 ){
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	dd05      	ble.n	8001a6e <MotorBR_Input+0x1a>
		  MotorBR_Forward();
 8001a62:	f7ff ff5b 	bl	800191c <MotorBR_Forward>
		  TIM1->CCR4 = speed;
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <MotorBR_Input+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else{
		TIM1->CCR4 = 100;
		MotorBR_Stop();
	}
}
 8001a6c:	e00e      	b.n	8001a8c <MotorBR_Input+0x38>
	else if(speed < 0){
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da06      	bge.n	8001a82 <MotorBR_Input+0x2e>
		  MotorBR_Reverse();
 8001a74:	f7ff ff64 	bl	8001940 <MotorBR_Reverse>
		  TIM1->CCR4 = -1 * speed;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	425a      	negs	r2, r3
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <MotorBR_Input+0x40>)
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a80:	e004      	b.n	8001a8c <MotorBR_Input+0x38>
		TIM1->CCR4 = 100;
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <MotorBR_Input+0x40>)
 8001a84:	2264      	movs	r2, #100	; 0x64
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40
		MotorBR_Stop();
 8001a88:	f7ff ff6c 	bl	8001964 <MotorBR_Stop>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40010000 	.word	0x40010000

08001a98 <CS_Select>:
#define NRF24_CSN_PORT   GPIOC
#define NRF24_CSN_PIN    GPIO_PIN_5


void CS_Select (void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <CS_Select+0x14>)
 8001aa2:	f004 fa2f 	bl	8005f04 <HAL_GPIO_WritePin>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40020800 	.word	0x40020800

08001ab0 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2120      	movs	r1, #32
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <CS_UnSelect+0x14>)
 8001aba:	f004 fa23 	bl	8005f04 <HAL_GPIO_WritePin>
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40020800 	.word	0x40020800

08001ac8 <CE_Enable>:


void CE_Enable (void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	2110      	movs	r1, #16
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <CE_Enable+0x14>)
 8001ad2:	f004 fa17 	bl	8005f04 <HAL_GPIO_WritePin>
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40020800 	.word	0x40020800

08001ae0 <CE_Disable>:

void CE_Disable (void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <CE_Disable+0x14>)
 8001aea:	f004 fa0b 	bl	8005f04 <HAL_GPIO_WritePin>
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40020800 	.word	0x40020800

08001af8 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	460a      	mov	r2, r1
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	4613      	mov	r3, r2
 8001b06:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f043 0320 	orr.w	r3, r3, #32
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8001b12:	79bb      	ldrb	r3, [r7, #6]
 8001b14:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001b16:	f7ff ffbf 	bl	8001a98 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8001b1a:	f107 010c 	add.w	r1, r7, #12
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	2202      	movs	r2, #2
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <nrf24_WriteReg+0x40>)
 8001b26:	f008 f81c 	bl	8009b62 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001b2a:	f7ff ffc1 	bl	8001ab0 <CS_UnSelect>
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000d8c 	.word	0x20000d8c

08001b3c <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	f043 0320 	orr.w	r3, r3, #32
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001b54:	f7ff ffa0 	bl	8001a98 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8001b58:	f107 0114 	add.w	r1, r7, #20
 8001b5c:	2364      	movs	r3, #100	; 0x64
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4808      	ldr	r0, [pc, #32]	; (8001b84 <nrf24_WriteRegMulti+0x48>)
 8001b62:	f007 fffe 	bl	8009b62 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <nrf24_WriteRegMulti+0x48>)
 8001b72:	f007 fff6 	bl	8009b62 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001b76:	f7ff ff9b 	bl	8001ab0 <CS_UnSelect>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000d8c 	.word	0x20000d8c

08001b88 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001b96:	f7ff ff7f 	bl	8001a98 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001b9a:	1df9      	adds	r1, r7, #7
 8001b9c:	2364      	movs	r3, #100	; 0x64
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4808      	ldr	r0, [pc, #32]	; (8001bc4 <nrf24_ReadReg+0x3c>)
 8001ba2:	f007 ffde 	bl	8009b62 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8001ba6:	f107 010f 	add.w	r1, r7, #15
 8001baa:	2364      	movs	r3, #100	; 0x64
 8001bac:	2201      	movs	r2, #1
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <nrf24_ReadReg+0x3c>)
 8001bb0:	f008 f913 	bl	8009dda <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001bb4:	f7ff ff7c 	bl	8001ab0 <CS_UnSelect>

	return data;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000d8c 	.word	0x20000d8c

08001bc8 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001bd2:	f7ff ff61 	bl	8001a98 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8001bd6:	1df9      	adds	r1, r7, #7
 8001bd8:	2364      	movs	r3, #100	; 0x64
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <nrfsendCmd+0x28>)
 8001bde:	f007 ffc0 	bl	8009b62 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001be2:	f7ff ff65 	bl	8001ab0 <CS_UnSelect>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000d8c 	.word	0x20000d8c

08001bf4 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	2b07      	cmp	r3, #7
 8001c02:	d104      	bne.n	8001c0e <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8001c04:	2100      	movs	r1, #0
 8001c06:	2007      	movs	r0, #7
 8001c08:	f7ff ff76 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8001c0c:	e090      	b.n	8001d30 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b17      	cmp	r3, #23
 8001c12:	d104      	bne.n	8001c1e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001c14:	2111      	movs	r1, #17
 8001c16:	2017      	movs	r0, #23
 8001c18:	f7ff ff6e 	bl	8001af8 <nrf24_WriteReg>
}
 8001c1c:	e088      	b.n	8001d30 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8001c1e:	2108      	movs	r1, #8
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff ff69 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8001c26:	213f      	movs	r1, #63	; 0x3f
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f7ff ff65 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8001c2e:	2103      	movs	r1, #3
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7ff ff61 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8001c36:	2103      	movs	r1, #3
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f7ff ff5d 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8001c3e:	2103      	movs	r1, #3
 8001c40:	2004      	movs	r0, #4
 8001c42:	f7ff ff59 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8001c46:	2102      	movs	r1, #2
 8001c48:	2005      	movs	r0, #5
 8001c4a:	f7ff ff55 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8001c4e:	210e      	movs	r1, #14
 8001c50:	2006      	movs	r0, #6
 8001c52:	f7ff ff51 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8001c56:	2100      	movs	r1, #0
 8001c58:	2007      	movs	r0, #7
 8001c5a:	f7ff ff4d 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2008      	movs	r0, #8
 8001c62:	f7ff ff49 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8001c66:	2100      	movs	r1, #0
 8001c68:	2009      	movs	r0, #9
 8001c6a:	f7ff ff45 	bl	8001af8 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001c6e:	4a32      	ldr	r2, [pc, #200]	; (8001d38 <nrf24_reset+0x144>)
 8001c70:	f107 0318 	add.w	r3, r7, #24
 8001c74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c78:	6018      	str	r0, [r3, #0]
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8001c7e:	f107 0318 	add.w	r3, r7, #24
 8001c82:	2205      	movs	r2, #5
 8001c84:	4619      	mov	r1, r3
 8001c86:	200a      	movs	r0, #10
 8001c88:	f7ff ff58 	bl	8001b3c <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001c8c:	4a2b      	ldr	r2, [pc, #172]	; (8001d3c <nrf24_reset+0x148>)
 8001c8e:	f107 0310 	add.w	r3, r7, #16
 8001c92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c96:	6018      	str	r0, [r3, #0]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	2205      	movs	r2, #5
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	200b      	movs	r0, #11
 8001ca6:	f7ff ff49 	bl	8001b3c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8001caa:	21c3      	movs	r1, #195	; 0xc3
 8001cac:	200c      	movs	r0, #12
 8001cae:	f7ff ff23 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8001cb2:	21c4      	movs	r1, #196	; 0xc4
 8001cb4:	200d      	movs	r0, #13
 8001cb6:	f7ff ff1f 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8001cba:	21c5      	movs	r1, #197	; 0xc5
 8001cbc:	200e      	movs	r0, #14
 8001cbe:	f7ff ff1b 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8001cc2:	21c6      	movs	r1, #198	; 0xc6
 8001cc4:	200f      	movs	r0, #15
 8001cc6:	f7ff ff17 	bl	8001af8 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001cca:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <nrf24_reset+0x144>)
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cd4:	6018      	str	r0, [r3, #0]
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	2205      	movs	r2, #5
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	2010      	movs	r0, #16
 8001ce4:	f7ff ff2a 	bl	8001b3c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2011      	movs	r0, #17
 8001cec:	f7ff ff04 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2012      	movs	r0, #18
 8001cf4:	f7ff ff00 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2013      	movs	r0, #19
 8001cfc:	f7ff fefc 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8001d00:	2100      	movs	r1, #0
 8001d02:	2014      	movs	r0, #20
 8001d04:	f7ff fef8 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2015      	movs	r0, #21
 8001d0c:	f7ff fef4 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001d10:	2100      	movs	r1, #0
 8001d12:	2016      	movs	r0, #22
 8001d14:	f7ff fef0 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001d18:	2111      	movs	r1, #17
 8001d1a:	2017      	movs	r0, #23
 8001d1c:	f7ff feec 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001d20:	2100      	movs	r1, #0
 8001d22:	201c      	movs	r0, #28
 8001d24:	f7ff fee8 	bl	8001af8 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8001d28:	2100      	movs	r1, #0
 8001d2a:	201d      	movs	r0, #29
 8001d2c:	f7ff fee4 	bl	8001af8 <nrf24_WriteReg>
}
 8001d30:	bf00      	nop
 8001d32:	3720      	adds	r7, #32
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	0800e938 	.word	0x0800e938
 8001d3c:	0800e940 	.word	0x0800e940

08001d40 <NRF24_Init>:




void NRF24_Init (void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001d44:	f7ff fecc 	bl	8001ae0 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff ff53 	bl	8001bf4 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fed1 	bl	8001af8 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8001d56:	2100      	movs	r1, #0
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff fecd 	bl	8001af8 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2002      	movs	r0, #2
 8001d62:	f7ff fec9 	bl	8001af8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8001d66:	2103      	movs	r1, #3
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f7ff fec5 	bl	8001af8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2004      	movs	r0, #4
 8001d72:	f7ff fec1 	bl	8001af8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8001d76:	2100      	movs	r1, #0
 8001d78:	2005      	movs	r0, #5
 8001d7a:	f7ff febd 	bl	8001af8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8001d7e:	210e      	movs	r1, #14
 8001d80:	2006      	movs	r0, #6
 8001d82:	f7ff feb9 	bl	8001af8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001d86:	f7ff fe9f 	bl	8001ac8 <CE_Enable>

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8001d9a:	f7ff fea1 	bl	8001ae0 <CE_Disable>

	nrf24_reset (STATUS);
 8001d9e:	2007      	movs	r0, #7
 8001da0:	f7ff ff28 	bl	8001bf4 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	4619      	mov	r1, r3
 8001da8:	2005      	movs	r0, #5
 8001daa:	f7ff fea5 	bl	8001af8 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8001dae:	2002      	movs	r0, #2
 8001db0:	f7ff feea 	bl	8001b88 <nrf24_ReadReg>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	2002      	movs	r0, #2
 8001dc6:	f7ff fe97 	bl	8001af8 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8001dca:	2205      	movs	r2, #5
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	200b      	movs	r0, #11
 8001dd0:	f7ff feb4 	bl	8001b3c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0x11);  // Write the Pipe2 LSB address
 8001dd4:	2111      	movs	r1, #17
 8001dd6:	200c      	movs	r0, #12
 8001dd8:	f7ff fe8e 	bl	8001af8 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8001ddc:	2120      	movs	r1, #32
 8001dde:	2013      	movs	r0, #19
 8001de0:	f7ff fe8a 	bl	8001af8 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff fecf 	bl	8001b88 <nrf24_ReadReg>
 8001dea:	4603      	mov	r3, r0
 8001dec:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8001dee:	7bbb      	ldrb	r3, [r7, #14]
 8001df0:	f043 0303 	orr.w	r3, r3, #3
 8001df4:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8001df6:	7bbb      	ldrb	r3, [r7, #14]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff fe7c 	bl	8001af8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001e00:	f7ff fe62 	bl	8001ac8 <CE_Enable>
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8001e14:	2007      	movs	r0, #7
 8001e16:	f7ff feb7 	bl	8001b88 <nrf24_ReadReg>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00b      	beq.n	8001e40 <isDataAvailable+0x34>
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8001e34:	2140      	movs	r1, #64	; 0x40
 8001e36:	2007      	movs	r0, #7
 8001e38:	f7ff fe5e 	bl	8001af8 <nrf24_WriteReg>

		return 1;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <isDataAvailable+0x36>
	}

	return 0;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <NRF24_Receive>:


void NRF24_Receive (Package *data)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8001e58:	f7ff fe1e 	bl	8001a98 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8001e5c:	2361      	movs	r3, #97	; 0x61
 8001e5e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001e60:	f107 010f 	add.w	r1, r7, #15
 8001e64:	2364      	movs	r3, #100	; 0x64
 8001e66:	2201      	movs	r2, #1
 8001e68:	4821      	ldr	r0, [pc, #132]	; (8001ef0 <NRF24_Receive+0xa4>)
 8001e6a:	f007 fe7a 	bl	8009b62 <HAL_SPI_Transmit>

	// Receive the payload

	HAL_SPI_Receive(NRF24_SPI, &(data->x1), 2, 1000);
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e74:	2202      	movs	r2, #2
 8001e76:	481e      	ldr	r0, [pc, #120]	; (8001ef0 <NRF24_Receive+0xa4>)
 8001e78:	f007 ffaf 	bl	8009dda <HAL_SPI_Receive>
	HAL_SPI_Receive(NRF24_SPI, &(data->y1), 2, 1000);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	1c99      	adds	r1, r3, #2
 8001e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e84:	2202      	movs	r2, #2
 8001e86:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <NRF24_Receive+0xa4>)
 8001e88:	f007 ffa7 	bl	8009dda <HAL_SPI_Receive>
	HAL_SPI_Receive(NRF24_SPI, &(data->x2), 2, 1000);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	1d19      	adds	r1, r3, #4
 8001e90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e94:	2202      	movs	r2, #2
 8001e96:	4816      	ldr	r0, [pc, #88]	; (8001ef0 <NRF24_Receive+0xa4>)
 8001e98:	f007 ff9f 	bl	8009dda <HAL_SPI_Receive>
	HAL_SPI_Receive(NRF24_SPI, &(data->y2), 2, 1000);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	1d99      	adds	r1, r3, #6
 8001ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4812      	ldr	r0, [pc, #72]	; (8001ef0 <NRF24_Receive+0xa4>)
 8001ea8:	f007 ff97 	bl	8009dda <HAL_SPI_Receive>
	HAL_SPI_Receive(NRF24_SPI, &(data->state1), 1, 1000);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f103 0108 	add.w	r1, r3, #8
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <NRF24_Receive+0xa4>)
 8001eba:	f007 ff8e 	bl	8009dda <HAL_SPI_Receive>
	HAL_SPI_Receive(NRF24_SPI, &(data->state2), 1, 1000);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f103 0109 	add.w	r1, r3, #9
 8001ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <NRF24_Receive+0xa4>)
 8001ecc:	f007 ff85 	bl	8009dda <HAL_SPI_Receive>
//	data -> x1 &= 4095;
//	data -> y1 &= 4095;


	// Unselect the device
	CS_UnSelect();
 8001ed0:	f7ff fdee 	bl	8001ab0 <CS_UnSelect>

	HAL_Delay(10);
 8001ed4:	200a      	movs	r0, #10
 8001ed6:	f003 f97d 	bl	80051d4 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8001eda:	23e2      	movs	r3, #226	; 0xe2
 8001edc:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fe71 	bl	8001bc8 <nrfsendCmd>
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000d8c 	.word	0x20000d8c

08001ef4 <HAL_SYSTICK_Callback>:
extern __IO uint16_t Loop_60msTime;
extern __IO uint16_t Loop_10msTime;
extern __IO uint16_t Loop_5msTime;

void HAL_SYSTICK_Callback()
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
	//if(Loop_1000msTime) Loop_1000msTime--;
	if(Loop_500msTime) Loop_500msTime--;
 8001ef8:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_SYSTICK_Callback+0x88>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d006      	beq.n	8001f10 <HAL_SYSTICK_Callback+0x1c>
 8001f02:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_SYSTICK_Callback+0x88>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_SYSTICK_Callback+0x88>)
 8001f0e:	801a      	strh	r2, [r3, #0]
	if(Loop_10msTime) Loop_10msTime--;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_SYSTICK_Callback+0x8c>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_SYSTICK_Callback+0x34>
 8001f1a:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_SYSTICK_Callback+0x8c>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	3b01      	subs	r3, #1
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_SYSTICK_Callback+0x8c>)
 8001f26:	801a      	strh	r2, [r3, #0]
	if(Loop_100msTime) Loop_100msTime--;
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_SYSTICK_Callback+0x90>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <HAL_SYSTICK_Callback+0x4c>
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_SYSTICK_Callback+0x90>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_SYSTICK_Callback+0x90>)
 8001f3e:	801a      	strh	r2, [r3, #0]
	if(Loop_60msTime) Loop_60msTime--;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_SYSTICK_Callback+0x94>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_SYSTICK_Callback+0x64>
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_SYSTICK_Callback+0x94>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_SYSTICK_Callback+0x94>)
 8001f56:	801a      	strh	r2, [r3, #0]
	if(Loop_5msTime) Loop_5msTime--;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <HAL_SYSTICK_Callback+0x98>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d006      	beq.n	8001f70 <HAL_SYSTICK_Callback+0x7c>
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_SYSTICK_Callback+0x98>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_SYSTICK_Callback+0x98>)
 8001f6e:	801a      	strh	r2, [r3, #0]

}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	2000029c 	.word	0x2000029c
 8001f80:	200002a2 	.word	0x200002a2
 8001f84:	2000029e 	.word	0x2000029e
 8001f88:	200002a0 	.word	0x200002a0
 8001f8c:	200002a4 	.word	0x200002a4

08001f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f90:	b5b0      	push	{r4, r5, r7, lr}
 8001f92:	b098      	sub	sp, #96	; 0x60
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f96:	f003 f8ab 	bl	80050f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f9a:	f000 fb3f 	bl	800261c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8001f9e:	f007 f8e7 	bl	8009170 <HAL_RCC_GetHCLKFreq>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4abe      	ldr	r2, [pc, #760]	; (80022a0 <main+0x310>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	099b      	lsrs	r3, r3, #6
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 fa3a 	bl	8005426 <HAL_SYSTICK_Config>

    /**Configure the Systick
     */
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001fb2:	2004      	movs	r0, #4
 8001fb4:	f003 fa44 	bl	8005440 <HAL_SYSTICK_CLKSourceConfig>

    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f003 fa07 	bl	80053d2 <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fc4:	f000 ff54 	bl	8002e70 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001fc8:	f000 fbf2 	bl	80027b0 <MX_SPI1_Init>
  MX_DMA_Init();
 8001fcc:	f000 fee2 	bl	8002d94 <MX_DMA_Init>
  MX_TIM1_Init();
 8001fd0:	f000 fc24 	bl	800281c <MX_TIM1_Init>
  MX_I2C1_Init();
 8001fd4:	f000 fb90 	bl	80026f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001fd8:	f000 fbbc 	bl	8002754 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001fdc:	f000 fcc4 	bl	8002968 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fe0:	f000 fd22 	bl	8002a28 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001fe4:	f000 fd82 	bl	8002aec <MX_TIM4_Init>
  MX_TIM5_Init();
 8001fe8:	f000 fde2 	bl	8002bb0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001fec:	f000 fe42 	bl	8002c74 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
    NRF24_Init();
 8001ff0:	f7ff fea6 	bl	8001d40 <NRF24_Init>
    NRF24_RxMode(RxAddress, 10);
 8001ff4:	210a      	movs	r1, #10
 8001ff6:	48ab      	ldr	r0, [pc, #684]	; (80022a4 <main+0x314>)
 8001ff8:	f7ff fec9 	bl	8001d8e <NRF24_RxMode>
    HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001ffc:	213c      	movs	r1, #60	; 0x3c
 8001ffe:	48aa      	ldr	r0, [pc, #680]	; (80022a8 <main+0x318>)
 8002000:	f008 fc8c 	bl	800a91c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002004:	213c      	movs	r1, #60	; 0x3c
 8002006:	48a9      	ldr	r0, [pc, #676]	; (80022ac <main+0x31c>)
 8002008:	f008 fc88 	bl	800a91c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800200c:	213c      	movs	r1, #60	; 0x3c
 800200e:	48a8      	ldr	r0, [pc, #672]	; (80022b0 <main+0x320>)
 8002010:	f008 fc84 	bl	800a91c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002014:	213c      	movs	r1, #60	; 0x3c
 8002016:	48a7      	ldr	r0, [pc, #668]	; (80022b4 <main+0x324>)
 8002018:	f008 fc80 	bl	800a91c <HAL_TIM_Encoder_Start>
    Encoder_Struct_Init(&motor1, 2); // FL
 800201c:	2102      	movs	r1, #2
 800201e:	48a6      	ldr	r0, [pc, #664]	; (80022b8 <main+0x328>)
 8002020:	f7fe ffce 	bl	8000fc0 <Encoder_Struct_Init>
    Encoder_Struct_Init(&motor2, 3); // FR
 8002024:	2103      	movs	r1, #3
 8002026:	48a5      	ldr	r0, [pc, #660]	; (80022bc <main+0x32c>)
 8002028:	f7fe ffca 	bl	8000fc0 <Encoder_Struct_Init>
    Encoder_Struct_Init(&motor3, 5); // BL
 800202c:	2105      	movs	r1, #5
 800202e:	48a4      	ldr	r0, [pc, #656]	; (80022c0 <main+0x330>)
 8002030:	f7fe ffc6 	bl	8000fc0 <Encoder_Struct_Init>
    Encoder_Struct_Init(&motor4, 4); // BR
 8002034:	2104      	movs	r1, #4
 8002036:	48a3      	ldr	r0, [pc, #652]	; (80022c4 <main+0x334>)
 8002038:	f7fe ffc2 	bl	8000fc0 <Encoder_Struct_Init>
    //while (MPU6050_Init(&hi2c1) == 1);
    MPU6050_Init(&hi2c1);
 800203c:	48a2      	ldr	r0, [pc, #648]	; (80022c8 <main+0x338>)
 800203e:	f000 ff9c 	bl	8002f7a <MPU6050_Init>
    HAL_Delay(500);
 8002042:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002046:	f003 f8c5 	bl	80051d4 <HAL_Delay>
    get_Zero_Offset(&hi2c1, &MPU_data);
 800204a:	49a0      	ldr	r1, [pc, #640]	; (80022cc <main+0x33c>)
 800204c:	489e      	ldr	r0, [pc, #632]	; (80022c8 <main+0x338>)
 800204e:	f001 f853 	bl	80030f8 <get_Zero_Offset>

    // Initializes OLED
    ssd1306_Init();
 8002052:	f001 fef1 	bl	8003e38 <ssd1306_Init>
    ssd1306_Clear();
 8002056:	f002 f8cf 	bl	80041f8 <ssd1306_Clear>
    ssd1306_SetColor(White);
 800205a:	2001      	movs	r0, #1
 800205c:	f001 fedc 	bl	8003e18 <ssd1306_SetColor>
      {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
		  char bl[15];
		  sprintf(bl, "BL:%.2f", back_left_real_rpm);
 8002060:	4b9b      	ldr	r3, [pc, #620]	; (80022d0 <main+0x340>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa8f 	bl	8000588 <__aeabi_f2d>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002072:	4998      	ldr	r1, [pc, #608]	; (80022d4 <main+0x344>)
 8002074:	f009 fec6 	bl	800be04 <siprintf>
		  char br[15];
		  sprintf(br, "BR:%.2f", back_right_real_rpm);
 8002078:	4b97      	ldr	r3, [pc, #604]	; (80022d8 <main+0x348>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa83 	bl	8000588 <__aeabi_f2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800208a:	4994      	ldr	r1, [pc, #592]	; (80022dc <main+0x34c>)
 800208c:	f009 feba 	bl	800be04 <siprintf>
		  char fl[15];
		  sprintf(fl, "FL:%.2f", front_left_real_rpm);
 8002090:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <main+0x350>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa77 	bl	8000588 <__aeabi_f2d>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80020a2:	4990      	ldr	r1, [pc, #576]	; (80022e4 <main+0x354>)
 80020a4:	f009 feae 	bl	800be04 <siprintf>
		  char fr[15];
		  sprintf(fr, "FR:%.2f", front_right_real_rpm);
 80020a8:	4b8f      	ldr	r3, [pc, #572]	; (80022e8 <main+0x358>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fa6b 	bl	8000588 <__aeabi_f2d>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	f107 0020 	add.w	r0, r7, #32
 80020ba:	498c      	ldr	r1, [pc, #560]	; (80022ec <main+0x35c>)
 80020bc:	f009 fea2 	bl	800be04 <siprintf>
          ssd1306_SetCursor(3, 5);
 80020c0:	2105      	movs	r1, #5
 80020c2:	2003      	movs	r0, #3
 80020c4:	f002 f880 	bl	80041c8 <ssd1306_SetCursor>
          ssd1306_WriteString(bl, Font_7x10);
 80020c8:	4a89      	ldr	r2, [pc, #548]	; (80022f0 <main+0x360>)
 80020ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020ce:	ca06      	ldmia	r2, {r1, r2}
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 f853 	bl	800417c <ssd1306_WriteString>
          ssd1306_SetCursor(3, 20);
 80020d6:	2114      	movs	r1, #20
 80020d8:	2003      	movs	r0, #3
 80020da:	f002 f875 	bl	80041c8 <ssd1306_SetCursor>
          ssd1306_WriteString(br, Font_7x10);
 80020de:	4a84      	ldr	r2, [pc, #528]	; (80022f0 <main+0x360>)
 80020e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020e4:	ca06      	ldmia	r2, {r1, r2}
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 f848 	bl	800417c <ssd1306_WriteString>
          ssd1306_SetCursor(3, 35);
 80020ec:	2123      	movs	r1, #35	; 0x23
 80020ee:	2003      	movs	r0, #3
 80020f0:	f002 f86a 	bl	80041c8 <ssd1306_SetCursor>
          ssd1306_WriteString(fl, Font_7x10);
 80020f4:	4a7e      	ldr	r2, [pc, #504]	; (80022f0 <main+0x360>)
 80020f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020fa:	ca06      	ldmia	r2, {r1, r2}
 80020fc:	4618      	mov	r0, r3
 80020fe:	f002 f83d 	bl	800417c <ssd1306_WriteString>
          ssd1306_SetCursor(3, 50);
 8002102:	2132      	movs	r1, #50	; 0x32
 8002104:	2003      	movs	r0, #3
 8002106:	f002 f85f 	bl	80041c8 <ssd1306_SetCursor>
          ssd1306_WriteString(fr, Font_7x10);
 800210a:	4a79      	ldr	r2, [pc, #484]	; (80022f0 <main+0x360>)
 800210c:	f107 0320 	add.w	r3, r7, #32
 8002110:	ca06      	ldmia	r2, {r1, r2}
 8002112:	4618      	mov	r0, r3
 8002114:	f002 f832 	bl	800417c <ssd1306_WriteString>
          ssd1306_UpdateScreen();

          if (isDataAvailable(2) == 1)
 8002118:	2002      	movs	r0, #2
 800211a:	f7ff fe77 	bl	8001e0c <isDataAvailable>
 800211e:	4603      	mov	r3, r0
 8002120:	2b01      	cmp	r3, #1
 8002122:	d126      	bne.n	8002172 <main+0x1e2>
          {
              NRF24_Receive(&RxData);
 8002124:	4873      	ldr	r0, [pc, #460]	; (80022f4 <main+0x364>)
 8002126:	f7ff fe91 	bl	8001e4c <NRF24_Receive>
              x1 = RxData.x1 & 4095;
 800212a:	4b72      	ldr	r3, [pc, #456]	; (80022f4 <main+0x364>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002132:	b29a      	uxth	r2, r3
 8002134:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <main+0x368>)
 8002136:	801a      	strh	r2, [r3, #0]
              y1 = RxData.y1 & 4095;
 8002138:	4b6e      	ldr	r3, [pc, #440]	; (80022f4 <main+0x364>)
 800213a:	885b      	ldrh	r3, [r3, #2]
 800213c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b6e      	ldr	r3, [pc, #440]	; (80022fc <main+0x36c>)
 8002144:	801a      	strh	r2, [r3, #0]
              x2 = RxData.y2 & 4095;
 8002146:	4b6b      	ldr	r3, [pc, #428]	; (80022f4 <main+0x364>)
 8002148:	88db      	ldrh	r3, [r3, #6]
 800214a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214e:	b29a      	uxth	r2, r3
 8002150:	4b6b      	ldr	r3, [pc, #428]	; (8002300 <main+0x370>)
 8002152:	801a      	strh	r2, [r3, #0]
              y2 = RxData.x2 & 4095;
 8002154:	4b67      	ldr	r3, [pc, #412]	; (80022f4 <main+0x364>)
 8002156:	889b      	ldrh	r3, [r3, #4]
 8002158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215c:	b29a      	uxth	r2, r3
 800215e:	4b69      	ldr	r3, [pc, #420]	; (8002304 <main+0x374>)
 8002160:	801a      	strh	r2, [r3, #0]
              state1 = RxData.state1;
 8002162:	4b64      	ldr	r3, [pc, #400]	; (80022f4 <main+0x364>)
 8002164:	7a1a      	ldrb	r2, [r3, #8]
 8002166:	4b68      	ldr	r3, [pc, #416]	; (8002308 <main+0x378>)
 8002168:	701a      	strb	r2, [r3, #0]
              state2 = RxData.state2;
 800216a:	4b62      	ldr	r3, [pc, #392]	; (80022f4 <main+0x364>)
 800216c:	7a5a      	ldrb	r2, [r3, #9]
 800216e:	4b67      	ldr	r3, [pc, #412]	; (800230c <main+0x37c>)
 8002170:	701a      	strb	r2, [r3, #0]
          }

          MPU6050_Read_All(&hi2c1, &MPU_data);
 8002172:	4956      	ldr	r1, [pc, #344]	; (80022cc <main+0x33c>)
 8002174:	4854      	ldr	r0, [pc, #336]	; (80022c8 <main+0x338>)
 8002176:	f001 f8e3 	bl	8003340 <MPU6050_Read_All>
          get_Yaw(&hi2c1, &MPU_data);
 800217a:	4954      	ldr	r1, [pc, #336]	; (80022cc <main+0x33c>)
 800217c:	4852      	ldr	r0, [pc, #328]	; (80022c8 <main+0x338>)
 800217e:	f001 f85d 	bl	800323c <get_Yaw>
          mpu_x = MPU_data.KalmanAngleX;
 8002182:	4b52      	ldr	r3, [pc, #328]	; (80022cc <main+0x33c>)
 8002184:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002188:	4961      	ldr	r1, [pc, #388]	; (8002310 <main+0x380>)
 800218a:	e9c1 2300 	strd	r2, r3, [r1]
          mpu_y = MPU_data.KalmanAngleY;
 800218e:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <main+0x33c>)
 8002190:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002194:	495f      	ldr	r1, [pc, #380]	; (8002314 <main+0x384>)
 8002196:	e9c1 2300 	strd	r2, r3, [r1]
          mpu_z = MPU_data.KalmanAngleZ;
 800219a:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <main+0x33c>)
 800219c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80021a0:	495d      	ldr	r1, [pc, #372]	; (8002318 <main+0x388>)
 80021a2:	e9c1 2300 	strd	r2, r3, [r1]
          HAL_Delay(50);
 80021a6:	2032      	movs	r0, #50	; 0x32
 80021a8:	f003 f814 	bl	80051d4 <HAL_Delay>

          if (state1 == 1 && state2 == 1)
 80021ac:	4b56      	ldr	r3, [pc, #344]	; (8002308 <main+0x378>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	f040 80cd 	bne.w	8002350 <main+0x3c0>
 80021b6:	4b55      	ldr	r3, [pc, #340]	; (800230c <main+0x37c>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	f040 80c8 	bne.w	8002350 <main+0x3c0>
          {
              if (!Loop_100msTime)
 80021c0:	4b56      	ldr	r3, [pc, #344]	; (800231c <main+0x38c>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 81fb 	bne.w	80025c2 <main+0x632>
              {
                  wheels_rpm = kenematics_mecanum_inverse(x1, y1, x2);
 80021cc:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <main+0x368>)
 80021ce:	8819      	ldrh	r1, [r3, #0]
 80021d0:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <main+0x36c>)
 80021d2:	881a      	ldrh	r2, [r3, #0]
 80021d4:	4b4a      	ldr	r3, [pc, #296]	; (8002300 <main+0x370>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	4c51      	ldr	r4, [pc, #324]	; (8002320 <main+0x390>)
 80021da:	4638      	mov	r0, r7
 80021dc:	f7ff f864 	bl	80012a8 <kenematics_mecanum_inverse>
 80021e0:	4625      	mov	r5, r4
 80021e2:	463c      	mov	r4, r7
 80021e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80021f0:	2104      	movs	r1, #4
 80021f2:	484c      	ldr	r0, [pc, #304]	; (8002324 <main+0x394>)
 80021f4:	f008 fa24 	bl	800a640 <HAL_TIM_PWM_Start>
                  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80021f8:	210c      	movs	r1, #12
 80021fa:	484a      	ldr	r0, [pc, #296]	; (8002324 <main+0x394>)
 80021fc:	f008 fa20 	bl	800a640 <HAL_TIM_PWM_Start>
                  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002200:	2100      	movs	r1, #0
 8002202:	4848      	ldr	r0, [pc, #288]	; (8002324 <main+0x394>)
 8002204:	f008 fa1c 	bl	800a640 <HAL_TIM_PWM_Start>
                  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002208:	2108      	movs	r1, #8
 800220a:	4846      	ldr	r0, [pc, #280]	; (8002324 <main+0x394>)
 800220c:	f008 fa18 	bl	800a640 <HAL_TIM_PWM_Start>

                  Encoder_UpdataValue(&motor3, 1);
 8002210:	2101      	movs	r1, #1
 8002212:	482b      	ldr	r0, [pc, #172]	; (80022c0 <main+0x330>)
 8002214:	f7fe ff18 	bl	8001048 <Encoder_UpdataValue>
                  Encoder_UpdataValue(&motor1, 1);
 8002218:	2101      	movs	r1, #1
 800221a:	4827      	ldr	r0, [pc, #156]	; (80022b8 <main+0x328>)
 800221c:	f7fe ff14 	bl	8001048 <Encoder_UpdataValue>
                  Encoder_UpdataValue(&motor2, 1);
 8002220:	2101      	movs	r1, #1
 8002222:	4826      	ldr	r0, [pc, #152]	; (80022bc <main+0x32c>)
 8002224:	f7fe ff10 	bl	8001048 <Encoder_UpdataValue>
                  Encoder_UpdataValue(&motor4, -1);
 8002228:	f04f 31ff 	mov.w	r1, #4294967295
 800222c:	4825      	ldr	r0, [pc, #148]	; (80022c4 <main+0x334>)
 800222e:	f7fe ff0b 	bl	8001048 <Encoder_UpdataValue>
                  back_left_real_rpm = (float)motor3.Capture_D_Value * (600.0f / 1320.0f);
 8002232:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <main+0x330>)
 8002234:	88db      	ldrh	r3, [r3, #6]
 8002236:	b21b      	sxth	r3, r3
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002240:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002328 <main+0x398>
 8002244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <main+0x340>)
 800224a:	edc3 7a00 	vstr	s15, [r3]
                  front_left_real_rpm = (float)motor1.Capture_D_Value * (600.0f / 1320.0f);
 800224e:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <main+0x328>)
 8002250:	88db      	ldrh	r3, [r3, #6]
 8002252:	b21b      	sxth	r3, r3
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002328 <main+0x398>
 8002260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002264:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <main+0x350>)
 8002266:	edc3 7a00 	vstr	s15, [r3]
                  back_right_real_rpm = (float)motor4.Capture_D_Value * (600.0f / 1320.0f);
 800226a:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <main+0x334>)
 800226c:	88db      	ldrh	r3, [r3, #6]
 800226e:	b21b      	sxth	r3, r3
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002278:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002328 <main+0x398>
 800227c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <main+0x348>)
 8002282:	edc3 7a00 	vstr	s15, [r3]
                  front_right_real_rpm = (float)motor2.Capture_D_Value * (600.0f / 1320.0f);
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <main+0x32c>)
 8002288:	88db      	ldrh	r3, [r3, #6]
 800228a:	b21b      	sxth	r3, r3
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002294:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002328 <main+0x398>
 8002298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800229c:	e046      	b.n	800232c <main+0x39c>
 800229e:	bf00      	nop
 80022a0:	10624dd3 	.word	0x10624dd3
 80022a4:	20000008 	.word	0x20000008
 80022a8:	2000072c 	.word	0x2000072c
 80022ac:	20000850 	.word	0x20000850
 80022b0:	20000774 	.word	0x20000774
 80022b4:	200006e4 	.word	0x200006e4
 80022b8:	20000cf4 	.word	0x20000cf4
 80022bc:	200008a0 	.word	0x200008a0
 80022c0:	20000e50 	.word	0x20000e50
 80022c4:	20000ca8 	.word	0x20000ca8
 80022c8:	20000ad4 	.word	0x20000ad4
 80022cc:	20000d18 	.word	0x20000d18
 80022d0:	200002a8 	.word	0x200002a8
 80022d4:	0800e948 	.word	0x0800e948
 80022d8:	200002b0 	.word	0x200002b0
 80022dc:	0800e950 	.word	0x0800e950
 80022e0:	200002ac 	.word	0x200002ac
 80022e4:	0800e958 	.word	0x0800e958
 80022e8:	200002b4 	.word	0x200002b4
 80022ec:	0800e960 	.word	0x0800e960
 80022f0:	20000000 	.word	0x20000000
 80022f4:	20000de4 	.word	0x20000de4
 80022f8:	20000d88 	.word	0x20000d88
 80022fc:	20000ed0 	.word	0x20000ed0
 8002300:	20000c40 	.word	0x20000c40
 8002304:	20000c18 	.word	0x20000c18
 8002308:	20000ca4 	.word	0x20000ca4
 800230c:	20000e5c 	.word	0x20000e5c
 8002310:	20000cb8 	.word	0x20000cb8
 8002314:	20000d80 	.word	0x20000d80
 8002318:	20000c38 	.word	0x20000c38
 800231c:	2000029e 	.word	0x2000029e
 8002320:	20000bdc 	.word	0x20000bdc
 8002324:	200007c0 	.word	0x200007c0
 8002328:	3ee8ba2f 	.word	0x3ee8ba2f
 800232c:	4ba5      	ldr	r3, [pc, #660]	; (80025c4 <main+0x634>)
 800232e:	edc3 7a00 	vstr	s15, [r3]
                  front_right_real_rpm *= -1;// wrong wiring
 8002332:	4ba4      	ldr	r3, [pc, #656]	; (80025c4 <main+0x634>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	eef1 7a67 	vneg.f32	s15, s15
 800233c:	4ba1      	ldr	r3, [pc, #644]	; (80025c4 <main+0x634>)
 800233e:	edc3 7a00 	vstr	s15, [r3]

                  Loop_100msTime = 100;
 8002342:	4ba1      	ldr	r3, [pc, #644]	; (80025c8 <main+0x638>)
 8002344:	2264      	movs	r2, #100	; 0x64
 8002346:	801a      	strh	r2, [r3, #0]
                  auto_servo_reset = 0;
 8002348:	4ba0      	ldr	r3, [pc, #640]	; (80025cc <main+0x63c>)
 800234a:	2200      	movs	r2, #0
 800234c:	801a      	strh	r2, [r3, #0]
              if (!Loop_100msTime)
 800234e:	e138      	b.n	80025c2 <main+0x632>
              }
          }
          else if(state1 == 1 && state2 == 0)
 8002350:	4b9f      	ldr	r3, [pc, #636]	; (80025d0 <main+0x640>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	f040 8090 	bne.w	800247a <main+0x4ea>
 800235a:	4b9e      	ldr	r3, [pc, #632]	; (80025d4 <main+0x644>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 808b 	bne.w	800247a <main+0x4ea>
          {

              manual_adjust_servo_position_x(&htim8, x2);
 8002364:	4b9c      	ldr	r3, [pc, #624]	; (80025d8 <main+0x648>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	4619      	mov	r1, r3
 800236a:	489c      	ldr	r0, [pc, #624]	; (80025dc <main+0x64c>)
 800236c:	f001 fc8c 	bl	8003c88 <manual_adjust_servo_position_x>
              manual_adjust_servo_position_z(&htim8, y2);
 8002370:	4b9b      	ldr	r3, [pc, #620]	; (80025e0 <main+0x650>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	4619      	mov	r1, r3
 8002376:	4899      	ldr	r0, [pc, #612]	; (80025dc <main+0x64c>)
 8002378:	f001 fcda 	bl	8003d30 <manual_adjust_servo_position_z>
              HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800237c:	2104      	movs	r1, #4
 800237e:	4897      	ldr	r0, [pc, #604]	; (80025dc <main+0x64c>)
 8002380:	f008 f95e 	bl	800a640 <HAL_TIM_PWM_Start>
              HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002384:	2100      	movs	r1, #0
 8002386:	4895      	ldr	r0, [pc, #596]	; (80025dc <main+0x64c>)
 8002388:	f008 f95a 	bl	800a640 <HAL_TIM_PWM_Start>
              if(!Loop_100msTime){
 800238c:	4b8e      	ldr	r3, [pc, #568]	; (80025c8 <main+0x638>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b29b      	uxth	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 8115 	bne.w	80025c2 <main+0x632>
					wheels_rpm = kenematics_mecanum_inverse(x1, y1, 2000);
 8002398:	4b92      	ldr	r3, [pc, #584]	; (80025e4 <main+0x654>)
 800239a:	8819      	ldrh	r1, [r3, #0]
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <main+0x658>)
 800239e:	881a      	ldrh	r2, [r3, #0]
 80023a0:	4c92      	ldr	r4, [pc, #584]	; (80025ec <main+0x65c>)
 80023a2:	4638      	mov	r0, r7
 80023a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80023a8:	f7fe ff7e 	bl	80012a8 <kenematics_mecanum_inverse>
 80023ac:	4625      	mov	r5, r4
 80023ae:	463c      	mov	r4, r7
 80023b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
					HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80023bc:	2104      	movs	r1, #4
 80023be:	488c      	ldr	r0, [pc, #560]	; (80025f0 <main+0x660>)
 80023c0:	f008 f93e 	bl	800a640 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80023c4:	210c      	movs	r1, #12
 80023c6:	488a      	ldr	r0, [pc, #552]	; (80025f0 <main+0x660>)
 80023c8:	f008 f93a 	bl	800a640 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80023cc:	2100      	movs	r1, #0
 80023ce:	4888      	ldr	r0, [pc, #544]	; (80025f0 <main+0x660>)
 80023d0:	f008 f936 	bl	800a640 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80023d4:	2108      	movs	r1, #8
 80023d6:	4886      	ldr	r0, [pc, #536]	; (80025f0 <main+0x660>)
 80023d8:	f008 f932 	bl	800a640 <HAL_TIM_PWM_Start>

					Encoder_UpdataValue(&motor3, 1);
 80023dc:	2101      	movs	r1, #1
 80023de:	4885      	ldr	r0, [pc, #532]	; (80025f4 <main+0x664>)
 80023e0:	f7fe fe32 	bl	8001048 <Encoder_UpdataValue>
					Encoder_UpdataValue(&motor1, 1);
 80023e4:	2101      	movs	r1, #1
 80023e6:	4884      	ldr	r0, [pc, #528]	; (80025f8 <main+0x668>)
 80023e8:	f7fe fe2e 	bl	8001048 <Encoder_UpdataValue>
					Encoder_UpdataValue(&motor2, 1);
 80023ec:	2101      	movs	r1, #1
 80023ee:	4883      	ldr	r0, [pc, #524]	; (80025fc <main+0x66c>)
 80023f0:	f7fe fe2a 	bl	8001048 <Encoder_UpdataValue>
					Encoder_UpdataValue(&motor4, 1);
 80023f4:	2101      	movs	r1, #1
 80023f6:	4882      	ldr	r0, [pc, #520]	; (8002600 <main+0x670>)
 80023f8:	f7fe fe26 	bl	8001048 <Encoder_UpdataValue>
					back_left_real_rpm = (float)motor3.Capture_D_Value * (6000.0f / 1320.0f);
 80023fc:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <main+0x664>)
 80023fe:	88db      	ldrh	r3, [r3, #6]
 8002400:	b21b      	sxth	r3, r3
 8002402:	ee07 3a90 	vmov	s15, r3
 8002406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800240a:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002604 <main+0x674>
 800240e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002412:	4b7d      	ldr	r3, [pc, #500]	; (8002608 <main+0x678>)
 8002414:	edc3 7a00 	vstr	s15, [r3]
					front_left_real_rpm = (float)motor1.Capture_D_Value * (6000.0f / 1320.0f);
 8002418:	4b77      	ldr	r3, [pc, #476]	; (80025f8 <main+0x668>)
 800241a:	88db      	ldrh	r3, [r3, #6]
 800241c:	b21b      	sxth	r3, r3
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002426:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002604 <main+0x674>
 800242a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242e:	4b77      	ldr	r3, [pc, #476]	; (800260c <main+0x67c>)
 8002430:	edc3 7a00 	vstr	s15, [r3]
					back_right_real_rpm = (float)motor4.Capture_D_Value * (6000.0f / 1320.0f);
 8002434:	4b72      	ldr	r3, [pc, #456]	; (8002600 <main+0x670>)
 8002436:	88db      	ldrh	r3, [r3, #6]
 8002438:	b21b      	sxth	r3, r3
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002442:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002604 <main+0x674>
 8002446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800244a:	4b71      	ldr	r3, [pc, #452]	; (8002610 <main+0x680>)
 800244c:	edc3 7a00 	vstr	s15, [r3]
					front_right_real_rpm = (float)motor2.Capture_D_Value * (6000.0f / 1320.0f);
 8002450:	4b6a      	ldr	r3, [pc, #424]	; (80025fc <main+0x66c>)
 8002452:	88db      	ldrh	r3, [r3, #6]
 8002454:	b21b      	sxth	r3, r3
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800245e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002604 <main+0x674>
 8002462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002466:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <main+0x634>)
 8002468:	edc3 7a00 	vstr	s15, [r3]
					Loop_100msTime = 100;
 800246c:	4b56      	ldr	r3, [pc, #344]	; (80025c8 <main+0x638>)
 800246e:	2264      	movs	r2, #100	; 0x64
 8002470:	801a      	strh	r2, [r3, #0]
					auto_servo_reset = 0;
 8002472:	4b56      	ldr	r3, [pc, #344]	; (80025cc <main+0x63c>)
 8002474:	2200      	movs	r2, #0
 8002476:	801a      	strh	r2, [r3, #0]
              if(!Loop_100msTime){
 8002478:	e0a3      	b.n	80025c2 <main+0x632>

              }

          }else if(state1 ==0 && state2 == 1){
 800247a:	4b55      	ldr	r3, [pc, #340]	; (80025d0 <main+0x640>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f47f adee 	bne.w	8002060 <main+0xd0>
 8002484:	4b53      	ldr	r3, [pc, #332]	; (80025d4 <main+0x644>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	f47f ade9 	bne.w	8002060 <main+0xd0>
        	  if (!Loop_100msTime)
 800248e:	4b4e      	ldr	r3, [pc, #312]	; (80025c8 <main+0x638>)
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	f47f ade3 	bne.w	8002060 <main+0xd0>
				{

					wheels_rpm = kenematics_mecanum_inverse(x1, y1, x2);
 800249a:	4b52      	ldr	r3, [pc, #328]	; (80025e4 <main+0x654>)
 800249c:	8819      	ldrh	r1, [r3, #0]
 800249e:	4b52      	ldr	r3, [pc, #328]	; (80025e8 <main+0x658>)
 80024a0:	881a      	ldrh	r2, [r3, #0]
 80024a2:	4b4d      	ldr	r3, [pc, #308]	; (80025d8 <main+0x648>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	4c51      	ldr	r4, [pc, #324]	; (80025ec <main+0x65c>)
 80024a8:	4638      	mov	r0, r7
 80024aa:	f7fe fefd 	bl	80012a8 <kenematics_mecanum_inverse>
 80024ae:	4625      	mov	r5, r4
 80024b0:	463c      	mov	r4, r7
 80024b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
					HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80024be:	2104      	movs	r1, #4
 80024c0:	484b      	ldr	r0, [pc, #300]	; (80025f0 <main+0x660>)
 80024c2:	f008 f8bd 	bl	800a640 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80024c6:	210c      	movs	r1, #12
 80024c8:	4849      	ldr	r0, [pc, #292]	; (80025f0 <main+0x660>)
 80024ca:	f008 f8b9 	bl	800a640 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80024ce:	2100      	movs	r1, #0
 80024d0:	4847      	ldr	r0, [pc, #284]	; (80025f0 <main+0x660>)
 80024d2:	f008 f8b5 	bl	800a640 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80024d6:	2108      	movs	r1, #8
 80024d8:	4845      	ldr	r0, [pc, #276]	; (80025f0 <main+0x660>)
 80024da:	f008 f8b1 	bl	800a640 <HAL_TIM_PWM_Start>

					Encoder_UpdataValue(&motor3, 1);
 80024de:	2101      	movs	r1, #1
 80024e0:	4844      	ldr	r0, [pc, #272]	; (80025f4 <main+0x664>)
 80024e2:	f7fe fdb1 	bl	8001048 <Encoder_UpdataValue>
					Encoder_UpdataValue(&motor1, 1);
 80024e6:	2101      	movs	r1, #1
 80024e8:	4843      	ldr	r0, [pc, #268]	; (80025f8 <main+0x668>)
 80024ea:	f7fe fdad 	bl	8001048 <Encoder_UpdataValue>
					Encoder_UpdataValue(&motor2, 1);
 80024ee:	2101      	movs	r1, #1
 80024f0:	4842      	ldr	r0, [pc, #264]	; (80025fc <main+0x66c>)
 80024f2:	f7fe fda9 	bl	8001048 <Encoder_UpdataValue>
					Encoder_UpdataValue(&motor4, -1);
 80024f6:	f04f 31ff 	mov.w	r1, #4294967295
 80024fa:	4841      	ldr	r0, [pc, #260]	; (8002600 <main+0x670>)
 80024fc:	f7fe fda4 	bl	8001048 <Encoder_UpdataValue>
					back_left_real_rpm = (float)motor3.Capture_D_Value * (600.0f / 1320.0f);
 8002500:	4b3c      	ldr	r3, [pc, #240]	; (80025f4 <main+0x664>)
 8002502:	88db      	ldrh	r3, [r3, #6]
 8002504:	b21b      	sxth	r3, r3
 8002506:	ee07 3a90 	vmov	s15, r3
 800250a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002614 <main+0x684>
 8002512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002516:	4b3c      	ldr	r3, [pc, #240]	; (8002608 <main+0x678>)
 8002518:	edc3 7a00 	vstr	s15, [r3]
					front_left_real_rpm = (float)motor1.Capture_D_Value * (600.0f / 1320.0f);
 800251c:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <main+0x668>)
 800251e:	88db      	ldrh	r3, [r3, #6]
 8002520:	b21b      	sxth	r3, r3
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002614 <main+0x684>
 800252e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002532:	4b36      	ldr	r3, [pc, #216]	; (800260c <main+0x67c>)
 8002534:	edc3 7a00 	vstr	s15, [r3]
					back_right_real_rpm = (float)motor4.Capture_D_Value * (600.0f / 1320.0f);
 8002538:	4b31      	ldr	r3, [pc, #196]	; (8002600 <main+0x670>)
 800253a:	88db      	ldrh	r3, [r3, #6]
 800253c:	b21b      	sxth	r3, r3
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002546:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002614 <main+0x684>
 800254a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <main+0x680>)
 8002550:	edc3 7a00 	vstr	s15, [r3]
					front_right_real_rpm = (float)motor2.Capture_D_Value * (600.0f / 1320.0f);
 8002554:	4b29      	ldr	r3, [pc, #164]	; (80025fc <main+0x66c>)
 8002556:	88db      	ldrh	r3, [r3, #6]
 8002558:	b21b      	sxth	r3, r3
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002562:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002614 <main+0x684>
 8002566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800256a:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <main+0x634>)
 800256c:	edc3 7a00 	vstr	s15, [r3]
					front_right_real_rpm *= -1;// wrong wiring
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <main+0x634>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	eef1 7a67 	vneg.f32	s15, s15
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <main+0x634>)
 800257c:	edc3 7a00 	vstr	s15, [r3]

					if(auto_servo_reset == 0)
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <main+0x63c>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <main+0x60c>
					{
						MPU_data.KalmanAngleZ = 0;
 8002588:	4923      	ldr	r1, [pc, #140]	; (8002618 <main+0x688>)
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
						auto_servo_reset = 1;
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <main+0x63c>)
 8002598:	2201      	movs	r2, #1
 800259a:	801a      	strh	r2, [r3, #0]
					}

					HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800259c:	2104      	movs	r1, #4
 800259e:	480f      	ldr	r0, [pc, #60]	; (80025dc <main+0x64c>)
 80025a0:	f008 f84e 	bl	800a640 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80025a4:	2100      	movs	r1, #0
 80025a6:	480d      	ldr	r0, [pc, #52]	; (80025dc <main+0x64c>)
 80025a8:	f008 f84a 	bl	800a640 <HAL_TIM_PWM_Start>
					adjust_servo_position_x(&htim8, &MPU_data);
 80025ac:	491a      	ldr	r1, [pc, #104]	; (8002618 <main+0x688>)
 80025ae:	480b      	ldr	r0, [pc, #44]	; (80025dc <main+0x64c>)
 80025b0:	f001 faba 	bl	8003b28 <adjust_servo_position_x>
					adjust_servo_position_z(&htim8, &MPU_data);
 80025b4:	4918      	ldr	r1, [pc, #96]	; (8002618 <main+0x688>)
 80025b6:	4809      	ldr	r0, [pc, #36]	; (80025dc <main+0x64c>)
 80025b8:	f001 fa06 	bl	80039c8 <adjust_servo_position_z>

					Loop_100msTime = 100;
 80025bc:	4b02      	ldr	r3, [pc, #8]	; (80025c8 <main+0x638>)
 80025be:	2264      	movs	r2, #100	; 0x64
 80025c0:	801a      	strh	r2, [r3, #0]
      {
 80025c2:	e54d      	b.n	8002060 <main+0xd0>
 80025c4:	200002b4 	.word	0x200002b4
 80025c8:	2000029e 	.word	0x2000029e
 80025cc:	200002a6 	.word	0x200002a6
 80025d0:	20000ca4 	.word	0x20000ca4
 80025d4:	20000e5c 	.word	0x20000e5c
 80025d8:	20000c40 	.word	0x20000c40
 80025dc:	200009cc 	.word	0x200009cc
 80025e0:	20000c18 	.word	0x20000c18
 80025e4:	20000d88 	.word	0x20000d88
 80025e8:	20000ed0 	.word	0x20000ed0
 80025ec:	20000bdc 	.word	0x20000bdc
 80025f0:	200007c0 	.word	0x200007c0
 80025f4:	20000e50 	.word	0x20000e50
 80025f8:	20000cf4 	.word	0x20000cf4
 80025fc:	200008a0 	.word	0x200008a0
 8002600:	20000ca8 	.word	0x20000ca8
 8002604:	4091745d 	.word	0x4091745d
 8002608:	200002a8 	.word	0x200002a8
 800260c:	200002ac 	.word	0x200002ac
 8002610:	200002b0 	.word	0x200002b0
 8002614:	3ee8ba2f 	.word	0x3ee8ba2f
 8002618:	20000d18 	.word	0x20000d18

0800261c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b094      	sub	sp, #80	; 0x50
 8002620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002622:	f107 031c 	add.w	r3, r7, #28
 8002626:	2234      	movs	r2, #52	; 0x34
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f008 ff78 	bl	800b520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002630:	f107 0308 	add.w	r3, r7, #8
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002640:	2300      	movs	r3, #0
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <SystemClock_Config+0xd4>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <SystemClock_Config+0xd4>)
 800264a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264e:	6413      	str	r3, [r2, #64]	; 0x40
 8002650:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <SystemClock_Config+0xd4>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800265c:	2300      	movs	r3, #0
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <SystemClock_Config+0xd8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002668:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <SystemClock_Config+0xd8>)
 800266a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <SystemClock_Config+0xd8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800267c:	2302      	movs	r3, #2
 800267e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002680:	2301      	movs	r3, #1
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002684:	2310      	movs	r3, #16
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002688:	2302      	movs	r3, #2
 800268a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800268c:	2300      	movs	r3, #0
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002690:	2310      	movs	r3, #16
 8002692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002694:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002698:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800269a:	2304      	movs	r3, #4
 800269c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800269e:	2302      	movs	r3, #2
 80026a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026a2:	2302      	movs	r3, #2
 80026a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a6:	f107 031c 	add.w	r3, r7, #28
 80026aa:	4618      	mov	r0, r3
 80026ac:	f006 ff32 	bl	8009514 <HAL_RCC_OscConfig>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80026b6:	f000 fc5b 	bl	8002f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ba:	230f      	movs	r3, #15
 80026bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026be:	2302      	movs	r3, #2
 80026c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026d2:	f107 0308 	add.w	r3, r7, #8
 80026d6:	2102      	movs	r1, #2
 80026d8:	4618      	mov	r0, r3
 80026da:	f006 fc63 	bl	8008fa4 <HAL_RCC_ClockConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80026e4:	f000 fc44 	bl	8002f70 <Error_Handler>
  }
}
 80026e8:	bf00      	nop
 80026ea:	3750      	adds	r7, #80	; 0x50
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40007000 	.word	0x40007000

080026f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <MX_I2C1_Init+0x50>)
 80026fe:	4a13      	ldr	r2, [pc, #76]	; (800274c <MX_I2C1_Init+0x54>)
 8002700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <MX_I2C1_Init+0x50>)
 8002704:	4a12      	ldr	r2, [pc, #72]	; (8002750 <MX_I2C1_Init+0x58>)
 8002706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <MX_I2C1_Init+0x50>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <MX_I2C1_Init+0x50>)
 8002710:	2200      	movs	r2, #0
 8002712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <MX_I2C1_Init+0x50>)
 8002716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800271a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <MX_I2C1_Init+0x50>)
 800271e:	2200      	movs	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <MX_I2C1_Init+0x50>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002728:	4b07      	ldr	r3, [pc, #28]	; (8002748 <MX_I2C1_Init+0x50>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <MX_I2C1_Init+0x50>)
 8002730:	2200      	movs	r2, #0
 8002732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002734:	4804      	ldr	r0, [pc, #16]	; (8002748 <MX_I2C1_Init+0x50>)
 8002736:	f003 fbff 	bl	8005f38 <HAL_I2C_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002740:	f000 fc16 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000ad4 	.word	0x20000ad4
 800274c:	40005400 	.word	0x40005400
 8002750:	000186a0 	.word	0x000186a0

08002754 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <MX_I2C2_Init+0x50>)
 800275a:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <MX_I2C2_Init+0x54>)
 800275c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <MX_I2C2_Init+0x50>)
 8002760:	4a12      	ldr	r2, [pc, #72]	; (80027ac <MX_I2C2_Init+0x58>)
 8002762:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <MX_I2C2_Init+0x50>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <MX_I2C2_Init+0x50>)
 800276c:	2200      	movs	r2, #0
 800276e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <MX_I2C2_Init+0x50>)
 8002772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002776:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <MX_I2C2_Init+0x50>)
 800277a:	2200      	movs	r2, #0
 800277c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <MX_I2C2_Init+0x50>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002784:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <MX_I2C2_Init+0x50>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <MX_I2C2_Init+0x50>)
 800278c:	2200      	movs	r2, #0
 800278e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002790:	4804      	ldr	r0, [pc, #16]	; (80027a4 <MX_I2C2_Init+0x50>)
 8002792:	f003 fbd1 	bl	8005f38 <HAL_I2C_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800279c:	f000 fbe8 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000b28 	.word	0x20000b28
 80027a8:	40005800 	.word	0x40005800
 80027ac:	000186a0 	.word	0x000186a0

080027b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <MX_SPI1_Init+0x64>)
 80027b6:	4a18      	ldr	r2, [pc, #96]	; (8002818 <MX_SPI1_Init+0x68>)
 80027b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <MX_SPI1_Init+0x64>)
 80027bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <MX_SPI1_Init+0x64>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <MX_SPI1_Init+0x64>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <MX_SPI1_Init+0x64>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <MX_SPI1_Init+0x64>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <MX_SPI1_Init+0x64>)
 80027dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <MX_SPI1_Init+0x64>)
 80027e4:	2210      	movs	r2, #16
 80027e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <MX_SPI1_Init+0x64>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <MX_SPI1_Init+0x64>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f4:	4b07      	ldr	r3, [pc, #28]	; (8002814 <MX_SPI1_Init+0x64>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <MX_SPI1_Init+0x64>)
 80027fc:	220a      	movs	r2, #10
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002800:	4804      	ldr	r0, [pc, #16]	; (8002814 <MX_SPI1_Init+0x64>)
 8002802:	f007 f925 	bl	8009a50 <HAL_SPI_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800280c:	f000 fbb0 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000d8c 	.word	0x20000d8c
 8002818:	40013000 	.word	0x40013000

0800281c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b092      	sub	sp, #72	; 0x48
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002822:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800282c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
 800283c:	615a      	str	r2, [r3, #20]
 800283e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	2220      	movs	r2, #32
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f008 fe6a 	bl	800b520 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800284c:	4b44      	ldr	r3, [pc, #272]	; (8002960 <MX_TIM1_Init+0x144>)
 800284e:	4a45      	ldr	r2, [pc, #276]	; (8002964 <MX_TIM1_Init+0x148>)
 8002850:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002852:	4b43      	ldr	r3, [pc, #268]	; (8002960 <MX_TIM1_Init+0x144>)
 8002854:	2253      	movs	r2, #83	; 0x53
 8002856:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002858:	4b41      	ldr	r3, [pc, #260]	; (8002960 <MX_TIM1_Init+0x144>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800285e:	4b40      	ldr	r3, [pc, #256]	; (8002960 <MX_TIM1_Init+0x144>)
 8002860:	2264      	movs	r2, #100	; 0x64
 8002862:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002864:	4b3e      	ldr	r3, [pc, #248]	; (8002960 <MX_TIM1_Init+0x144>)
 8002866:	2200      	movs	r2, #0
 8002868:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800286a:	4b3d      	ldr	r3, [pc, #244]	; (8002960 <MX_TIM1_Init+0x144>)
 800286c:	2200      	movs	r2, #0
 800286e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002870:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <MX_TIM1_Init+0x144>)
 8002872:	2200      	movs	r2, #0
 8002874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002876:	483a      	ldr	r0, [pc, #232]	; (8002960 <MX_TIM1_Init+0x144>)
 8002878:	f007 fe92 	bl	800a5a0 <HAL_TIM_PWM_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8002882:	f000 fb75 	bl	8002f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800288e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002892:	4619      	mov	r1, r3
 8002894:	4832      	ldr	r0, [pc, #200]	; (8002960 <MX_TIM1_Init+0x144>)
 8002896:	f008 fd37 	bl	800b308 <HAL_TIMEx_MasterConfigSynchronization>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80028a0:	f000 fb66 	bl	8002f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028a4:	2360      	movs	r3, #96	; 0x60
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028b0:	2300      	movs	r3, #0
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028b8:	2300      	movs	r3, #0
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028bc:	2300      	movs	r3, #0
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c4:	2200      	movs	r2, #0
 80028c6:	4619      	mov	r1, r3
 80028c8:	4825      	ldr	r0, [pc, #148]	; (8002960 <MX_TIM1_Init+0x144>)
 80028ca:	f008 f9bd 	bl	800ac48 <HAL_TIM_PWM_ConfigChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80028d4:	f000 fb4c 	bl	8002f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028dc:	2204      	movs	r2, #4
 80028de:	4619      	mov	r1, r3
 80028e0:	481f      	ldr	r0, [pc, #124]	; (8002960 <MX_TIM1_Init+0x144>)
 80028e2:	f008 f9b1 	bl	800ac48 <HAL_TIM_PWM_ConfigChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80028ec:	f000 fb40 	bl	8002f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f4:	2208      	movs	r2, #8
 80028f6:	4619      	mov	r1, r3
 80028f8:	4819      	ldr	r0, [pc, #100]	; (8002960 <MX_TIM1_Init+0x144>)
 80028fa:	f008 f9a5 	bl	800ac48 <HAL_TIM_PWM_ConfigChannel>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8002904:	f000 fb34 	bl	8002f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290c:	220c      	movs	r2, #12
 800290e:	4619      	mov	r1, r3
 8002910:	4813      	ldr	r0, [pc, #76]	; (8002960 <MX_TIM1_Init+0x144>)
 8002912:	f008 f999 	bl	800ac48 <HAL_TIM_PWM_ConfigChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 800291c:	f000 fb28 	bl	8002f70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002920:	2300      	movs	r3, #0
 8002922:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002938:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4807      	ldr	r0, [pc, #28]	; (8002960 <MX_TIM1_Init+0x144>)
 8002944:	f008 fd5c 	bl	800b400 <HAL_TIMEx_ConfigBreakDeadTime>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 800294e:	f000 fb0f 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002952:	4803      	ldr	r0, [pc, #12]	; (8002960 <MX_TIM1_Init+0x144>)
 8002954:	f002 f9c4 	bl	8004ce0 <HAL_TIM_MspPostInit>

}
 8002958:	bf00      	nop
 800295a:	3748      	adds	r7, #72	; 0x48
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	200007c0 	.word	0x200007c0
 8002964:	40010000 	.word	0x40010000

08002968 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08c      	sub	sp, #48	; 0x30
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800296e:	f107 030c 	add.w	r3, r7, #12
 8002972:	2224      	movs	r2, #36	; 0x24
 8002974:	2100      	movs	r1, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f008 fdd2 	bl	800b520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <MX_TIM2_Init+0xbc>)
 8002986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800298a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <MX_TIM2_Init+0xbc>)
 800298e:	2200      	movs	r2, #0
 8002990:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002992:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <MX_TIM2_Init+0xbc>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002998:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <MX_TIM2_Init+0xbc>)
 800299a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800299e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a0:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <MX_TIM2_Init+0xbc>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a6:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <MX_TIM2_Init+0xbc>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029ac:	2303      	movs	r3, #3
 80029ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029b4:	2301      	movs	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80029bc:	230f      	movs	r3, #15
 80029be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029c0:	2300      	movs	r3, #0
 80029c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029c4:	2301      	movs	r3, #1
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80029cc:	230f      	movs	r3, #15
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	4619      	mov	r1, r3
 80029d6:	4813      	ldr	r0, [pc, #76]	; (8002a24 <MX_TIM2_Init+0xbc>)
 80029d8:	f007 fefa 	bl	800a7d0 <HAL_TIM_Encoder_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80029e2:	f000 fac5 	bl	8002f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	4619      	mov	r1, r3
 80029f2:	480c      	ldr	r0, [pc, #48]	; (8002a24 <MX_TIM2_Init+0xbc>)
 80029f4:	f008 fc88 	bl	800b308 <HAL_TIMEx_MasterConfigSynchronization>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80029fe:	f000 fab7 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <MX_TIM2_Init+0xbc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f06f 0201 	mvn.w	r2, #1
 8002a0a:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <MX_TIM2_Init+0xbc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <MX_TIM2_Init+0xbc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM2_Init 2 */

}
 8002a1c:	bf00      	nop
 8002a1e:	3730      	adds	r7, #48	; 0x30
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000850 	.word	0x20000850

08002a28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08c      	sub	sp, #48	; 0x30
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a2e:	f107 030c 	add.w	r3, r7, #12
 8002a32:	2224      	movs	r2, #36	; 0x24
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f008 fd72 	bl	800b520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a44:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <MX_TIM3_Init+0xbc>)
 8002a46:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <MX_TIM3_Init+0xc0>)
 8002a48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a4a:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <MX_TIM3_Init+0xbc>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a50:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <MX_TIM3_Init+0xbc>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a56:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <MX_TIM3_Init+0xbc>)
 8002a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a5e:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <MX_TIM3_Init+0xbc>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <MX_TIM3_Init+0xbc>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a72:	2301      	movs	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002a7a:	230f      	movs	r3, #15
 8002a7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a82:	2301      	movs	r3, #1
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a86:	2300      	movs	r3, #0
 8002a88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	4619      	mov	r1, r3
 8002a94:	4813      	ldr	r0, [pc, #76]	; (8002ae4 <MX_TIM3_Init+0xbc>)
 8002a96:	f007 fe9b 	bl	800a7d0 <HAL_TIM_Encoder_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002aa0:	f000 fa66 	bl	8002f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	4619      	mov	r1, r3
 8002ab0:	480c      	ldr	r0, [pc, #48]	; (8002ae4 <MX_TIM3_Init+0xbc>)
 8002ab2:	f008 fc29 	bl	800b308 <HAL_TIMEx_MasterConfigSynchronization>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002abc:	f000 fa58 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
    __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <MX_TIM3_Init+0xbc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0201 	mvn.w	r2, #1
 8002ac8:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <MX_TIM3_Init+0xbc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <MX_TIM3_Init+0xbc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM3_Init 2 */

}
 8002ada:	bf00      	nop
 8002adc:	3730      	adds	r7, #48	; 0x30
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000774 	.word	0x20000774
 8002ae8:	40000400 	.word	0x40000400

08002aec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	; 0x30
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002af2:	f107 030c 	add.w	r3, r7, #12
 8002af6:	2224      	movs	r2, #36	; 0x24
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f008 fd10 	bl	800b520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <MX_TIM4_Init+0xbc>)
 8002b0a:	4a28      	ldr	r2, [pc, #160]	; (8002bac <MX_TIM4_Init+0xc0>)
 8002b0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <MX_TIM4_Init+0xbc>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <MX_TIM4_Init+0xbc>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b1a:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <MX_TIM4_Init+0xbc>)
 8002b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <MX_TIM4_Init+0xbc>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b28:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <MX_TIM4_Init+0xbc>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b36:	2301      	movs	r3, #1
 8002b38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002b3e:	230f      	movs	r3, #15
 8002b40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b46:	2301      	movs	r3, #1
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002b4e:	230f      	movs	r3, #15
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002b52:	f107 030c 	add.w	r3, r7, #12
 8002b56:	4619      	mov	r1, r3
 8002b58:	4813      	ldr	r0, [pc, #76]	; (8002ba8 <MX_TIM4_Init+0xbc>)
 8002b5a:	f007 fe39 	bl	800a7d0 <HAL_TIM_Encoder_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002b64:	f000 fa04 	bl	8002f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	4619      	mov	r1, r3
 8002b74:	480c      	ldr	r0, [pc, #48]	; (8002ba8 <MX_TIM4_Init+0xbc>)
 8002b76:	f008 fbc7 	bl	800b308 <HAL_TIMEx_MasterConfigSynchronization>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002b80:	f000 f9f6 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
    __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <MX_TIM4_Init+0xbc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0201 	mvn.w	r2, #1
 8002b8c:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <MX_TIM4_Init+0xbc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <MX_TIM4_Init+0xbc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0201 	orr.w	r2, r2, #1
 8002b9c:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM4_Init 2 */

}
 8002b9e:	bf00      	nop
 8002ba0:	3730      	adds	r7, #48	; 0x30
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200006e4 	.word	0x200006e4
 8002bac:	40000800 	.word	0x40000800

08002bb0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	; 0x30
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bb6:	f107 030c 	add.w	r3, r7, #12
 8002bba:	2224      	movs	r2, #36	; 0x24
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f008 fcae 	bl	800b520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <MX_TIM5_Init+0xbc>)
 8002bce:	4a28      	ldr	r2, [pc, #160]	; (8002c70 <MX_TIM5_Init+0xc0>)
 8002bd0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <MX_TIM5_Init+0xbc>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <MX_TIM5_Init+0xbc>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002bde:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <MX_TIM5_Init+0xbc>)
 8002be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002be4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be6:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <MX_TIM5_Init+0xbc>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bec:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <MX_TIM5_Init+0xbc>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002c02:	230f      	movs	r3, #15
 8002c04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002c12:	230f      	movs	r3, #15
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002c16:	f107 030c 	add.w	r3, r7, #12
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4813      	ldr	r0, [pc, #76]	; (8002c6c <MX_TIM5_Init+0xbc>)
 8002c1e:	f007 fdd7 	bl	800a7d0 <HAL_TIM_Encoder_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002c28:	f000 f9a2 	bl	8002f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	480c      	ldr	r0, [pc, #48]	; (8002c6c <MX_TIM5_Init+0xbc>)
 8002c3a:	f008 fb65 	bl	800b308 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002c44:	f000 f994 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
    __HAL_TIM_CLEAR_IT(&htim5, TIM_IT_UPDATE);
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <MX_TIM5_Init+0xbc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0201 	mvn.w	r2, #1
 8002c50:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <MX_TIM5_Init+0xbc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <MX_TIM5_Init+0xbc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM5_Init 2 */

}
 8002c62:	bf00      	nop
 8002c64:	3730      	adds	r7, #48	; 0x30
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	2000072c 	.word	0x2000072c
 8002c70:	40000c00 	.word	0x40000c00

08002c74 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b092      	sub	sp, #72	; 0x48
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
 8002c94:	615a      	str	r2, [r3, #20]
 8002c96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f008 fc3e 	bl	800b520 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ca4:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <MX_TIM8_Init+0x118>)
 8002ca6:	4a3a      	ldr	r2, [pc, #232]	; (8002d90 <MX_TIM8_Init+0x11c>)
 8002ca8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1680-1;
 8002caa:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <MX_TIM8_Init+0x118>)
 8002cac:	f240 628f 	movw	r2, #1679	; 0x68f
 8002cb0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb2:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <MX_TIM8_Init+0x118>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8002cb8:	4b34      	ldr	r3, [pc, #208]	; (8002d8c <MX_TIM8_Init+0x118>)
 8002cba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cbe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc0:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <MX_TIM8_Init+0x118>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002cc6:	4b31      	ldr	r3, [pc, #196]	; (8002d8c <MX_TIM8_Init+0x118>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ccc:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <MX_TIM8_Init+0x118>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002cd2:	482e      	ldr	r0, [pc, #184]	; (8002d8c <MX_TIM8_Init+0x118>)
 8002cd4:	f007 fc64 	bl	800a5a0 <HAL_TIM_PWM_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8002cde:	f000 f947 	bl	8002f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002cea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4826      	ldr	r0, [pc, #152]	; (8002d8c <MX_TIM8_Init+0x118>)
 8002cf2:	f008 fb09 	bl	800b308 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8002cfc:	f000 f938 	bl	8002f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d00:	2360      	movs	r3, #96	; 0x60
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d14:	2300      	movs	r3, #0
 8002d16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d20:	2200      	movs	r2, #0
 8002d22:	4619      	mov	r1, r3
 8002d24:	4819      	ldr	r0, [pc, #100]	; (8002d8c <MX_TIM8_Init+0x118>)
 8002d26:	f007 ff8f 	bl	800ac48 <HAL_TIM_PWM_ConfigChannel>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8002d30:	f000 f91e 	bl	8002f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d38:	2204      	movs	r2, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4813      	ldr	r0, [pc, #76]	; (8002d8c <MX_TIM8_Init+0x118>)
 8002d3e:	f007 ff83 	bl	800ac48 <HAL_TIM_PWM_ConfigChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM8_Init+0xd8>
  {
    Error_Handler();
 8002d48:	f000 f912 	bl	8002f70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4807      	ldr	r0, [pc, #28]	; (8002d8c <MX_TIM8_Init+0x118>)
 8002d70:	f008 fb46 	bl	800b400 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
 8002d7a:	f000 f8f9 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002d7e:	4803      	ldr	r0, [pc, #12]	; (8002d8c <MX_TIM8_Init+0x118>)
 8002d80:	f001 ffae 	bl	8004ce0 <HAL_TIM_MspPostInit>

}
 8002d84:	bf00      	nop
 8002d86:	3748      	adds	r7, #72	; 0x48
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	200009cc 	.word	0x200009cc
 8002d90:	40010400 	.word	0x40010400

08002d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	4b33      	ldr	r3, [pc, #204]	; (8002e6c <MX_DMA_Init+0xd8>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a32      	ldr	r2, [pc, #200]	; (8002e6c <MX_DMA_Init+0xd8>)
 8002da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b30      	ldr	r3, [pc, #192]	; (8002e6c <MX_DMA_Init+0xd8>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	603b      	str	r3, [r7, #0]
 8002dba:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <MX_DMA_Init+0xd8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a2b      	ldr	r2, [pc, #172]	; (8002e6c <MX_DMA_Init+0xd8>)
 8002dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <MX_DMA_Init+0xd8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	2011      	movs	r0, #17
 8002dd8:	f002 fafb 	bl	80053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002ddc:	2011      	movs	r0, #17
 8002dde:	f002 fb14 	bl	800540a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	202f      	movs	r0, #47	; 0x2f
 8002de8:	f002 faf3 	bl	80053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002dec:	202f      	movs	r0, #47	; 0x2f
 8002dee:	f002 fb0c 	bl	800540a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	2038      	movs	r0, #56	; 0x38
 8002df8:	f002 faeb 	bl	80053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002dfc:	2038      	movs	r0, #56	; 0x38
 8002dfe:	f002 fb04 	bl	800540a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2100      	movs	r1, #0
 8002e06:	2039      	movs	r0, #57	; 0x39
 8002e08:	f002 fae3 	bl	80053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002e0c:	2039      	movs	r0, #57	; 0x39
 8002e0e:	f002 fafc 	bl	800540a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2100      	movs	r1, #0
 8002e16:	203a      	movs	r0, #58	; 0x3a
 8002e18:	f002 fadb 	bl	80053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002e1c:	203a      	movs	r0, #58	; 0x3a
 8002e1e:	f002 faf4 	bl	800540a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2100      	movs	r1, #0
 8002e26:	203b      	movs	r0, #59	; 0x3b
 8002e28:	f002 fad3 	bl	80053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002e2c:	203b      	movs	r0, #59	; 0x3b
 8002e2e:	f002 faec 	bl	800540a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2100      	movs	r1, #0
 8002e36:	203c      	movs	r0, #60	; 0x3c
 8002e38:	f002 facb 	bl	80053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002e3c:	203c      	movs	r0, #60	; 0x3c
 8002e3e:	f002 fae4 	bl	800540a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2100      	movs	r1, #0
 8002e46:	2044      	movs	r0, #68	; 0x44
 8002e48:	f002 fac3 	bl	80053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002e4c:	2044      	movs	r0, #68	; 0x44
 8002e4e:	f002 fadc 	bl	800540a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	2045      	movs	r0, #69	; 0x45
 8002e58:	f002 fabb 	bl	80053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002e5c:	2045      	movs	r0, #69	; 0x45
 8002e5e:	f002 fad4 	bl	800540a <HAL_NVIC_EnableIRQ>

}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800

08002e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e76:	f107 030c 	add.w	r3, r7, #12
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	60da      	str	r2, [r3, #12]
 8002e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <MX_GPIO_Init+0xf0>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a34      	ldr	r2, [pc, #208]	; (8002f60 <MX_GPIO_Init+0xf0>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <MX_GPIO_Init+0xf0>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <MX_GPIO_Init+0xf0>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	4a2d      	ldr	r2, [pc, #180]	; (8002f60 <MX_GPIO_Init+0xf0>)
 8002eac:	f043 0304 	orr.w	r3, r3, #4
 8002eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb2:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <MX_GPIO_Init+0xf0>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <MX_GPIO_Init+0xf0>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <MX_GPIO_Init+0xf0>)
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <MX_GPIO_Init+0xf0>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|NRF_CS_Pin|BL1_Pin|FL2_Pin, GPIO_PIN_RESET);
 8002eda:	2200      	movs	r2, #0
 8002edc:	f44f 714c 	mov.w	r1, #816	; 0x330
 8002ee0:	4820      	ldr	r0, [pc, #128]	; (8002f64 <MX_GPIO_Init+0xf4>)
 8002ee2:	f003 f80f 	bl	8005f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL2_Pin|BR2_Pin|BR1_Pin|FR2_Pin
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f24f 0104 	movw	r1, #61444	; 0xf004
 8002eec:	481e      	ldr	r0, [pc, #120]	; (8002f68 <MX_GPIO_Init+0xf8>)
 8002eee:	f003 f809 	bl	8005f04 <HAL_GPIO_WritePin>
                          |FR1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_GPIO_Port, FL1_Pin, GPIO_PIN_RESET);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ef8:	481c      	ldr	r0, [pc, #112]	; (8002f6c <MX_GPIO_Init+0xfc>)
 8002efa:	f003 f803 	bl	8005f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 NRF_CS_Pin BL1_Pin FL2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|NRF_CS_Pin|BL1_Pin|FL2_Pin;
 8002efe:	f44f 734c 	mov.w	r3, #816	; 0x330
 8002f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f04:	2301      	movs	r3, #1
 8002f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f10:	f107 030c 	add.w	r3, r7, #12
 8002f14:	4619      	mov	r1, r3
 8002f16:	4813      	ldr	r0, [pc, #76]	; (8002f64 <MX_GPIO_Init+0xf4>)
 8002f18:	f002 fe60 	bl	8005bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : BL2_Pin BR2_Pin BR1_Pin FR2_Pin
                           FR1_Pin */
  GPIO_InitStruct.Pin = BL2_Pin|BR2_Pin|BR1_Pin|FR2_Pin
 8002f1c:	f24f 0304 	movw	r3, #61444	; 0xf004
 8002f20:	60fb      	str	r3, [r7, #12]
                          |FR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f22:	2301      	movs	r3, #1
 8002f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	4619      	mov	r1, r3
 8002f34:	480c      	ldr	r0, [pc, #48]	; (8002f68 <MX_GPIO_Init+0xf8>)
 8002f36:	f002 fe51 	bl	8005bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : FL1_Pin */
  GPIO_InitStruct.Pin = FL1_Pin;
 8002f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f40:	2301      	movs	r3, #1
 8002f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FL1_GPIO_Port, &GPIO_InitStruct);
 8002f4c:	f107 030c 	add.w	r3, r7, #12
 8002f50:	4619      	mov	r1, r3
 8002f52:	4806      	ldr	r0, [pc, #24]	; (8002f6c <MX_GPIO_Init+0xfc>)
 8002f54:	f002 fe42 	bl	8005bdc <HAL_GPIO_Init>

}
 8002f58:	bf00      	nop
 8002f5a:	3720      	adds	r7, #32
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40020800 	.word	0x40020800
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40020000 	.word	0x40020000

08002f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f74:	b672      	cpsid	i
}
 8002f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8002f78:	e7fe      	b.n	8002f78 <Error_Handler+0x8>

08002f7a <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b088      	sub	sp, #32
 8002f7e:	af04      	add	r7, sp, #16
 8002f80:	6078      	str	r0, [r7, #4]
	uint8_t check, Data;
	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002f82:	2364      	movs	r3, #100	; 0x64
 8002f84:	9302      	str	r3, [sp, #8]
 8002f86:	2301      	movs	r3, #1
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	f107 030f 	add.w	r3, r7, #15
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2301      	movs	r3, #1
 8002f92:	2275      	movs	r2, #117	; 0x75
 8002f94:	21d0      	movs	r1, #208	; 0xd0
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f003 fa0c 	bl	80063b4 <HAL_I2C_Mem_Read>

	if(check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	2b68      	cmp	r3, #104	; 0x68
 8002fa0:	d13d      	bne.n	800301e <MPU6050_Init+0xa4>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002fa6:	2364      	movs	r3, #100	; 0x64
 8002fa8:	9302      	str	r3, [sp, #8]
 8002faa:	2301      	movs	r3, #1
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	f107 030e 	add.w	r3, r7, #14
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	226b      	movs	r2, #107	; 0x6b
 8002fb8:	21d0      	movs	r1, #208	; 0xd0
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f003 f900 	bl	80061c0 <HAL_I2C_Mem_Write>
		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8002fc0:	2307      	movs	r3, #7
 8002fc2:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002fc4:	2364      	movs	r3, #100	; 0x64
 8002fc6:	9302      	str	r3, [sp, #8]
 8002fc8:	2301      	movs	r3, #1
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	f107 030e 	add.w	r3, r7, #14
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	2219      	movs	r2, #25
 8002fd6:	21d0      	movs	r1, #208	; 0xd0
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f003 f8f1 	bl	80061c0 <HAL_I2C_Mem_Write>
		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> +- 2g
		Data = 0x00;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002fe2:	2364      	movs	r3, #100	; 0x64
 8002fe4:	9302      	str	r3, [sp, #8]
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	f107 030e 	add.w	r3, r7, #14
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	221c      	movs	r2, #28
 8002ff4:	21d0      	movs	r1, #208	; 0xd0
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f003 f8e2 	bl	80061c0 <HAL_I2C_Mem_Write>
		// Set Gyroscope configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> +- 250 deg/s
		Data = 0x00;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003000:	2364      	movs	r3, #100	; 0x64
 8003002:	9302      	str	r3, [sp, #8]
 8003004:	2301      	movs	r3, #1
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	f107 030e 	add.w	r3, r7, #14
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	2301      	movs	r3, #1
 8003010:	221b      	movs	r2, #27
 8003012:	21d0      	movs	r1, #208	; 0xd0
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f003 f8d3 	bl	80061c0 <HAL_I2C_Mem_Write>
		return 0;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <MPU6050_Init+0xa6>
//		fix.sclPin = 9;
//		fix.sclPort = GPIOB;
//		I2C_ClearBusyFlagErratum(&fix);

	}
	return 1;
 800301e:	2301      	movs	r3, #1
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <MPU6050_Read_Gyro>:
	DataStruct->Az = DataStruct->Accel_Z_RAW / 16384.0;
}


void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af04      	add	r7, sp, #16
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];
    // Read 6 BYTES of data starting from GYRO_XOUT_H register
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8003032:	2364      	movs	r3, #100	; 0x64
 8003034:	9302      	str	r3, [sp, #8]
 8003036:	2306      	movs	r3, #6
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	f107 0308 	add.w	r3, r7, #8
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2301      	movs	r3, #1
 8003042:	2243      	movs	r2, #67	; 0x43
 8003044:	21d0      	movs	r1, #208	; 0xd0
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f003 f9b4 	bl	80063b4 <HAL_I2C_Mem_Read>
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800304c:	7a3b      	ldrb	r3, [r7, #8]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	b21a      	sxth	r2, r3
 8003052:	7a7b      	ldrb	r3, [r7, #9]
 8003054:	b21b      	sxth	r3, r3
 8003056:	4313      	orrs	r3, r2
 8003058:	b21a      	sxth	r2, r3
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800305e:	7abb      	ldrb	r3, [r7, #10]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	b21a      	sxth	r2, r3
 8003064:	7afb      	ldrb	r3, [r7, #11]
 8003066:	b21b      	sxth	r3, r3
 8003068:	4313      	orrs	r3, r2
 800306a:	b21a      	sxth	r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8003070:	7b3b      	ldrb	r3, [r7, #12]
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	b21a      	sxth	r2, r3
 8003076:	7b7b      	ldrb	r3, [r7, #13]
 8003078:	b21b      	sxth	r3, r3
 800307a:	4313      	orrs	r3, r2
 800307c:	b21a      	sxth	r2, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	849a      	strh	r2, [r3, #36]	; 0x24
    //convert the RAW values into dps
	//we have to divide according to the Full scale value set in FS_SEL
	//I have configured FS_SEL = 0. So I am dividing by 131.0
	//for more details check GYRO_CONFIG Register
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fa6b 	bl	8000564 <__aeabi_i2d>
 800308e:	a318      	add	r3, pc, #96	; (adr r3, 80030f0 <MPU6050_Read_Gyro+0xc8>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd fbfa 	bl	800088c <__aeabi_ddiv>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fa5b 	bl	8000564 <__aeabi_i2d>
 80030ae:	a310      	add	r3, pc, #64	; (adr r3, 80030f0 <MPU6050_Read_Gyro+0xc8>)
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	f7fd fbea 	bl	800088c <__aeabi_ddiv>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	6839      	ldr	r1, [r7, #0]
 80030be:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fa4b 	bl	8000564 <__aeabi_i2d>
 80030ce:	a308      	add	r3, pc, #32	; (adr r3, 80030f0 <MPU6050_Read_Gyro+0xc8>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd fbda 	bl	800088c <__aeabi_ddiv>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	6839      	ldr	r1, [r7, #0]
 80030de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	f3af 8000 	nop.w
 80030f0:	00000000 	.word	0x00000000
 80030f4:	40606000 	.word	0x40606000

080030f8 <get_Zero_Offset>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void get_Zero_Offset(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80030f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	6039      	str	r1, [r7, #0]
	static const float dt = 8.0 / 1000 ;  // 10ms time interval for sampling
	static const int ZERO_OFFSET_COUN = (1 / dt); // frequency of data sampling is 125 Hz
	static int g_GetZeroOffset = 0;
	static float gyroX_offset = 0.0f, gyroY_offset = 0.0f, gyroZ_offset = 0.0f;
	for (g_GetZeroOffset = 0; g_GetZeroOffset < ZERO_OFFSET_COUN; g_GetZeroOffset++)
 8003104:	4b47      	ldr	r3, [pc, #284]	; (8003224 <get_Zero_Offset+0x12c>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	e074      	b.n	80031f6 <get_Zero_Offset+0xfe>
	{
		MPU6050_Read_Gyro(I2Cx, DataStruct);
 800310c:	6839      	ldr	r1, [r7, #0]
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ff8a 	bl	8003028 <MPU6050_Read_Gyro>
		gyroX_offset += DataStruct->Gx * dt;  // calculate the "angular distance traveled" in one second which is equal to the average angular velocity offset
 8003114:	4b44      	ldr	r3, [pc, #272]	; (8003228 <get_Zero_Offset+0x130>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd fa35 	bl	8000588 <__aeabi_f2d>
 800311e:	4680      	mov	r8, r0
 8003120:	4689      	mov	r9, r1
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003128:	4b40      	ldr	r3, [pc, #256]	; (800322c <get_Zero_Offset+0x134>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd fa2b 	bl	8000588 <__aeabi_f2d>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4620      	mov	r0, r4
 8003138:	4629      	mov	r1, r5
 800313a:	f7fd fa7d 	bl	8000638 <__aeabi_dmul>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4640      	mov	r0, r8
 8003144:	4649      	mov	r1, r9
 8003146:	f7fd f8c1 	bl	80002cc <__adddf3>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4610      	mov	r0, r2
 8003150:	4619      	mov	r1, r3
 8003152:	f7fd fd69 	bl	8000c28 <__aeabi_d2f>
 8003156:	4603      	mov	r3, r0
 8003158:	4a33      	ldr	r2, [pc, #204]	; (8003228 <get_Zero_Offset+0x130>)
 800315a:	6013      	str	r3, [r2, #0]
		gyroY_offset += DataStruct->Gy * dt;
 800315c:	4b34      	ldr	r3, [pc, #208]	; (8003230 <get_Zero_Offset+0x138>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd fa11 	bl	8000588 <__aeabi_f2d>
 8003166:	4680      	mov	r8, r0
 8003168:	4689      	mov	r9, r1
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003170:	4b2e      	ldr	r3, [pc, #184]	; (800322c <get_Zero_Offset+0x134>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd fa07 	bl	8000588 <__aeabi_f2d>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4620      	mov	r0, r4
 8003180:	4629      	mov	r1, r5
 8003182:	f7fd fa59 	bl	8000638 <__aeabi_dmul>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4640      	mov	r0, r8
 800318c:	4649      	mov	r1, r9
 800318e:	f7fd f89d 	bl	80002cc <__adddf3>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	f7fd fd45 	bl	8000c28 <__aeabi_d2f>
 800319e:	4603      	mov	r3, r0
 80031a0:	4a23      	ldr	r2, [pc, #140]	; (8003230 <get_Zero_Offset+0x138>)
 80031a2:	6013      	str	r3, [r2, #0]
		gyroZ_offset += DataStruct->Gz * dt;
 80031a4:	4b23      	ldr	r3, [pc, #140]	; (8003234 <get_Zero_Offset+0x13c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd f9ed 	bl	8000588 <__aeabi_f2d>
 80031ae:	4680      	mov	r8, r0
 80031b0:	4689      	mov	r9, r1
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80031b8:	4b1c      	ldr	r3, [pc, #112]	; (800322c <get_Zero_Offset+0x134>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd f9e3 	bl	8000588 <__aeabi_f2d>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4620      	mov	r0, r4
 80031c8:	4629      	mov	r1, r5
 80031ca:	f7fd fa35 	bl	8000638 <__aeabi_dmul>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4640      	mov	r0, r8
 80031d4:	4649      	mov	r1, r9
 80031d6:	f7fd f879 	bl	80002cc <__adddf3>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	f7fd fd21 	bl	8000c28 <__aeabi_d2f>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4a12      	ldr	r2, [pc, #72]	; (8003234 <get_Zero_Offset+0x13c>)
 80031ea:	6013      	str	r3, [r2, #0]
	for (g_GetZeroOffset = 0; g_GetZeroOffset < ZERO_OFFSET_COUN; g_GetZeroOffset++)
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <get_Zero_Offset+0x12c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <get_Zero_Offset+0x12c>)
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <get_Zero_Offset+0x12c>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <get_Zero_Offset+0x140>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	db84      	blt.n	800310c <get_Zero_Offset+0x14>
	}
	DataStruct->Zero_Offset_X = gyroX_offset;
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <get_Zero_Offset+0x130>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	645a      	str	r2, [r3, #68]	; 0x44
	DataStruct->Zero_Offset_Y = gyroY_offset;
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <get_Zero_Offset+0x138>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	649a      	str	r2, [r3, #72]	; 0x48
	DataStruct->Zero_Offset_Z = gyroZ_offset;
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <get_Zero_Offset+0x13c>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003224:	200002b8 	.word	0x200002b8
 8003228:	200002bc 	.word	0x200002bc
 800322c:	0800f0d4 	.word	0x0800f0d4
 8003230:	200002c0 	.word	0x200002c0
 8003234:	200002c4 	.word	0x200002c4
 8003238:	0800f0d8 	.word	0x0800f0d8

0800323c <get_Yaw>:

void get_Yaw(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 800323c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
	static const float dt = 5.0 / 1000 ;  // time interval for sampling
	DataStruct->KalmanAngleZ += (DataStruct->Gz - DataStruct->Zero_Offset_Z) * dt * 2 * 7.5;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	e9d3 890e 	ldrd	r8, r9, [r3, #56]	; 0x38
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd f995 	bl	8000588 <__aeabi_f2d>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4640      	mov	r0, r8
 8003264:	4649      	mov	r1, r9
 8003266:	f7fd f82f 	bl	80002c8 <__aeabi_dsub>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4690      	mov	r8, r2
 8003270:	4699      	mov	r9, r3
 8003272:	4b2e      	ldr	r3, [pc, #184]	; (800332c <get_Yaw+0xf0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd f986 	bl	8000588 <__aeabi_f2d>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4640      	mov	r0, r8
 8003282:	4649      	mov	r1, r9
 8003284:	f7fd f9d8 	bl	8000638 <__aeabi_dmul>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	f7fd f81a 	bl	80002cc <__adddf3>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	4b22      	ldr	r3, [pc, #136]	; (8003330 <get_Yaw+0xf4>)
 80032a6:	f7fd f9c7 	bl	8000638 <__aeabi_dmul>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4620      	mov	r0, r4
 80032b0:	4629      	mov	r1, r5
 80032b2:	f7fd f80b 	bl	80002cc <__adddf3>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	6839      	ldr	r1, [r7, #0]
 80032bc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	if (DataStruct->KalmanAngleZ > 360)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <get_Yaw+0xf8>)
 80032cc:	f7fd fc44 	bl	8000b58 <__aeabi_dcmpgt>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00c      	beq.n	80032f0 <get_Yaw+0xb4>
		DataStruct->KalmanAngleZ -= 360;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <get_Yaw+0xf8>)
 80032e2:	f7fc fff1 	bl	80002c8 <__aeabi_dsub>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	6839      	ldr	r1, [r7, #0]
 80032ec:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	if (DataStruct->KalmanAngleZ < -360)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <get_Yaw+0xfc>)
 80032fc:	f7fd fc0e 	bl	8000b1c <__aeabi_dcmplt>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <get_Yaw+0xcc>
		DataStruct->KalmanAngleZ += 360;
}
 8003306:	e00c      	b.n	8003322 <get_Yaw+0xe6>
		DataStruct->KalmanAngleZ += 360;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <get_Yaw+0xf8>)
 8003314:	f7fc ffda 	bl	80002cc <__adddf3>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800332c:	0800f0dc 	.word	0x0800f0dc
 8003330:	401e0000 	.word	0x401e0000
 8003334:	40768000 	.word	0x40768000
 8003338:	c0768000 	.word	0xc0768000
 800333c:	00000000 	.word	0x00000000

08003340 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8003340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003344:	b094      	sub	sp, #80	; 0x50
 8003346:	af04      	add	r7, sp, #16
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;
    // Read 14 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800334c:	2364      	movs	r3, #100	; 0x64
 800334e:	9302      	str	r3, [sp, #8]
 8003350:	230e      	movs	r3, #14
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	f107 0308 	add.w	r3, r7, #8
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2301      	movs	r3, #1
 800335c:	223b      	movs	r2, #59	; 0x3b
 800335e:	21d0      	movs	r1, #208	; 0xd0
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f003 f827 	bl	80063b4 <HAL_I2C_Mem_Read>
    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003366:	7a3b      	ldrb	r3, [r7, #8]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	b21a      	sxth	r2, r3
 800336c:	7a7b      	ldrb	r3, [r7, #9]
 800336e:	b21b      	sxth	r3, r3
 8003370:	4313      	orrs	r3, r2
 8003372:	b21a      	sxth	r2, r3
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8003378:	7abb      	ldrb	r3, [r7, #10]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	b21a      	sxth	r2, r3
 800337e:	7afb      	ldrb	r3, [r7, #11]
 8003380:	b21b      	sxth	r3, r3
 8003382:	4313      	orrs	r3, r2
 8003384:	b21a      	sxth	r2, r3
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800338a:	7b3b      	ldrb	r3, [r7, #12]
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	b21a      	sxth	r2, r3
 8003390:	7b7b      	ldrb	r3, [r7, #13]
 8003392:	b21b      	sxth	r3, r3
 8003394:	4313      	orrs	r3, r2
 8003396:	b21a      	sxth	r2, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800339c:	7bbb      	ldrb	r3, [r7, #14]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	b21a      	sxth	r2, r3
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	b21b      	sxth	r3, r3
 80033a6:	4313      	orrs	r3, r2
 80033a8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80033aa:	7c3b      	ldrb	r3, [r7, #16]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	b21a      	sxth	r2, r3
 80033b0:	7c7b      	ldrb	r3, [r7, #17]
 80033b2:	b21b      	sxth	r3, r3
 80033b4:	4313      	orrs	r3, r2
 80033b6:	b21a      	sxth	r2, r3
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80033bc:	7cbb      	ldrb	r3, [r7, #18]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	b21a      	sxth	r2, r3
 80033c2:	7cfb      	ldrb	r3, [r7, #19]
 80033c4:	b21b      	sxth	r3, r3
 80033c6:	4313      	orrs	r3, r2
 80033c8:	b21a      	sxth	r2, r3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80033ce:	7d3b      	ldrb	r3, [r7, #20]
 80033d0:	021b      	lsls	r3, r3, #8
 80033d2:	b21a      	sxth	r2, r3
 80033d4:	7d7b      	ldrb	r3, [r7, #21]
 80033d6:	b21b      	sxth	r3, r3
 80033d8:	4313      	orrs	r3, r2
 80033da:	b21a      	sxth	r2, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd f8bc 	bl	8000564 <__aeabi_i2d>
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	4bbd      	ldr	r3, [pc, #756]	; (80036e8 <MPU6050_Read_All+0x3a8>)
 80033f2:	f7fd fa4b 	bl	800088c <__aeabi_ddiv>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	6839      	ldr	r1, [r7, #0]
 80033fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd f8ac 	bl	8000564 <__aeabi_i2d>
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	4bb5      	ldr	r3, [pc, #724]	; (80036e8 <MPU6050_Read_All+0x3a8>)
 8003412:	f7fd fa3b 	bl	800088c <__aeabi_ddiv>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	6839      	ldr	r1, [r7, #0]
 800341c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd f89c 	bl	8000564 <__aeabi_i2d>
 800342c:	a3a8      	add	r3, pc, #672	; (adr r3, 80036d0 <MPU6050_Read_All+0x390>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f7fd fa2b 	bl	800088c <__aeabi_ddiv>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	6839      	ldr	r1, [r7, #0]
 800343c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8003440:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003444:	ee07 3a90 	vmov	s15, r3
 8003448:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800344c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80036ec <MPU6050_Read_All+0x3ac>
 8003450:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003454:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80036f0 <MPU6050_Read_All+0x3b0>
 8003458:	ee77 7a87 	vadd.f32	s15, s15, s14
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd f87b 	bl	8000564 <__aeabi_i2d>
 800346e:	a39a      	add	r3, pc, #616	; (adr r3, 80036d8 <MPU6050_Read_All+0x398>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f7fd fa0a 	bl	800088c <__aeabi_ddiv>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	6839      	ldr	r1, [r7, #0]
 800347e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd f86b 	bl	8000564 <__aeabi_i2d>
 800348e:	a392      	add	r3, pc, #584	; (adr r3, 80036d8 <MPU6050_Read_All+0x398>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f7fd f9fa 	bl	800088c <__aeabi_ddiv>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd f85b 	bl	8000564 <__aeabi_i2d>
 80034ae:	a38a      	add	r3, pc, #552	; (adr r3, 80036d8 <MPU6050_Read_All+0x398>)
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	f7fd f9ea 	bl	800088c <__aeabi_ddiv>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	6839      	ldr	r1, [r7, #0]
 80034be:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80034c2:	f001 fe7b 	bl	80051bc <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b8a      	ldr	r3, [pc, #552]	; (80036f4 <MPU6050_Read_All+0x3b4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd f838 	bl	8000544 <__aeabi_ui2d>
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	4b87      	ldr	r3, [pc, #540]	; (80036f8 <MPU6050_Read_All+0x3b8>)
 80034da:	f7fd f9d7 	bl	800088c <__aeabi_ddiv>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80034e6:	f001 fe69 	bl	80051bc <HAL_GetTick>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4a81      	ldr	r2, [pc, #516]	; (80036f4 <MPU6050_Read_All+0x3b4>)
 80034ee:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f6:	461a      	mov	r2, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034fe:	fb03 f202 	mul.w	r2, r3, r2
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003508:	4619      	mov	r1, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003510:	fb03 f301 	mul.w	r3, r3, r1
 8003514:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd f824 	bl	8000564 <__aeabi_i2d>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	ec43 2b10 	vmov	d0, r2, r3
 8003524:	f00b f848 	bl	800e5b8 <sqrt>
 8003528:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003538:	f7fd fae6 	bl	8000b08 <__aeabi_dcmpeq>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d11f      	bne.n	8003582 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd f80b 	bl	8000564 <__aeabi_i2d>
 800354e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003552:	f7fd f99b 	bl	800088c <__aeabi_ddiv>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	ec43 2b17 	vmov	d7, r2, r3
 800355e:	eeb0 0a47 	vmov.f32	s0, s14
 8003562:	eef0 0a67 	vmov.f32	s1, s15
 8003566:	f00a fe7b 	bl	800e260 <atan>
 800356a:	ec51 0b10 	vmov	r0, r1, d0
 800356e:	a35c      	add	r3, pc, #368	; (adr r3, 80036e0 <MPU6050_Read_All+0x3a0>)
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f7fd f860 	bl	8000638 <__aeabi_dmul>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003580:	e005      	b.n	800358e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003594:	425b      	negs	r3, r3
 8003596:	4618      	mov	r0, r3
 8003598:	f7fc ffe4 	bl	8000564 <__aeabi_i2d>
 800359c:	4682      	mov	sl, r0
 800359e:	468b      	mov	fp, r1
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fc ffdc 	bl	8000564 <__aeabi_i2d>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	ec43 2b11 	vmov	d1, r2, r3
 80035b4:	ec4b ab10 	vmov	d0, sl, fp
 80035b8:	f00a fffb 	bl	800e5b2 <atan2>
 80035bc:	ec51 0b10 	vmov	r0, r1, d0
 80035c0:	a347      	add	r3, pc, #284	; (adr r3, 80036e0 <MPU6050_Read_All+0x3a0>)
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f7fd f837 	bl	8000638 <__aeabi_dmul>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	4b49      	ldr	r3, [pc, #292]	; (80036fc <MPU6050_Read_All+0x3bc>)
 80035d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035dc:	f7fd fa9e 	bl	8000b1c <__aeabi_dcmplt>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <MPU6050_Read_All+0x2bc>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	4b43      	ldr	r3, [pc, #268]	; (8003700 <MPU6050_Read_All+0x3c0>)
 80035f2:	f7fd fab1 	bl	8000b58 <__aeabi_dcmpgt>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d114      	bne.n	8003626 <MPU6050_Read_All+0x2e6>
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	4b3f      	ldr	r3, [pc, #252]	; (8003700 <MPU6050_Read_All+0x3c0>)
 8003602:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003606:	f7fd faa7 	bl	8000b58 <__aeabi_dcmpgt>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d015      	beq.n	800363c <MPU6050_Read_All+0x2fc>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	4b38      	ldr	r3, [pc, #224]	; (80036fc <MPU6050_Read_All+0x3bc>)
 800361c:	f7fd fa7e 	bl	8000b1c <__aeabi_dcmplt>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8003626:	4937      	ldr	r1, [pc, #220]	; (8003704 <MPU6050_Read_All+0x3c4>)
 8003628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800362c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8003630:	6839      	ldr	r1, [r7, #0]
 8003632:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003636:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 800363a:	e014      	b.n	8003666 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003642:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003646:	eeb0 1a47 	vmov.f32	s2, s14
 800364a:	eef0 1a67 	vmov.f32	s3, s15
 800364e:	ed97 0b06 	vldr	d0, [r7, #24]
 8003652:	482c      	ldr	r0, [pc, #176]	; (8003704 <MPU6050_Read_All+0x3c4>)
 8003654:	f000 f85a 	bl	800370c <Kalman_getAngle>
 8003658:	eeb0 7a40 	vmov.f32	s14, s0
 800365c:	eef0 7a60 	vmov.f32	s15, s1
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800366c:	4690      	mov	r8, r2
 800366e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <MPU6050_Read_All+0x3c0>)
 8003678:	4640      	mov	r0, r8
 800367a:	4649      	mov	r1, r9
 800367c:	f7fd fa6c 	bl	8000b58 <__aeabi_dcmpgt>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800368c:	4614      	mov	r4, r2
 800368e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800369e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80036a2:	eeb0 1a47 	vmov.f32	s2, s14
 80036a6:	eef0 1a67 	vmov.f32	s3, s15
 80036aa:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80036ae:	4816      	ldr	r0, [pc, #88]	; (8003708 <MPU6050_Read_All+0x3c8>)
 80036b0:	f000 f82c 	bl	800370c <Kalman_getAngle>
 80036b4:	eeb0 7a40 	vmov.f32	s14, s0
 80036b8:	eef0 7a60 	vmov.f32	s15, s1
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
}
 80036c2:	bf00      	nop
 80036c4:	3740      	adds	r7, #64	; 0x40
 80036c6:	46bd      	mov	sp, r7
 80036c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036cc:	f3af 8000 	nop.w
 80036d0:	00000000 	.word	0x00000000
 80036d4:	40cc2900 	.word	0x40cc2900
 80036d8:	00000000 	.word	0x00000000
 80036dc:	40606000 	.word	0x40606000
 80036e0:	1a63c1f8 	.word	0x1a63c1f8
 80036e4:	404ca5dc 	.word	0x404ca5dc
 80036e8:	40d00000 	.word	0x40d00000
 80036ec:	43aa0000 	.word	0x43aa0000
 80036f0:	42121eb8 	.word	0x42121eb8
 80036f4:	20000eec 	.word	0x20000eec
 80036f8:	408f4000 	.word	0x408f4000
 80036fc:	c0568000 	.word	0xc0568000
 8003700:	40568000 	.word	0x40568000
 8003704:	20000058 	.word	0x20000058
 8003708:	20000010 	.word	0x20000010

0800370c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800370c:	b5b0      	push	{r4, r5, r7, lr}
 800370e:	b096      	sub	sp, #88	; 0x58
 8003710:	af00      	add	r7, sp, #0
 8003712:	61f8      	str	r0, [r7, #28]
 8003714:	ed87 0b04 	vstr	d0, [r7, #16]
 8003718:	ed87 1b02 	vstr	d1, [r7, #8]
 800371c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800372a:	f7fc fdcd 	bl	80002c8 <__aeabi_dsub>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800373c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003744:	f7fc ff78 	bl	8000638 <__aeabi_dmul>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4620      	mov	r0, r4
 800374e:	4629      	mov	r1, r5
 8003750:	f7fc fdbc 	bl	80002cc <__adddf3>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	69f9      	ldr	r1, [r7, #28]
 800375a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800376a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800376e:	f7fc ff63 	bl	8000638 <__aeabi_dmul>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4610      	mov	r0, r2
 8003778:	4619      	mov	r1, r3
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003780:	f7fc fda2 	bl	80002c8 <__aeabi_dsub>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003792:	f7fc fd99 	bl	80002c8 <__aeabi_dsub>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	f7fc fd92 	bl	80002cc <__adddf3>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037b4:	f7fc ff40 	bl	8000638 <__aeabi_dmul>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4620      	mov	r0, r4
 80037be:	4629      	mov	r1, r5
 80037c0:	f7fc fd84 	bl	80002cc <__adddf3>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	69f9      	ldr	r1, [r7, #28]
 80037ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80037da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037de:	f7fc ff2b 	bl	8000638 <__aeabi_dmul>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4620      	mov	r0, r4
 80037e8:	4629      	mov	r1, r5
 80037ea:	f7fc fd6d 	bl	80002c8 <__aeabi_dsub>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	69f9      	ldr	r1, [r7, #28]
 80037f4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003808:	f7fc ff16 	bl	8000638 <__aeabi_dmul>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4620      	mov	r0, r4
 8003812:	4629      	mov	r1, r5
 8003814:	f7fc fd58 	bl	80002c8 <__aeabi_dsub>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	69f9      	ldr	r1, [r7, #28]
 800381e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800382e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003832:	f7fc ff01 	bl	8000638 <__aeabi_dmul>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4620      	mov	r0, r4
 800383c:	4629      	mov	r1, r5
 800383e:	f7fc fd45 	bl	80002cc <__adddf3>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	69f9      	ldr	r1, [r7, #28]
 8003848:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003858:	f7fc fd38 	bl	80002cc <__adddf3>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800386a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800386e:	f7fd f80d 	bl	800088c <__aeabi_ddiv>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003880:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003884:	f7fd f802 	bl	800088c <__aeabi_ddiv>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003896:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800389a:	f7fc fd15 	bl	80002c8 <__aeabi_dsub>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80038ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80038b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038b4:	f7fc fec0 	bl	8000638 <__aeabi_dmul>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4620      	mov	r0, r4
 80038be:	4629      	mov	r1, r5
 80038c0:	f7fc fd04 	bl	80002cc <__adddf3>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	69f9      	ldr	r1, [r7, #28]
 80038ca:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80038d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038dc:	f7fc feac 	bl	8000638 <__aeabi_dmul>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4620      	mov	r0, r4
 80038e6:	4629      	mov	r1, r5
 80038e8:	f7fc fcf0 	bl	80002cc <__adddf3>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	69f9      	ldr	r1, [r7, #28]
 80038f2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80038fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003906:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003910:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003914:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003918:	f7fc fe8e 	bl	8000638 <__aeabi_dmul>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4620      	mov	r0, r4
 8003922:	4629      	mov	r1, r5
 8003924:	f7fc fcd0 	bl	80002c8 <__aeabi_dsub>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	69f9      	ldr	r1, [r7, #28]
 800392e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003938:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800393c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003940:	f7fc fe7a 	bl	8000638 <__aeabi_dmul>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4620      	mov	r0, r4
 800394a:	4629      	mov	r1, r5
 800394c:	f7fc fcbc 	bl	80002c8 <__aeabi_dsub>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	69f9      	ldr	r1, [r7, #28]
 8003956:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003960:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003968:	f7fc fe66 	bl	8000638 <__aeabi_dmul>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4620      	mov	r0, r4
 8003972:	4629      	mov	r1, r5
 8003974:	f7fc fca8 	bl	80002c8 <__aeabi_dsub>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	69f9      	ldr	r1, [r7, #28]
 800397e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003988:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800398c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003990:	f7fc fe52 	bl	8000638 <__aeabi_dmul>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4620      	mov	r0, r4
 800399a:	4629      	mov	r1, r5
 800399c:	f7fc fc94 	bl	80002c8 <__aeabi_dsub>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	69f9      	ldr	r1, [r7, #28]
 80039a6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80039b0:	ec43 2b17 	vmov	d7, r2, r3
};
 80039b4:	eeb0 0a47 	vmov.f32	s0, s14
 80039b8:	eef0 0a67 	vmov.f32	s1, s15
 80039bc:	3758      	adds	r7, #88	; 0x58
 80039be:	46bd      	mov	sp, r7
 80039c0:	bdb0      	pop	{r4, r5, r7, pc}
 80039c2:	0000      	movs	r0, r0
 80039c4:	0000      	movs	r0, r0
	...

080039c8 <adjust_servo_position_z>:
#include "servo.h"

void adjust_servo_position_z(TIM_HandleTypeDef *HTIMx, MPU6050_t *DataStruct)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]

	if(DataStruct->KalmanAngleZ < 0 && DataStruct->KalmanAngleZ > -90) // When Yaw angle is between-90~0 deg
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	f7fd f89c 	bl	8000b1c <__aeabi_dcmplt>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d026      	beq.n	8003a38 <adjust_servo_position_z+0x70>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	4b4a      	ldr	r3, [pc, #296]	; (8003b20 <adjust_servo_position_z+0x158>)
 80039f6:	f7fd f8af 	bl	8000b58 <__aeabi_dcmpgt>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <adjust_servo_position_z+0x70>
	{
		HTIMx->Instance->CCR2 = (DataStruct->KalmanAngleZ / -1.8) + 75;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8003a06:	a342      	add	r3, pc, #264	; (adr r3, 8003b10 <adjust_servo_position_z+0x148>)
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	f7fc ff3e 	bl	800088c <__aeabi_ddiv>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	a33f      	add	r3, pc, #252	; (adr r3, 8003b18 <adjust_servo_position_z+0x150>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f7fc fc55 	bl	80002cc <__adddf3>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681c      	ldr	r4, [r3, #0]
 8003a2e:	f7fd f8db 	bl	8000be8 <__aeabi_d2uiz>
 8003a32:	4603      	mov	r3, r0
 8003a34:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a36:	e064      	b.n	8003b02 <adjust_servo_position_z+0x13a>
	}
	else if(DataStruct->KalmanAngleZ <= -90) // When Yaw angle is less than -90 deg
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	4b37      	ldr	r3, [pc, #220]	; (8003b20 <adjust_servo_position_z+0x158>)
 8003a44:	f7fd f874 	bl	8000b30 <__aeabi_dcmple>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d004      	beq.n	8003a58 <adjust_servo_position_z+0x90>
	{
		HTIMx->Instance->CCR2 = 125;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	227d      	movs	r2, #125	; 0x7d
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else if(DataStruct->KalmanAngleZ == 0) // When Yaw angle is 0 deg
	{
		HTIMx->Instance->CCR2 = 75;
	}
}
 8003a56:	e054      	b.n	8003b02 <adjust_servo_position_z+0x13a>
	else if(DataStruct->KalmanAngleZ > 0 && DataStruct->KalmanAngleZ < 90) // When Yaw angle is between 0~90 deg
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	f7fd f877 	bl	8000b58 <__aeabi_dcmpgt>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d026      	beq.n	8003abe <adjust_servo_position_z+0xf6>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <adjust_servo_position_z+0x15c>)
 8003a7c:	f7fd f84e 	bl	8000b1c <__aeabi_dcmplt>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01b      	beq.n	8003abe <adjust_servo_position_z+0xf6>
		HTIMx->Instance->CCR2 = (DataStruct->KalmanAngleZ / -1.8) + 75;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8003a8c:	a320      	add	r3, pc, #128	; (adr r3, 8003b10 <adjust_servo_position_z+0x148>)
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f7fc fefb 	bl	800088c <__aeabi_ddiv>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	a31e      	add	r3, pc, #120	; (adr r3, 8003b18 <adjust_servo_position_z+0x150>)
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f7fc fc12 	bl	80002cc <__adddf3>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681c      	ldr	r4, [r3, #0]
 8003ab4:	f7fd f898 	bl	8000be8 <__aeabi_d2uiz>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	63a3      	str	r3, [r4, #56]	; 0x38
 8003abc:	e021      	b.n	8003b02 <adjust_servo_position_z+0x13a>
	else if(DataStruct->KalmanAngleZ >= 90) // When Yaw angle is greater than deg
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <adjust_servo_position_z+0x15c>)
 8003aca:	f7fd f83b 	bl	8000b44 <__aeabi_dcmpge>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <adjust_servo_position_z+0x116>
		HTIMx->Instance->CCR2 = 25;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2219      	movs	r2, #25
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003adc:	e011      	b.n	8003b02 <adjust_servo_position_z+0x13a>
	else if(DataStruct->KalmanAngleZ == 0) // When Yaw angle is 0 deg
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	f7fd f80c 	bl	8000b08 <__aeabi_dcmpeq>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d100      	bne.n	8003af8 <adjust_servo_position_z+0x130>
}
 8003af6:	e004      	b.n	8003b02 <adjust_servo_position_z+0x13a>
		HTIMx->Instance->CCR2 = 75;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	224b      	movs	r2, #75	; 0x4b
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b00:	e7ff      	b.n	8003b02 <adjust_servo_position_z+0x13a>
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd90      	pop	{r4, r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	f3af 8000 	nop.w
 8003b10:	cccccccd 	.word	0xcccccccd
 8003b14:	bffccccc 	.word	0xbffccccc
 8003b18:	00000000 	.word	0x00000000
 8003b1c:	4052c000 	.word	0x4052c000
 8003b20:	c0568000 	.word	0xc0568000
 8003b24:	40568000 	.word	0x40568000

08003b28 <adjust_servo_position_x>:

void adjust_servo_position_x(TIM_HandleTypeDef *HTIMx, MPU6050_t *DataStruct)
{
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
	if(DataStruct->KalmanAngleX > 0 && DataStruct->KalmanAngleX < 90) // When Pitch angle is between 0~90 deg
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	f7fd f80a 	bl	8000b58 <__aeabi_dcmpgt>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d026      	beq.n	8003b98 <adjust_servo_position_x+0x70>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	4b4a      	ldr	r3, [pc, #296]	; (8003c80 <adjust_servo_position_x+0x158>)
 8003b56:	f7fc ffe1 	bl	8000b1c <__aeabi_dcmplt>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01b      	beq.n	8003b98 <adjust_servo_position_x+0x70>
	{
		HTIMx->Instance->CCR1 = (DataStruct->KalmanAngleX / 1.8) + 75;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003b66:	a342      	add	r3, pc, #264	; (adr r3, 8003c70 <adjust_servo_position_x+0x148>)
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f7fc fe8e 	bl	800088c <__aeabi_ddiv>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	a33f      	add	r3, pc, #252	; (adr r3, 8003c78 <adjust_servo_position_x+0x150>)
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	f7fc fba5 	bl	80002cc <__adddf3>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681c      	ldr	r4, [r3, #0]
 8003b8e:	f7fd f82b 	bl	8000be8 <__aeabi_d2uiz>
 8003b92:	4603      	mov	r3, r0
 8003b94:	6363      	str	r3, [r4, #52]	; 0x34
 8003b96:	e064      	b.n	8003c62 <adjust_servo_position_x+0x13a>
	}
	else if(DataStruct->KalmanAngleX >= 90) // When Pitch angle is greate than 90 deg
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	4b37      	ldr	r3, [pc, #220]	; (8003c80 <adjust_servo_position_x+0x158>)
 8003ba4:	f7fc ffce 	bl	8000b44 <__aeabi_dcmpge>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d004      	beq.n	8003bb8 <adjust_servo_position_x+0x90>
	{
		HTIMx->Instance->CCR1 = 125;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	227d      	movs	r2, #125	; 0x7d
 8003bb4:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else if(DataStruct->KalmanAngleX == 0) // When Pitch angle is 0 deg
	{
		HTIMx->Instance->CCR1 = 75;
	}
}
 8003bb6:	e054      	b.n	8003c62 <adjust_servo_position_x+0x13a>
	else if(DataStruct->KalmanAngleX < 0 && DataStruct->KalmanAngleX > -90) // When Pitch angle is between -90~0 deg
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	f7fc ffa9 	bl	8000b1c <__aeabi_dcmplt>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d026      	beq.n	8003c1e <adjust_servo_position_x+0xf6>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <adjust_servo_position_x+0x15c>)
 8003bdc:	f7fc ffbc 	bl	8000b58 <__aeabi_dcmpgt>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01b      	beq.n	8003c1e <adjust_servo_position_x+0xf6>
		HTIMx->Instance->CCR1 = (DataStruct->KalmanAngleX / 1.8) + 75;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003bec:	a320      	add	r3, pc, #128	; (adr r3, 8003c70 <adjust_servo_position_x+0x148>)
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	f7fc fe4b 	bl	800088c <__aeabi_ddiv>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	a31e      	add	r3, pc, #120	; (adr r3, 8003c78 <adjust_servo_position_x+0x150>)
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f7fc fb62 	bl	80002cc <__adddf3>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681c      	ldr	r4, [r3, #0]
 8003c14:	f7fc ffe8 	bl	8000be8 <__aeabi_d2uiz>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	6363      	str	r3, [r4, #52]	; 0x34
 8003c1c:	e021      	b.n	8003c62 <adjust_servo_position_x+0x13a>
	else if(DataStruct->KalmanAngleX <= -90) // When Pitch angle is less than-90 deg
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <adjust_servo_position_x+0x15c>)
 8003c2a:	f7fc ff81 	bl	8000b30 <__aeabi_dcmple>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <adjust_servo_position_x+0x116>
		HTIMx->Instance->CCR1 = 25;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2219      	movs	r2, #25
 8003c3a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003c3c:	e011      	b.n	8003c62 <adjust_servo_position_x+0x13a>
	else if(DataStruct->KalmanAngleX == 0) // When Pitch angle is 0 deg
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	f7fc ff5c 	bl	8000b08 <__aeabi_dcmpeq>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d100      	bne.n	8003c58 <adjust_servo_position_x+0x130>
}
 8003c56:	e004      	b.n	8003c62 <adjust_servo_position_x+0x13a>
		HTIMx->Instance->CCR1 = 75;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	224b      	movs	r2, #75	; 0x4b
 8003c5e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003c60:	e7ff      	b.n	8003c62 <adjust_servo_position_x+0x13a>
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd90      	pop	{r4, r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	f3af 8000 	nop.w
 8003c70:	cccccccd 	.word	0xcccccccd
 8003c74:	3ffccccc 	.word	0x3ffccccc
 8003c78:	00000000 	.word	0x00000000
 8003c7c:	4052c000 	.word	0x4052c000
 8003c80:	40568000 	.word	0x40568000
 8003c84:	c0568000 	.word	0xc0568000

08003c88 <manual_adjust_servo_position_x>:

void manual_adjust_servo_position_x(TIM_HandleTypeDef *HTIMx, uint32_t x_value)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
	if (x_value >= 1905 && x_value <= 2000) // If joystick reading is between 2900 and 3200
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	f5b3 6fee 	cmp.w	r3, #1904	; 0x770
 8003c98:	d908      	bls.n	8003cac <manual_adjust_servo_position_x+0x24>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003ca0:	d804      	bhi.n	8003cac <manual_adjust_servo_position_x+0x24>
	{
		HTIMx->Instance->CCR1 = 75;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	224b      	movs	r2, #75	; 0x4b
 8003ca8:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else if(x_value < 1905) // If joystick reading is less than 2900
	{
		HTIMx->Instance->CCR1 = 75 - (float)((1905 - x_value) / (float)38);
	}
}
 8003caa:	e035      	b.n	8003d18 <manual_adjust_servo_position_x+0x90>
	else if(x_value > 2000) // If joystick reading is greater than 3200
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003cb2:	d916      	bls.n	8003ce2 <manual_adjust_servo_position_x+0x5a>
		HTIMx->Instance->CCR1 = 75 + (float)((x_value - 2000) / (float)42);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cc2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003d24 <manual_adjust_servo_position_x+0x9c>
 8003cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cca:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003d28 <manual_adjust_servo_position_x+0xa0>
 8003cce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cda:	ee17 2a90 	vmov	r2, s15
 8003cde:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003ce0:	e01a      	b.n	8003d18 <manual_adjust_servo_position_x+0x90>
	else if(x_value < 1905) // If joystick reading is less than 2900
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	f5b3 6fee 	cmp.w	r3, #1904	; 0x770
 8003ce8:	d816      	bhi.n	8003d18 <manual_adjust_servo_position_x+0x90>
		HTIMx->Instance->CCR1 = 75 - (float)((1905 - x_value) / (float)38);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	f5c3 63ee 	rsb	r3, r3, #1904	; 0x770
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cfa:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003d2c <manual_adjust_servo_position_x+0xa4>
 8003cfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d02:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003d28 <manual_adjust_servo_position_x+0xa0>
 8003d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d12:	ee17 2a90 	vmov	r2, s15
 8003d16:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	42280000 	.word	0x42280000
 8003d28:	42960000 	.word	0x42960000
 8003d2c:	42180000 	.word	0x42180000

08003d30 <manual_adjust_servo_position_z>:


void manual_adjust_servo_position_z(TIM_HandleTypeDef *HTIMx, uint32_t y_value)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
	if (y_value >= 1905 && y_value <= 2000) //If joystick reading is between 2900 and 3200
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f5b3 6fee 	cmp.w	r3, #1904	; 0x770
 8003d40:	d908      	bls.n	8003d54 <manual_adjust_servo_position_z+0x24>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d48:	d804      	bhi.n	8003d54 <manual_adjust_servo_position_z+0x24>
	{
		HTIMx->Instance->CCR2 = 75;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	224b      	movs	r2, #75	; 0x4b
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else if(y_value < 1905) // If joystick reading is less than 2900
	{
		HTIMx->Instance->CCR2 = 75 - (float)((1905 - y_value) / (float)38);
	};
}
 8003d52:	e035      	b.n	8003dc0 <manual_adjust_servo_position_z+0x90>
	else if(y_value > 2000) // If joystick reading is greater than 3200
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d5a:	d916      	bls.n	8003d8a <manual_adjust_servo_position_z+0x5a>
		HTIMx->Instance->CCR2 = 75 + (float)((y_value - 2000) / (float)42);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d6a:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003dcc <manual_adjust_servo_position_z+0x9c>
 8003d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d72:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003dd0 <manual_adjust_servo_position_z+0xa0>
 8003d76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d82:	ee17 2a90 	vmov	r2, s15
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d88:	e01a      	b.n	8003dc0 <manual_adjust_servo_position_z+0x90>
	else if(y_value < 1905) // If joystick reading is less than 2900
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f5b3 6fee 	cmp.w	r3, #1904	; 0x770
 8003d90:	d816      	bhi.n	8003dc0 <manual_adjust_servo_position_z+0x90>
		HTIMx->Instance->CCR2 = 75 - (float)((1905 - y_value) / (float)38);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f5c3 63ee 	rsb	r3, r3, #1904	; 0x770
 8003d98:	3301      	adds	r3, #1
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003da2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003dd4 <manual_adjust_servo_position_z+0xa4>
 8003da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003daa:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003dd0 <manual_adjust_servo_position_z+0xa0>
 8003dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dba:	ee17 2a90 	vmov	r2, s15
 8003dbe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	42280000 	.word	0x42280000
 8003dd0:	42960000 	.word	0x42960000
 8003dd4:	42180000 	.word	0x42180000

08003dd8 <width>:
SSD1306_Geometry display_geometry = SSD1306_GEOMETRY;

//
//  Get a width and height screen size
//
static const uint16_t width(void)  { return SSD1306_WIDTH; };
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	2340      	movs	r3, #64	; 0x40
 8003dee:	4618      	mov	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <ssd1306_GetWidth>:

uint16_t ssd1306_GetWidth(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 8003dfc:	2380      	movs	r3, #128	; 0x80
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <ssd1306_GetHeight>:

uint16_t ssd1306_GetHeight(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 8003e0c:	2340      	movs	r3, #64	; 0x40
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <ssd1306_SetColor>:
{
  return SSD1306.Color;
}

void ssd1306_SetColor(SSD1306_COLOR color)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
  SSD1306.Color = color;
 8003e22:	4a04      	ldr	r2, [pc, #16]	; (8003e34 <ssd1306_SetColor+0x1c>)
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	7153      	strb	r3, [r2, #5]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	200002c8 	.word	0x200002c8

08003e38 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* Check if LCD connected to I2C */
  if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8003e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e40:	2205      	movs	r2, #5
 8003e42:	2178      	movs	r1, #120	; 0x78
 8003e44:	4846      	ldr	r0, [pc, #280]	; (8003f60 <ssd1306_Init+0x128>)
 8003e46:	f002 fe3d 	bl	8006ac4 <HAL_I2C_IsDeviceReady>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d004      	beq.n	8003e5a <ssd1306_Init+0x22>
  {
    SSD1306.Initialized = 0;
 8003e50:	4b44      	ldr	r3, [pc, #272]	; (8003f64 <ssd1306_Init+0x12c>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	719a      	strb	r2, [r3, #6]
    /* Return false */
    return 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e07f      	b.n	8003f5a <ssd1306_Init+0x122>
  }

  // Wait for the screen to boot
  HAL_Delay(100);
 8003e5a:	2064      	movs	r0, #100	; 0x64
 8003e5c:	f001 f9ba 	bl	80051d4 <HAL_Delay>

  /* Init LCD */
  ssd1306_WriteCommand(DISPLAYOFF);
 8003e60:	20ae      	movs	r0, #174	; 0xae
 8003e62:	f000 f9d5 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8003e66:	20d5      	movs	r0, #213	; 0xd5
 8003e68:	f000 f9d2 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8003e6c:	20f0      	movs	r0, #240	; 0xf0
 8003e6e:	f000 f9cf 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETMULTIPLEX);
 8003e72:	20a8      	movs	r0, #168	; 0xa8
 8003e74:	f000 f9cc 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(height() - 1);
 8003e78:	f7ff ffb6 	bl	8003de8 <height>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 f9c3 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8003e8a:	20d3      	movs	r0, #211	; 0xd3
 8003e8c:	f000 f9c0 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x00);
 8003e90:	2000      	movs	r0, #0
 8003e92:	f000 f9bd 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETSTARTLINE);
 8003e96:	2040      	movs	r0, #64	; 0x40
 8003e98:	f000 f9ba 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(CHARGEPUMP);
 8003e9c:	208d      	movs	r0, #141	; 0x8d
 8003e9e:	f000 f9b7 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x14);
 8003ea2:	2014      	movs	r0, #20
 8003ea4:	f000 f9b4 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(MEMORYMODE);
 8003ea8:	2020      	movs	r0, #32
 8003eaa:	f000 f9b1 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x00);
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f000 f9ae 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SEGREMAP);
 8003eb4:	20a0      	movs	r0, #160	; 0xa0
 8003eb6:	f000 f9ab 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(COMSCANINC);
 8003eba:	20c0      	movs	r0, #192	; 0xc0
 8003ebc:	f000 f9a8 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETCOMPINS);
 8003ec0:	20da      	movs	r0, #218	; 0xda
 8003ec2:	f000 f9a5 	bl	8004210 <ssd1306_WriteCommand>

  if (display_geometry == GEOMETRY_128_64)
 8003ec6:	4b28      	ldr	r3, [pc, #160]	; (8003f68 <ssd1306_Init+0x130>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <ssd1306_Init+0x9e>
  {
    ssd1306_WriteCommand(0x12);
 8003ece:	2012      	movs	r0, #18
 8003ed0:	f000 f99e 	bl	8004210 <ssd1306_WriteCommand>
 8003ed4:	e006      	b.n	8003ee4 <ssd1306_Init+0xac>
  }
  else if (display_geometry == GEOMETRY_128_32)
 8003ed6:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <ssd1306_Init+0x130>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d102      	bne.n	8003ee4 <ssd1306_Init+0xac>
  {
    ssd1306_WriteCommand(0x02);
 8003ede:	2002      	movs	r0, #2
 8003ee0:	f000 f996 	bl	8004210 <ssd1306_WriteCommand>
  }

  ssd1306_WriteCommand(SETCONTRAST);
 8003ee4:	2081      	movs	r0, #129	; 0x81
 8003ee6:	f000 f993 	bl	8004210 <ssd1306_WriteCommand>

  if (display_geometry == GEOMETRY_128_64)
 8003eea:	4b1f      	ldr	r3, [pc, #124]	; (8003f68 <ssd1306_Init+0x130>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d103      	bne.n	8003efa <ssd1306_Init+0xc2>
  {
    ssd1306_WriteCommand(0xCF);
 8003ef2:	20cf      	movs	r0, #207	; 0xcf
 8003ef4:	f000 f98c 	bl	8004210 <ssd1306_WriteCommand>
 8003ef8:	e006      	b.n	8003f08 <ssd1306_Init+0xd0>
  }
  else if (display_geometry == GEOMETRY_128_32)
 8003efa:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <ssd1306_Init+0x130>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d102      	bne.n	8003f08 <ssd1306_Init+0xd0>
  {
    ssd1306_WriteCommand(0x8F);
 8003f02:	208f      	movs	r0, #143	; 0x8f
 8003f04:	f000 f984 	bl	8004210 <ssd1306_WriteCommand>
  }

  ssd1306_WriteCommand(SETPRECHARGE);
 8003f08:	20d9      	movs	r0, #217	; 0xd9
 8003f0a:	f000 f981 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0xF1);
 8003f0e:	20f1      	movs	r0, #241	; 0xf1
 8003f10:	f000 f97e 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8003f14:	20db      	movs	r0, #219	; 0xdb
 8003f16:	f000 f97b 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x40);          //0x40 default, to lower the contrast, put 0
 8003f1a:	2040      	movs	r0, #64	; 0x40
 8003f1c:	f000 f978 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8003f20:	20a4      	movs	r0, #164	; 0xa4
 8003f22:	f000 f975 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(NORMALDISPLAY);
 8003f26:	20a6      	movs	r0, #166	; 0xa6
 8003f28:	f000 f972 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x2e);            // stop scroll
 8003f2c:	202e      	movs	r0, #46	; 0x2e
 8003f2e:	f000 f96f 	bl	8004210 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(DISPLAYON);
 8003f32:	20af      	movs	r0, #175	; 0xaf
 8003f34:	f000 f96c 	bl	8004210 <ssd1306_WriteCommand>

  // Set default values for screen object
  SSD1306.CurrentX = 0;
 8003f38:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <ssd1306_Init+0x12c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	801a      	strh	r2, [r3, #0]
  SSD1306.CurrentY = 0;
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <ssd1306_Init+0x12c>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	805a      	strh	r2, [r3, #2]
  SSD1306.Color = Black;
 8003f44:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <ssd1306_Init+0x12c>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	715a      	strb	r2, [r3, #5]

  // Clear screen
  ssd1306_Clear();
 8003f4a:	f000 f955 	bl	80041f8 <ssd1306_Clear>

  // Continuous Update on
  ssd1306_ContUpdateEnable();
 8003f4e:	f000 f993 	bl	8004278 <ssd1306_ContUpdateEnable>

  // Flush buffer to screen
  ssd1306_UpdateScreen();

  SSD1306.Initialized = 1;
 8003f52:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <ssd1306_Init+0x12c>)
 8003f54:	2201      	movs	r2, #1
 8003f56:	719a      	strb	r2, [r3, #6]


  /* Return OK */
  return 1;
 8003f58:	2301      	movs	r3, #1
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000b28 	.word	0x20000b28
 8003f64:	200002c8 	.word	0x200002c8
 8003f68:	200006d0 	.word	0x200006d0

08003f6c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 8003f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	460a      	mov	r2, r1
 8003f76:	71fb      	strb	r3, [r7, #7]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	71bb      	strb	r3, [r7, #6]
  SSD1306_COLOR color = SSD1306.Color;
 8003f7c:	4b34      	ldr	r3, [pc, #208]	; (8004050 <ssd1306_DrawPixel+0xe4>)
 8003f7e:	795b      	ldrb	r3, [r3, #5]
 8003f80:	73fb      	strb	r3, [r7, #15]

  if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	b29c      	uxth	r4, r3
 8003f86:	f7ff ff37 	bl	8003df8 <ssd1306_GetWidth>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	429c      	cmp	r4, r3
 8003f8e:	d25a      	bcs.n	8004046 <ssd1306_DrawPixel+0xda>
 8003f90:	79bb      	ldrb	r3, [r7, #6]
 8003f92:	b29c      	uxth	r4, r3
 8003f94:	f7ff ff38 	bl	8003e08 <ssd1306_GetHeight>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	429c      	cmp	r4, r3
 8003f9c:	d253      	bcs.n	8004046 <ssd1306_DrawPixel+0xda>
    // Don't write outside the buffer
    return;
  }

  // Check if pixel should be inverted
  if (SSD1306.Inverted)
 8003f9e:	4b2c      	ldr	r3, [pc, #176]	; (8004050 <ssd1306_DrawPixel+0xe4>)
 8003fa0:	791b      	ldrb	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d006      	beq.n	8003fb4 <ssd1306_DrawPixel+0x48>
  {
    color = (SSD1306_COLOR) !color;
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf0c      	ite	eq
 8003fac:	2301      	moveq	r3, #1
 8003fae:	2300      	movne	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	73fb      	strb	r3, [r7, #15]
  }

  // Draw in the right color
  if (color == White)
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d121      	bne.n	8003ffe <ssd1306_DrawPixel+0x92>
  {
    SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8003fba:	79fc      	ldrb	r4, [r7, #7]
 8003fbc:	79bb      	ldrb	r3, [r7, #6]
 8003fbe:	08db      	lsrs	r3, r3, #3
 8003fc0:	b2dd      	uxtb	r5, r3
 8003fc2:	462e      	mov	r6, r5
 8003fc4:	f7ff ff08 	bl	8003dd8 <width>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	4603      	mov	r3, r0
 8003fce:	fb03 f306 	mul.w	r3, r3, r6
 8003fd2:	4423      	add	r3, r4
 8003fd4:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <ssd1306_DrawPixel+0xe8>)
 8003fd6:	5cd3      	ldrb	r3, [r2, r3]
 8003fd8:	b25a      	sxtb	r2, r3
 8003fda:	79bb      	ldrb	r3, [r7, #6]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	b25b      	sxtb	r3, r3
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	b259      	sxtb	r1, r3
 8003fec:	79fa      	ldrb	r2, [r7, #7]
 8003fee:	462b      	mov	r3, r5
 8003ff0:	fb00 f303 	mul.w	r3, r0, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	b2c9      	uxtb	r1, r1
 8003ff8:	4a16      	ldr	r2, [pc, #88]	; (8004054 <ssd1306_DrawPixel+0xe8>)
 8003ffa:	54d1      	strb	r1, [r2, r3]
 8003ffc:	e024      	b.n	8004048 <ssd1306_DrawPixel+0xdc>
  }
  else
  {
    SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8003ffe:	79fc      	ldrb	r4, [r7, #7]
 8004000:	79bb      	ldrb	r3, [r7, #6]
 8004002:	08db      	lsrs	r3, r3, #3
 8004004:	b2dd      	uxtb	r5, r3
 8004006:	462e      	mov	r6, r5
 8004008:	f7ff fee6 	bl	8003dd8 <width>
 800400c:	4603      	mov	r3, r0
 800400e:	4618      	mov	r0, r3
 8004010:	4603      	mov	r3, r0
 8004012:	fb03 f306 	mul.w	r3, r3, r6
 8004016:	4423      	add	r3, r4
 8004018:	4a0e      	ldr	r2, [pc, #56]	; (8004054 <ssd1306_DrawPixel+0xe8>)
 800401a:	5cd3      	ldrb	r3, [r2, r3]
 800401c:	b25a      	sxtb	r2, r3
 800401e:	79bb      	ldrb	r3, [r7, #6]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	2101      	movs	r1, #1
 8004026:	fa01 f303 	lsl.w	r3, r1, r3
 800402a:	b25b      	sxtb	r3, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	b25b      	sxtb	r3, r3
 8004030:	4013      	ands	r3, r2
 8004032:	b259      	sxtb	r1, r3
 8004034:	79fa      	ldrb	r2, [r7, #7]
 8004036:	462b      	mov	r3, r5
 8004038:	fb00 f303 	mul.w	r3, r0, r3
 800403c:	4413      	add	r3, r2
 800403e:	b2c9      	uxtb	r1, r1
 8004040:	4a04      	ldr	r2, [pc, #16]	; (8004054 <ssd1306_DrawPixel+0xe8>)
 8004042:	54d1      	strb	r1, [r2, r3]
 8004044:	e000      	b.n	8004048 <ssd1306_DrawPixel+0xdc>
    return;
 8004046:	bf00      	nop
  }
}
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800404e:	bf00      	nop
 8004050:	200002c8 	.word	0x200002c8
 8004054:	200002d0 	.word	0x200002d0

08004058 <ssd1306_WriteChar>:
    pY += 8;
  }
}

char ssd1306_WriteChar(char ch, FontDef Font)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	e883 0006 	stmia.w	r3, {r1, r2}
 8004064:	4603      	mov	r3, r0
 8004066:	73fb      	strb	r3, [r7, #15]
  uint32_t i, b, j;

  // Check remaining space on current line
  if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004068:	f7ff feb6 	bl	8003dd8 <width>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	4b41      	ldr	r3, [pc, #260]	; (8004178 <ssd1306_WriteChar+0x120>)
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	793b      	ldrb	r3, [r7, #4]
 8004078:	440b      	add	r3, r1
 800407a:	429a      	cmp	r2, r3
 800407c:	dd0a      	ble.n	8004094 <ssd1306_WriteChar+0x3c>
    height() <= (SSD1306.CurrentY + Font.FontHeight))
 800407e:	f7ff feb3 	bl	8003de8 <height>
 8004082:	4603      	mov	r3, r0
 8004084:	461a      	mov	r2, r3
 8004086:	4b3c      	ldr	r3, [pc, #240]	; (8004178 <ssd1306_WriteChar+0x120>)
 8004088:	885b      	ldrh	r3, [r3, #2]
 800408a:	4619      	mov	r1, r3
 800408c:	797b      	ldrb	r3, [r7, #5]
 800408e:	440b      	add	r3, r1
  if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	dc01      	bgt.n	8004098 <ssd1306_WriteChar+0x40>
  {
    // Not enough space on current line
    return 0;
 8004094:	2300      	movs	r3, #0
 8004096:	e06a      	b.n	800416e <ssd1306_WriteChar+0x116>
  }

  // Use the font to write
  for (i = 0; i < Font.FontHeight; i++)
 8004098:	2300      	movs	r3, #0
 800409a:	61fb      	str	r3, [r7, #28]
 800409c:	e059      	b.n	8004152 <ssd1306_WriteChar+0xfa>
  {
    b = Font.data[(ch - 32) * Font.FontHeight + i];
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	3b20      	subs	r3, #32
 80040a4:	7979      	ldrb	r1, [r7, #5]
 80040a6:	fb01 f303 	mul.w	r3, r1, r3
 80040aa:	4619      	mov	r1, r3
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	440b      	add	r3, r1
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4413      	add	r3, r2
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	617b      	str	r3, [r7, #20]
    for (j = 0; j < Font.FontWidth; j++)
 80040b8:	2300      	movs	r3, #0
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	e041      	b.n	8004142 <ssd1306_WriteChar+0xea>
    {
      if ((b << j) & 0x8000)
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d011      	beq.n	80040f2 <ssd1306_WriteChar+0x9a>
      {
        ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 80040ce:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <ssd1306_WriteChar+0x120>)
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	4413      	add	r3, r2
 80040da:	b2d8      	uxtb	r0, r3
 80040dc:	4b26      	ldr	r3, [pc, #152]	; (8004178 <ssd1306_WriteChar+0x120>)
 80040de:	885b      	ldrh	r3, [r3, #2]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	4619      	mov	r1, r3
 80040ec:	f7ff ff3e 	bl	8003f6c <ssd1306_DrawPixel>
 80040f0:	e024      	b.n	800413c <ssd1306_WriteChar+0xe4>
      }
      else
      {
        SSD1306.Color = !SSD1306.Color;
 80040f2:	4b21      	ldr	r3, [pc, #132]	; (8004178 <ssd1306_WriteChar+0x120>)
 80040f4:	795b      	ldrb	r3, [r3, #5]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	bf0c      	ite	eq
 80040fa:	2301      	moveq	r3, #1
 80040fc:	2300      	movne	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <ssd1306_WriteChar+0x120>)
 8004104:	715a      	strb	r2, [r3, #5]
        ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8004106:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <ssd1306_WriteChar+0x120>)
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b2da      	uxtb	r2, r3
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	4413      	add	r3, r2
 8004112:	b2d8      	uxtb	r0, r3
 8004114:	4b18      	ldr	r3, [pc, #96]	; (8004178 <ssd1306_WriteChar+0x120>)
 8004116:	885b      	ldrh	r3, [r3, #2]
 8004118:	b2da      	uxtb	r2, r3
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	4413      	add	r3, r2
 8004120:	b2db      	uxtb	r3, r3
 8004122:	4619      	mov	r1, r3
 8004124:	f7ff ff22 	bl	8003f6c <ssd1306_DrawPixel>
        SSD1306.Color = !SSD1306.Color;
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <ssd1306_WriteChar+0x120>)
 800412a:	795b      	ldrb	r3, [r3, #5]
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf0c      	ite	eq
 8004130:	2301      	moveq	r3, #1
 8004132:	2300      	movne	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	461a      	mov	r2, r3
 8004138:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <ssd1306_WriteChar+0x120>)
 800413a:	715a      	strb	r2, [r3, #5]
    for (j = 0; j < Font.FontWidth; j++)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	3301      	adds	r3, #1
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	793b      	ldrb	r3, [r7, #4]
 8004144:	461a      	mov	r2, r3
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	4293      	cmp	r3, r2
 800414a:	d3b8      	bcc.n	80040be <ssd1306_WriteChar+0x66>
  for (i = 0; i < Font.FontHeight; i++)
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	3301      	adds	r3, #1
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	797b      	ldrb	r3, [r7, #5]
 8004154:	461a      	mov	r2, r3
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4293      	cmp	r3, r2
 800415a:	d3a0      	bcc.n	800409e <ssd1306_WriteChar+0x46>
      }
    }
  }

  // The current space is now taken
  SSD1306.CurrentX += Font.FontWidth;
 800415c:	4b06      	ldr	r3, [pc, #24]	; (8004178 <ssd1306_WriteChar+0x120>)
 800415e:	881a      	ldrh	r2, [r3, #0]
 8004160:	793b      	ldrb	r3, [r7, #4]
 8004162:	b29b      	uxth	r3, r3
 8004164:	4413      	add	r3, r2
 8004166:	b29a      	uxth	r2, r3
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <ssd1306_WriteChar+0x120>)
 800416a:	801a      	strh	r2, [r3, #0]

  // Return written char for validation
  return ch;
 800416c:	7bfb      	ldrb	r3, [r7, #15]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	200002c8 	.word	0x200002c8

0800417c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	1d3b      	adds	r3, r7, #4
 8004186:	e883 0006 	stmia.w	r3, {r1, r2}
  // Write until null-byte
  while (*str)
 800418a:	e012      	b.n	80041b2 <ssd1306_WriteString+0x36>
  {
    if (ssd1306_WriteChar(*str, Font) != *str)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	7818      	ldrb	r0, [r3, #0]
 8004190:	1d3b      	adds	r3, r7, #4
 8004192:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004196:	f7ff ff5f 	bl	8004058 <ssd1306_WriteChar>
 800419a:	4603      	mov	r3, r0
 800419c:	461a      	mov	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d002      	beq.n	80041ac <ssd1306_WriteString+0x30>
    {
      // Char could not be written
      return *str;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	e008      	b.n	80041be <ssd1306_WriteString+0x42>
    }

    // Next char
    str++;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3301      	adds	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
  while (*str)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e8      	bne.n	800418c <ssd1306_WriteString+0x10>
  }

  // Everything ok
  return *str;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	781b      	ldrb	r3, [r3, #0]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <ssd1306_SetCursor>:

//
//  Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	460a      	mov	r2, r1
 80041d2:	71fb      	strb	r3, [r7, #7]
 80041d4:	4613      	mov	r3, r2
 80041d6:	71bb      	strb	r3, [r7, #6]
  SSD1306.CurrentX = x;
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	b29a      	uxth	r2, r3
 80041dc:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <ssd1306_SetCursor+0x2c>)
 80041de:	801a      	strh	r2, [r3, #0]
  SSD1306.CurrentY = y;
 80041e0:	79bb      	ldrb	r3, [r7, #6]
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <ssd1306_SetCursor+0x2c>)
 80041e6:	805a      	strh	r2, [r3, #2]
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	200002c8 	.word	0x200002c8

080041f8 <ssd1306_Clear>:

void ssd1306_Clear()
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 80041fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004200:	2100      	movs	r1, #0
 8004202:	4802      	ldr	r0, [pc, #8]	; (800420c <ssd1306_Clear+0x14>)
 8004204:	f007 f98c 	bl	800b520 <memset>
}
 8004208:	bf00      	nop
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200002d0 	.word	0x200002d0

08004210 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
void ssd1306_WriteCommand(uint8_t command)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af02      	add	r7, sp, #8
 8004216:	4603      	mov	r3, r0
 8004218:	71fb      	strb	r3, [r7, #7]
  if(ssd1306_updatestatus)
 800421a:	4b13      	ldr	r3, [pc, #76]	; (8004268 <ssd1306_WriteCommand+0x58>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d009      	beq.n	8004238 <ssd1306_WriteCommand+0x28>
  {
    while(ssd1306_command);
 8004224:	bf00      	nop
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <ssd1306_WriteCommand+0x5c>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1fa      	bne.n	8004226 <ssd1306_WriteCommand+0x16>
    ssd1306_command = command;
 8004230:	4a0e      	ldr	r2, [pc, #56]	; (800426c <ssd1306_WriteCommand+0x5c>)
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	7013      	strb	r3, [r2, #0]
  {
    while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY) { };
    i2c_command = command;
    HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &i2c_command, 1);
  }
}
 8004236:	e013      	b.n	8004260 <ssd1306_WriteCommand+0x50>
    while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY) { };
 8004238:	bf00      	nop
 800423a:	480d      	ldr	r0, [pc, #52]	; (8004270 <ssd1306_WriteCommand+0x60>)
 800423c:	f002 ffe6 	bl	800720c <HAL_I2C_GetState>
 8004240:	4603      	mov	r3, r0
 8004242:	2b20      	cmp	r3, #32
 8004244:	d1f9      	bne.n	800423a <ssd1306_WriteCommand+0x2a>
    i2c_command = command;
 8004246:	4a0b      	ldr	r2, [pc, #44]	; (8004274 <ssd1306_WriteCommand+0x64>)
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	7013      	strb	r3, [r2, #0]
    HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &i2c_command, 1);
 800424c:	2301      	movs	r3, #1
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	4b08      	ldr	r3, [pc, #32]	; (8004274 <ssd1306_WriteCommand+0x64>)
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2301      	movs	r3, #1
 8004256:	2200      	movs	r2, #0
 8004258:	2178      	movs	r1, #120	; 0x78
 800425a:	4805      	ldr	r0, [pc, #20]	; (8004270 <ssd1306_WriteCommand+0x60>)
 800425c:	f002 fad0 	bl	8006800 <HAL_I2C_Mem_Write_DMA>
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	200006d1 	.word	0x200006d1
 800426c:	200006d2 	.word	0x200006d2
 8004270:	20000b28 	.word	0x20000b28
 8004274:	200006d3 	.word	0x200006d3

08004278 <ssd1306_ContUpdateEnable>:

void ssd1306_ContUpdateEnable(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af02      	add	r7, sp, #8
  if(!ssd1306_ContUpdate)
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <ssd1306_ContUpdateEnable+0x50>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11c      	bne.n	80042c2 <ssd1306_ContUpdateEnable+0x4a>
  {
    while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY) { };
 8004288:	bf00      	nop
 800428a:	4810      	ldr	r0, [pc, #64]	; (80042cc <ssd1306_ContUpdateEnable+0x54>)
 800428c:	f002 ffbe 	bl	800720c <HAL_I2C_GetState>
 8004290:	4603      	mov	r3, r0
 8004292:	2b20      	cmp	r3, #32
 8004294:	d1f9      	bne.n	800428a <ssd1306_ContUpdateEnable+0x12>
    ssd1306_updatestatus = SSD1306_HEIGHT;
 8004296:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <ssd1306_ContUpdateEnable+0x58>)
 8004298:	2240      	movs	r2, #64	; 0x40
 800429a:	701a      	strb	r2, [r3, #0]
    ssd1306_updateend = SSD1306_HEIGHT + (SSD1306_HEIGHT / 2);
 800429c:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <ssd1306_ContUpdateEnable+0x5c>)
 800429e:	2260      	movs	r2, #96	; 0x60
 80042a0:	701a      	strb	r2, [r3, #0]
    i2c_command = 0xB0;
 80042a2:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <ssd1306_ContUpdateEnable+0x60>)
 80042a4:	22b0      	movs	r2, #176	; 0xb0
 80042a6:	701a      	strb	r2, [r3, #0]
    ssd1306_ContUpdate = 1;
 80042a8:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <ssd1306_ContUpdateEnable+0x50>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &i2c_command, 1);
 80042ae:	2301      	movs	r3, #1
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <ssd1306_ContUpdateEnable+0x60>)
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	2301      	movs	r3, #1
 80042b8:	2200      	movs	r2, #0
 80042ba:	2178      	movs	r1, #120	; 0x78
 80042bc:	4803      	ldr	r0, [pc, #12]	; (80042cc <ssd1306_ContUpdateEnable+0x54>)
 80042be:	f002 fa9f 	bl	8006800 <HAL_I2C_Mem_Write_DMA>
  }
}
 80042c2:	bf00      	nop
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	200006d4 	.word	0x200006d4
 80042cc:	20000b28 	.word	0x20000b28
 80042d0:	200006d1 	.word	0x200006d1
 80042d4:	20000ef0 	.word	0x20000ef0
 80042d8:	200006d3 	.word	0x200006d3

080042dc <HAL_I2C_MemTxCpltCallback>:
    while(ssd1306_updatestatus) { };
  }
}

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b087      	sub	sp, #28
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t phase;
  uint8_t  raster;
  if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b53      	ldr	r3, [pc, #332]	; (8004438 <HAL_I2C_MemTxCpltCallback+0x15c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	f040 809f 	bne.w	8004430 <HAL_I2C_MemTxCpltCallback+0x154>
  {
    if(ssd1306_updatestatus)
 80042f2:	4b52      	ldr	r3, [pc, #328]	; (800443c <HAL_I2C_MemTxCpltCallback+0x160>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8099 	beq.w	8004430 <HAL_I2C_MemTxCpltCallback+0x154>
    {
      if(ssd1306_updatestatus < ssd1306_updateend)
 80042fe:	4b4f      	ldr	r3, [pc, #316]	; (800443c <HAL_I2C_MemTxCpltCallback+0x160>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	4b4e      	ldr	r3, [pc, #312]	; (8004440 <HAL_I2C_MemTxCpltCallback+0x164>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	429a      	cmp	r2, r3
 800430c:	d264      	bcs.n	80043d8 <HAL_I2C_MemTxCpltCallback+0xfc>
      {
        ssd1306_updatestatus++;
 800430e:	4b4b      	ldr	r3, [pc, #300]	; (800443c <HAL_I2C_MemTxCpltCallback+0x160>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	3301      	adds	r3, #1
 8004316:	b2da      	uxtb	r2, r3
 8004318:	4b48      	ldr	r3, [pc, #288]	; (800443c <HAL_I2C_MemTxCpltCallback+0x160>)
 800431a:	701a      	strb	r2, [r3, #0]
        phase = ssd1306_updatestatus & 3;
 800431c:	4b47      	ldr	r3, [pc, #284]	; (800443c <HAL_I2C_MemTxCpltCallback+0x160>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	60fb      	str	r3, [r7, #12]
        if(phase == 3)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b03      	cmp	r3, #3
 800432c:	d12c      	bne.n	8004388 <HAL_I2C_MemTxCpltCallback+0xac>
        {
          raster = (ssd1306_updatestatus >> 2) & (SSD1306_HEIGHT / 8 - 1);
 800432e:	4b43      	ldr	r3, [pc, #268]	; (800443c <HAL_I2C_MemTxCpltCallback+0x160>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	72fb      	strb	r3, [r7, #11]
          if(ssd1306_RasterIntRegs & (1 << raster))
 800433e:	4b41      	ldr	r3, [pc, #260]	; (8004444 <HAL_I2C_MemTxCpltCallback+0x168>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	7afb      	ldrb	r3, [r7, #11]
 8004348:	fa42 f303 	asr.w	r3, r2, r3
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_I2C_MemTxCpltCallback+0x80>
            ssd1306_RasterIntCallback(raster);
 8004354:	7afb      	ldrb	r3, [r7, #11]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 f87e 	bl	8004458 <ssd1306_RasterIntCallback>
          HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * ((ssd1306_updatestatus >> 2) & (SSD1306_HEIGHT / 8 - 1))], width());
 800435c:	4b37      	ldr	r3, [pc, #220]	; (800443c <HAL_I2C_MemTxCpltCallback+0x160>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	089b      	lsrs	r3, r3, #2
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	01db      	lsls	r3, r3, #7
 800436c:	4a36      	ldr	r2, [pc, #216]	; (8004448 <HAL_I2C_MemTxCpltCallback+0x16c>)
 800436e:	189c      	adds	r4, r3, r2
 8004370:	f7ff fd32 	bl	8003dd8 <width>
 8004374:	4603      	mov	r3, r0
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	9400      	str	r4, [sp, #0]
 800437a:	2301      	movs	r3, #1
 800437c:	2240      	movs	r2, #64	; 0x40
 800437e:	2178      	movs	r1, #120	; 0x78
 8004380:	482d      	ldr	r0, [pc, #180]	; (8004438 <HAL_I2C_MemTxCpltCallback+0x15c>)
 8004382:	f002 fa3d 	bl	8006800 <HAL_I2C_Mem_Write_DMA>
        if(ssd1306_updatestatus)
          HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &i2c_command, 1);
      }
    }
  }
}
 8004386:	e053      	b.n	8004430 <HAL_I2C_MemTxCpltCallback+0x154>
          if(phase == 0)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10c      	bne.n	80043a8 <HAL_I2C_MemTxCpltCallback+0xcc>
            i2c_command = 0xB0 + ((ssd1306_updatestatus >> 2) & (SSD1306_HEIGHT / 8 - 1));
 800438e:	4b2b      	ldr	r3, [pc, #172]	; (800443c <HAL_I2C_MemTxCpltCallback+0x160>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	089b      	lsrs	r3, r3, #2
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	b2db      	uxtb	r3, r3
 800439e:	3b50      	subs	r3, #80	; 0x50
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4b2a      	ldr	r3, [pc, #168]	; (800444c <HAL_I2C_MemTxCpltCallback+0x170>)
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e00c      	b.n	80043c2 <HAL_I2C_MemTxCpltCallback+0xe6>
          else if(phase == 1)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d103      	bne.n	80043b6 <HAL_I2C_MemTxCpltCallback+0xda>
            i2c_command = SETLOWCOLUMN;
 80043ae:	4b27      	ldr	r3, [pc, #156]	; (800444c <HAL_I2C_MemTxCpltCallback+0x170>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
 80043b4:	e005      	b.n	80043c2 <HAL_I2C_MemTxCpltCallback+0xe6>
          else if(phase == 2)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d102      	bne.n	80043c2 <HAL_I2C_MemTxCpltCallback+0xe6>
            i2c_command = SETHIGHCOLUMN;
 80043bc:	4b23      	ldr	r3, [pc, #140]	; (800444c <HAL_I2C_MemTxCpltCallback+0x170>)
 80043be:	2210      	movs	r2, #16
 80043c0:	701a      	strb	r2, [r3, #0]
          HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &i2c_command, 1);
 80043c2:	2301      	movs	r3, #1
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	4b21      	ldr	r3, [pc, #132]	; (800444c <HAL_I2C_MemTxCpltCallback+0x170>)
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	2301      	movs	r3, #1
 80043cc:	2200      	movs	r2, #0
 80043ce:	2178      	movs	r1, #120	; 0x78
 80043d0:	4819      	ldr	r0, [pc, #100]	; (8004438 <HAL_I2C_MemTxCpltCallback+0x15c>)
 80043d2:	f002 fa15 	bl	8006800 <HAL_I2C_Mem_Write_DMA>
}
 80043d6:	e02b      	b.n	8004430 <HAL_I2C_MemTxCpltCallback+0x154>
        if(ssd1306_command)
 80043d8:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <HAL_I2C_MemTxCpltCallback+0x174>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_I2C_MemTxCpltCallback+0x118>
          i2c_command = ssd1306_command;
 80043e2:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <HAL_I2C_MemTxCpltCallback+0x174>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	4b18      	ldr	r3, [pc, #96]	; (800444c <HAL_I2C_MemTxCpltCallback+0x170>)
 80043ea:	701a      	strb	r2, [r3, #0]
          ssd1306_command = 0;
 80043ec:	4b18      	ldr	r3, [pc, #96]	; (8004450 <HAL_I2C_MemTxCpltCallback+0x174>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	e00e      	b.n	8004412 <HAL_I2C_MemTxCpltCallback+0x136>
          if(ssd1306_ContUpdate)
 80043f4:	4b17      	ldr	r3, [pc, #92]	; (8004454 <HAL_I2C_MemTxCpltCallback+0x178>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d006      	beq.n	800440c <HAL_I2C_MemTxCpltCallback+0x130>
            i2c_command = 0xB0;
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <HAL_I2C_MemTxCpltCallback+0x170>)
 8004400:	22b0      	movs	r2, #176	; 0xb0
 8004402:	701a      	strb	r2, [r3, #0]
            ssd1306_updatestatus = SSD1306_HEIGHT;
 8004404:	4b0d      	ldr	r3, [pc, #52]	; (800443c <HAL_I2C_MemTxCpltCallback+0x160>)
 8004406:	2240      	movs	r2, #64	; 0x40
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e002      	b.n	8004412 <HAL_I2C_MemTxCpltCallback+0x136>
            ssd1306_updatestatus = 0;
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_I2C_MemTxCpltCallback+0x160>)
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
        if(ssd1306_updatestatus)
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <HAL_I2C_MemTxCpltCallback+0x160>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d009      	beq.n	8004430 <HAL_I2C_MemTxCpltCallback+0x154>
          HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &i2c_command, 1);
 800441c:	2301      	movs	r3, #1
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_I2C_MemTxCpltCallback+0x170>)
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	2301      	movs	r3, #1
 8004426:	2200      	movs	r2, #0
 8004428:	2178      	movs	r1, #120	; 0x78
 800442a:	4803      	ldr	r0, [pc, #12]	; (8004438 <HAL_I2C_MemTxCpltCallback+0x15c>)
 800442c:	f002 f9e8 	bl	8006800 <HAL_I2C_Mem_Write_DMA>
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	bd90      	pop	{r4, r7, pc}
 8004438:	20000b28 	.word	0x20000b28
 800443c:	200006d1 	.word	0x200006d1
 8004440:	20000ef0 	.word	0x20000ef0
 8004444:	200006d5 	.word	0x200006d5
 8004448:	200002d0 	.word	0x200002d0
 800444c:	200006d3 	.word	0x200006d3
 8004450:	200006d2 	.word	0x200006d2
 8004454:	200006d4 	.word	0x200006d4

08004458 <ssd1306_RasterIntCallback>:
{
  ssd1306_RasterIntRegs = r;
}

__weak void ssd1306_RasterIntCallback(uint8_t r)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	71fb      	strb	r3, [r7, #7]

}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004476:	2300      	movs	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <HAL_MspInit+0x4c>)
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	4a0f      	ldr	r2, [pc, #60]	; (80044bc <HAL_MspInit+0x4c>)
 8004480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004484:	6453      	str	r3, [r2, #68]	; 0x44
 8004486:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <HAL_MspInit+0x4c>)
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	603b      	str	r3, [r7, #0]
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <HAL_MspInit+0x4c>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	4a08      	ldr	r2, [pc, #32]	; (80044bc <HAL_MspInit+0x4c>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6413      	str	r3, [r2, #64]	; 0x40
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_MspInit+0x4c>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80044ae:	2007      	movs	r0, #7
 80044b0:	f000 ff84 	bl	80053bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40023800 	.word	0x40023800

080044c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	; 0x30
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c8:	f107 031c 	add.w	r3, r7, #28
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a79      	ldr	r2, [pc, #484]	; (80046c4 <HAL_I2C_MspInit+0x204>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d15b      	bne.n	800459a <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044e2:	2300      	movs	r3, #0
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	4b78      	ldr	r3, [pc, #480]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	4a77      	ldr	r2, [pc, #476]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 80044ec:	f043 0302 	orr.w	r3, r3, #2
 80044f0:	6313      	str	r3, [r2, #48]	; 0x30
 80044f2:	4b75      	ldr	r3, [pc, #468]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004504:	2312      	movs	r3, #18
 8004506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	2300      	movs	r3, #0
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800450c:	2303      	movs	r3, #3
 800450e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004510:	2304      	movs	r3, #4
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004514:	f107 031c 	add.w	r3, r7, #28
 8004518:	4619      	mov	r1, r3
 800451a:	486c      	ldr	r0, [pc, #432]	; (80046cc <HAL_I2C_MspInit+0x20c>)
 800451c:	f001 fb5e 	bl	8005bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	4b68      	ldr	r3, [pc, #416]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	4a67      	ldr	r2, [pc, #412]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 800452a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800452e:	6413      	str	r3, [r2, #64]	; 0x40
 8004530:	4b65      	ldr	r3, [pc, #404]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800453c:	4b64      	ldr	r3, [pc, #400]	; (80046d0 <HAL_I2C_MspInit+0x210>)
 800453e:	4a65      	ldr	r2, [pc, #404]	; (80046d4 <HAL_I2C_MspInit+0x214>)
 8004540:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004542:	4b63      	ldr	r3, [pc, #396]	; (80046d0 <HAL_I2C_MspInit+0x210>)
 8004544:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004548:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800454a:	4b61      	ldr	r3, [pc, #388]	; (80046d0 <HAL_I2C_MspInit+0x210>)
 800454c:	2240      	movs	r2, #64	; 0x40
 800454e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004550:	4b5f      	ldr	r3, [pc, #380]	; (80046d0 <HAL_I2C_MspInit+0x210>)
 8004552:	2200      	movs	r2, #0
 8004554:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004556:	4b5e      	ldr	r3, [pc, #376]	; (80046d0 <HAL_I2C_MspInit+0x210>)
 8004558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800455c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800455e:	4b5c      	ldr	r3, [pc, #368]	; (80046d0 <HAL_I2C_MspInit+0x210>)
 8004560:	2200      	movs	r2, #0
 8004562:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004564:	4b5a      	ldr	r3, [pc, #360]	; (80046d0 <HAL_I2C_MspInit+0x210>)
 8004566:	2200      	movs	r2, #0
 8004568:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800456a:	4b59      	ldr	r3, [pc, #356]	; (80046d0 <HAL_I2C_MspInit+0x210>)
 800456c:	2200      	movs	r2, #0
 800456e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004570:	4b57      	ldr	r3, [pc, #348]	; (80046d0 <HAL_I2C_MspInit+0x210>)
 8004572:	2200      	movs	r2, #0
 8004574:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004576:	4b56      	ldr	r3, [pc, #344]	; (80046d0 <HAL_I2C_MspInit+0x210>)
 8004578:	2200      	movs	r2, #0
 800457a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800457c:	4854      	ldr	r0, [pc, #336]	; (80046d0 <HAL_I2C_MspInit+0x210>)
 800457e:	f000 ff81 	bl	8005484 <HAL_DMA_Init>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8004588:	f7fe fcf2 	bl	8002f70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a50      	ldr	r2, [pc, #320]	; (80046d0 <HAL_I2C_MspInit+0x210>)
 8004590:	635a      	str	r2, [r3, #52]	; 0x34
 8004592:	4a4f      	ldr	r2, [pc, #316]	; (80046d0 <HAL_I2C_MspInit+0x210>)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */
  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004598:	e08f      	b.n	80046ba <HAL_I2C_MspInit+0x1fa>
  else if(hi2c->Instance==I2C2)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a4e      	ldr	r2, [pc, #312]	; (80046d8 <HAL_I2C_MspInit+0x218>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	f040 808a 	bne.w	80046ba <HAL_I2C_MspInit+0x1fa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	4b47      	ldr	r3, [pc, #284]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	4a46      	ldr	r2, [pc, #280]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 80045b0:	f043 0302 	orr.w	r3, r3, #2
 80045b4:	6313      	str	r3, [r2, #48]	; 0x30
 80045b6:	4b44      	ldr	r3, [pc, #272]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	4b40      	ldr	r3, [pc, #256]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	4a3f      	ldr	r2, [pc, #252]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 80045cc:	f043 0304 	orr.w	r3, r3, #4
 80045d0:	6313      	str	r3, [r2, #48]	; 0x30
 80045d2:	4b3d      	ldr	r3, [pc, #244]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80045de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045e4:	2312      	movs	r3, #18
 80045e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ec:	2303      	movs	r3, #3
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80045f0:	2304      	movs	r3, #4
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f4:	f107 031c 	add.w	r3, r7, #28
 80045f8:	4619      	mov	r1, r3
 80045fa:	4834      	ldr	r0, [pc, #208]	; (80046cc <HAL_I2C_MspInit+0x20c>)
 80045fc:	f001 faee 	bl	8005bdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004606:	2312      	movs	r3, #18
 8004608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460a:	2300      	movs	r3, #0
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800460e:	2303      	movs	r3, #3
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004612:	2304      	movs	r3, #4
 8004614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004616:	f107 031c 	add.w	r3, r7, #28
 800461a:	4619      	mov	r1, r3
 800461c:	482f      	ldr	r0, [pc, #188]	; (80046dc <HAL_I2C_MspInit+0x21c>)
 800461e:	f001 fadd 	bl	8005bdc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	4b28      	ldr	r3, [pc, #160]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	4a27      	ldr	r2, [pc, #156]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 800462c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004630:	6413      	str	r3, [r2, #64]	; 0x40
 8004632:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <HAL_I2C_MspInit+0x208>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800463e:	4b28      	ldr	r3, [pc, #160]	; (80046e0 <HAL_I2C_MspInit+0x220>)
 8004640:	4a28      	ldr	r2, [pc, #160]	; (80046e4 <HAL_I2C_MspInit+0x224>)
 8004642:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8004644:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <HAL_I2C_MspInit+0x220>)
 8004646:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800464a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800464c:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <HAL_I2C_MspInit+0x220>)
 800464e:	2240      	movs	r2, #64	; 0x40
 8004650:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004652:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <HAL_I2C_MspInit+0x220>)
 8004654:	2200      	movs	r2, #0
 8004656:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004658:	4b21      	ldr	r3, [pc, #132]	; (80046e0 <HAL_I2C_MspInit+0x220>)
 800465a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800465e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004660:	4b1f      	ldr	r3, [pc, #124]	; (80046e0 <HAL_I2C_MspInit+0x220>)
 8004662:	2200      	movs	r2, #0
 8004664:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004666:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <HAL_I2C_MspInit+0x220>)
 8004668:	2200      	movs	r2, #0
 800466a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800466c:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <HAL_I2C_MspInit+0x220>)
 800466e:	2200      	movs	r2, #0
 8004670:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004672:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_I2C_MspInit+0x220>)
 8004674:	2200      	movs	r2, #0
 8004676:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_I2C_MspInit+0x220>)
 800467a:	2200      	movs	r2, #0
 800467c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800467e:	4818      	ldr	r0, [pc, #96]	; (80046e0 <HAL_I2C_MspInit+0x220>)
 8004680:	f000 ff00 	bl	8005484 <HAL_DMA_Init>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_MspInit+0x1ce>
      Error_Handler();
 800468a:	f7fe fc71 	bl	8002f70 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <HAL_I2C_MspInit+0x220>)
 8004692:	635a      	str	r2, [r3, #52]	; 0x34
 8004694:	4a12      	ldr	r2, [pc, #72]	; (80046e0 <HAL_I2C_MspInit+0x220>)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800469a:	2200      	movs	r2, #0
 800469c:	2100      	movs	r1, #0
 800469e:	2021      	movs	r0, #33	; 0x21
 80046a0:	f000 fe97 	bl	80053d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80046a4:	2021      	movs	r0, #33	; 0x21
 80046a6:	f000 feb0 	bl	800540a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80046aa:	2200      	movs	r2, #0
 80046ac:	2100      	movs	r1, #0
 80046ae:	2022      	movs	r0, #34	; 0x22
 80046b0:	f000 fe8f 	bl	80053d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80046b4:	2022      	movs	r0, #34	; 0x22
 80046b6:	f000 fea8 	bl	800540a <HAL_NVIC_EnableIRQ>
}
 80046ba:	bf00      	nop
 80046bc:	3730      	adds	r7, #48	; 0x30
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40005400 	.word	0x40005400
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40020400 	.word	0x40020400
 80046d0:	20000a74 	.word	0x20000a74
 80046d4:	400260a0 	.word	0x400260a0
 80046d8:	40005800 	.word	0x40005800
 80046dc:	40020800 	.word	0x40020800
 80046e0:	20000c44 	.word	0x20000c44
 80046e4:	400260b8 	.word	0x400260b8

080046e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08a      	sub	sp, #40	; 0x28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f0:	f107 0314 	add.w	r3, r7, #20
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	60da      	str	r2, [r3, #12]
 80046fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a47      	ldr	r2, [pc, #284]	; (8004824 <HAL_SPI_MspInit+0x13c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	f040 8088 	bne.w	800481c <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	4b45      	ldr	r3, [pc, #276]	; (8004828 <HAL_SPI_MspInit+0x140>)
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	4a44      	ldr	r2, [pc, #272]	; (8004828 <HAL_SPI_MspInit+0x140>)
 8004716:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800471a:	6453      	str	r3, [r2, #68]	; 0x44
 800471c:	4b42      	ldr	r3, [pc, #264]	; (8004828 <HAL_SPI_MspInit+0x140>)
 800471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	4b3e      	ldr	r3, [pc, #248]	; (8004828 <HAL_SPI_MspInit+0x140>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	4a3d      	ldr	r2, [pc, #244]	; (8004828 <HAL_SPI_MspInit+0x140>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6313      	str	r3, [r2, #48]	; 0x30
 8004738:	4b3b      	ldr	r3, [pc, #236]	; (8004828 <HAL_SPI_MspInit+0x140>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004744:	23e0      	movs	r3, #224	; 0xe0
 8004746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004748:	2302      	movs	r3, #2
 800474a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474c:	2300      	movs	r3, #0
 800474e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004750:	2303      	movs	r3, #3
 8004752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004754:	2305      	movs	r3, #5
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004758:	f107 0314 	add.w	r3, r7, #20
 800475c:	4619      	mov	r1, r3
 800475e:	4833      	ldr	r0, [pc, #204]	; (800482c <HAL_SPI_MspInit+0x144>)
 8004760:	f001 fa3c 	bl	8005bdc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8004764:	4b32      	ldr	r3, [pc, #200]	; (8004830 <HAL_SPI_MspInit+0x148>)
 8004766:	4a33      	ldr	r2, [pc, #204]	; (8004834 <HAL_SPI_MspInit+0x14c>)
 8004768:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800476a:	4b31      	ldr	r3, [pc, #196]	; (8004830 <HAL_SPI_MspInit+0x148>)
 800476c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004770:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004772:	4b2f      	ldr	r3, [pc, #188]	; (8004830 <HAL_SPI_MspInit+0x148>)
 8004774:	2200      	movs	r2, #0
 8004776:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004778:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <HAL_SPI_MspInit+0x148>)
 800477a:	2200      	movs	r2, #0
 800477c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800477e:	4b2c      	ldr	r3, [pc, #176]	; (8004830 <HAL_SPI_MspInit+0x148>)
 8004780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004784:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004786:	4b2a      	ldr	r3, [pc, #168]	; (8004830 <HAL_SPI_MspInit+0x148>)
 8004788:	2200      	movs	r2, #0
 800478a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800478c:	4b28      	ldr	r3, [pc, #160]	; (8004830 <HAL_SPI_MspInit+0x148>)
 800478e:	2200      	movs	r2, #0
 8004790:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004792:	4b27      	ldr	r3, [pc, #156]	; (8004830 <HAL_SPI_MspInit+0x148>)
 8004794:	2200      	movs	r2, #0
 8004796:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <HAL_SPI_MspInit+0x148>)
 800479a:	2200      	movs	r2, #0
 800479c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800479e:	4b24      	ldr	r3, [pc, #144]	; (8004830 <HAL_SPI_MspInit+0x148>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80047a4:	4822      	ldr	r0, [pc, #136]	; (8004830 <HAL_SPI_MspInit+0x148>)
 80047a6:	f000 fe6d 	bl	8005484 <HAL_DMA_Init>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80047b0:	f7fe fbde 	bl	8002f70 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <HAL_SPI_MspInit+0x148>)
 80047b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80047ba:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <HAL_SPI_MspInit+0x148>)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80047c0:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <HAL_SPI_MspInit+0x150>)
 80047c2:	4a1e      	ldr	r2, [pc, #120]	; (800483c <HAL_SPI_MspInit+0x154>)
 80047c4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <HAL_SPI_MspInit+0x150>)
 80047c8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80047cc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047ce:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <HAL_SPI_MspInit+0x150>)
 80047d0:	2240      	movs	r2, #64	; 0x40
 80047d2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047d4:	4b18      	ldr	r3, [pc, #96]	; (8004838 <HAL_SPI_MspInit+0x150>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047da:	4b17      	ldr	r3, [pc, #92]	; (8004838 <HAL_SPI_MspInit+0x150>)
 80047dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <HAL_SPI_MspInit+0x150>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047e8:	4b13      	ldr	r3, [pc, #76]	; (8004838 <HAL_SPI_MspInit+0x150>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_SPI_MspInit+0x150>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047f4:	4b10      	ldr	r3, [pc, #64]	; (8004838 <HAL_SPI_MspInit+0x150>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <HAL_SPI_MspInit+0x150>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004800:	480d      	ldr	r0, [pc, #52]	; (8004838 <HAL_SPI_MspInit+0x150>)
 8004802:	f000 fe3f 	bl	8005484 <HAL_DMA_Init>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800480c:	f7fe fbb0 	bl	8002f70 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a09      	ldr	r2, [pc, #36]	; (8004838 <HAL_SPI_MspInit+0x150>)
 8004814:	649a      	str	r2, [r3, #72]	; 0x48
 8004816:	4a08      	ldr	r2, [pc, #32]	; (8004838 <HAL_SPI_MspInit+0x150>)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800481c:	bf00      	nop
 800481e:	3728      	adds	r7, #40	; 0x28
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40013000 	.word	0x40013000
 8004828:	40023800 	.word	0x40023800
 800482c:	40020000 	.word	0x40020000
 8004830:	20000df0 	.word	0x20000df0
 8004834:	40026410 	.word	0x40026410
 8004838:	20000e70 	.word	0x20000e70
 800483c:	40026488 	.word	0x40026488

08004840 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a92      	ldr	r2, [pc, #584]	; (8004a98 <HAL_TIM_PWM_MspInit+0x258>)
 800484e:	4293      	cmp	r3, r2
 8004850:	f040 80db 	bne.w	8004a0a <HAL_TIM_PWM_MspInit+0x1ca>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	4b90      	ldr	r3, [pc, #576]	; (8004a9c <HAL_TIM_PWM_MspInit+0x25c>)
 800485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485c:	4a8f      	ldr	r2, [pc, #572]	; (8004a9c <HAL_TIM_PWM_MspInit+0x25c>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6453      	str	r3, [r2, #68]	; 0x44
 8004864:	4b8d      	ldr	r3, [pc, #564]	; (8004a9c <HAL_TIM_PWM_MspInit+0x25c>)
 8004866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8004870:	4b8b      	ldr	r3, [pc, #556]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x260>)
 8004872:	4a8c      	ldr	r2, [pc, #560]	; (8004aa4 <HAL_TIM_PWM_MspInit+0x264>)
 8004874:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8004876:	4b8a      	ldr	r3, [pc, #552]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x260>)
 8004878:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800487c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800487e:	4b88      	ldr	r3, [pc, #544]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x260>)
 8004880:	2240      	movs	r2, #64	; 0x40
 8004882:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004884:	4b86      	ldr	r3, [pc, #536]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x260>)
 8004886:	2200      	movs	r2, #0
 8004888:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800488a:	4b85      	ldr	r3, [pc, #532]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x260>)
 800488c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004890:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004892:	4b83      	ldr	r3, [pc, #524]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x260>)
 8004894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004898:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800489a:	4b81      	ldr	r3, [pc, #516]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x260>)
 800489c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048a0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80048a2:	4b7f      	ldr	r3, [pc, #508]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x260>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80048a8:	4b7d      	ldr	r3, [pc, #500]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x260>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048ae:	4b7c      	ldr	r3, [pc, #496]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x260>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80048b4:	487a      	ldr	r0, [pc, #488]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x260>)
 80048b6:	f000 fde5 	bl	8005484 <HAL_DMA_Init>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 80048c0:	f7fe fb56 	bl	8002f70 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a76      	ldr	r2, [pc, #472]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x260>)
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24
 80048ca:	4a75      	ldr	r2, [pc, #468]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x260>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 80048d0:	4b75      	ldr	r3, [pc, #468]	; (8004aa8 <HAL_TIM_PWM_MspInit+0x268>)
 80048d2:	4a76      	ldr	r2, [pc, #472]	; (8004aac <HAL_TIM_PWM_MspInit+0x26c>)
 80048d4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 80048d6:	4b74      	ldr	r3, [pc, #464]	; (8004aa8 <HAL_TIM_PWM_MspInit+0x268>)
 80048d8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80048dc:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048de:	4b72      	ldr	r3, [pc, #456]	; (8004aa8 <HAL_TIM_PWM_MspInit+0x268>)
 80048e0:	2240      	movs	r2, #64	; 0x40
 80048e2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80048e4:	4b70      	ldr	r3, [pc, #448]	; (8004aa8 <HAL_TIM_PWM_MspInit+0x268>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80048ea:	4b6f      	ldr	r3, [pc, #444]	; (8004aa8 <HAL_TIM_PWM_MspInit+0x268>)
 80048ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048f0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80048f2:	4b6d      	ldr	r3, [pc, #436]	; (8004aa8 <HAL_TIM_PWM_MspInit+0x268>)
 80048f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048f8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80048fa:	4b6b      	ldr	r3, [pc, #428]	; (8004aa8 <HAL_TIM_PWM_MspInit+0x268>)
 80048fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004900:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8004902:	4b69      	ldr	r3, [pc, #420]	; (8004aa8 <HAL_TIM_PWM_MspInit+0x268>)
 8004904:	2200      	movs	r2, #0
 8004906:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004908:	4b67      	ldr	r3, [pc, #412]	; (8004aa8 <HAL_TIM_PWM_MspInit+0x268>)
 800490a:	2200      	movs	r2, #0
 800490c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800490e:	4b66      	ldr	r3, [pc, #408]	; (8004aa8 <HAL_TIM_PWM_MspInit+0x268>)
 8004910:	2200      	movs	r2, #0
 8004912:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8004914:	4864      	ldr	r0, [pc, #400]	; (8004aa8 <HAL_TIM_PWM_MspInit+0x268>)
 8004916:	f000 fdb5 	bl	8005484 <HAL_DMA_Init>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_TIM_PWM_MspInit+0xe4>
    {
      Error_Handler();
 8004920:	f7fe fb26 	bl	8002f70 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a60      	ldr	r2, [pc, #384]	; (8004aa8 <HAL_TIM_PWM_MspInit+0x268>)
 8004928:	629a      	str	r2, [r3, #40]	; 0x28
 800492a:	4a5f      	ldr	r2, [pc, #380]	; (8004aa8 <HAL_TIM_PWM_MspInit+0x268>)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8004930:	4b5f      	ldr	r3, [pc, #380]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x270>)
 8004932:	4a60      	ldr	r2, [pc, #384]	; (8004ab4 <HAL_TIM_PWM_MspInit+0x274>)
 8004934:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8004936:	4b5e      	ldr	r3, [pc, #376]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x270>)
 8004938:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800493c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800493e:	4b5c      	ldr	r3, [pc, #368]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x270>)
 8004940:	2240      	movs	r2, #64	; 0x40
 8004942:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004944:	4b5a      	ldr	r3, [pc, #360]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x270>)
 8004946:	2200      	movs	r2, #0
 8004948:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800494a:	4b59      	ldr	r3, [pc, #356]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x270>)
 800494c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004950:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004952:	4b57      	ldr	r3, [pc, #348]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x270>)
 8004954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004958:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800495a:	4b55      	ldr	r3, [pc, #340]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x270>)
 800495c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004960:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8004962:	4b53      	ldr	r3, [pc, #332]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x270>)
 8004964:	2200      	movs	r2, #0
 8004966:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8004968:	4b51      	ldr	r3, [pc, #324]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x270>)
 800496a:	2200      	movs	r2, #0
 800496c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800496e:	4b50      	ldr	r3, [pc, #320]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x270>)
 8004970:	2200      	movs	r2, #0
 8004972:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8004974:	484e      	ldr	r0, [pc, #312]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x270>)
 8004976:	f000 fd85 	bl	8005484 <HAL_DMA_Init>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <HAL_TIM_PWM_MspInit+0x144>
    {
      Error_Handler();
 8004980:	f7fe faf6 	bl	8002f70 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a4a      	ldr	r2, [pc, #296]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x270>)
 8004988:	62da      	str	r2, [r3, #44]	; 0x2c
 800498a:	4a49      	ldr	r2, [pc, #292]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x270>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8004990:	4b49      	ldr	r3, [pc, #292]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 8004992:	4a4a      	ldr	r2, [pc, #296]	; (8004abc <HAL_TIM_PWM_MspInit+0x27c>)
 8004994:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8004996:	4b48      	ldr	r3, [pc, #288]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 8004998:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800499c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800499e:	4b46      	ldr	r3, [pc, #280]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 80049a0:	2240      	movs	r2, #64	; 0x40
 80049a2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80049a4:	4b44      	ldr	r3, [pc, #272]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80049aa:	4b43      	ldr	r3, [pc, #268]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 80049ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049b0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049b2:	4b41      	ldr	r3, [pc, #260]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 80049b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049b8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049ba:	4b3f      	ldr	r3, [pc, #252]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 80049bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049c0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 80049c2:	4b3d      	ldr	r3, [pc, #244]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80049c8:	4b3b      	ldr	r3, [pc, #236]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049ce:	4b3a      	ldr	r3, [pc, #232]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 80049d4:	4838      	ldr	r0, [pc, #224]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 80049d6:	f000 fd55 	bl	8005484 <HAL_DMA_Init>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_TIM_PWM_MspInit+0x1a4>
    {
      Error_Handler();
 80049e0:	f7fe fac6 	bl	8002f70 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a34      	ldr	r2, [pc, #208]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
 80049ea:	4a33      	ldr	r2, [pc, #204]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a31      	ldr	r2, [pc, #196]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
 80049f6:	4a30      	ldr	r2, [pc, #192]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a2e      	ldr	r2, [pc, #184]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 8004a00:	635a      	str	r2, [r3, #52]	; 0x34
 8004a02:	4a2d      	ldr	r2, [pc, #180]	; (8004ab8 <HAL_TIM_PWM_MspInit+0x278>)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004a08:	e042      	b.n	8004a90 <HAL_TIM_PWM_MspInit+0x250>
  else if(htim_pwm->Instance==TIM8)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ac0 <HAL_TIM_PWM_MspInit+0x280>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d13d      	bne.n	8004a90 <HAL_TIM_PWM_MspInit+0x250>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004a14:	2300      	movs	r3, #0
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <HAL_TIM_PWM_MspInit+0x25c>)
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1c:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <HAL_TIM_PWM_MspInit+0x25c>)
 8004a1e:	f043 0302 	orr.w	r3, r3, #2
 8004a22:	6453      	str	r3, [r2, #68]	; 0x44
 8004a24:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <HAL_TIM_PWM_MspInit+0x25c>)
 8004a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch2.Instance = DMA2_Stream3;
 8004a30:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <HAL_TIM_PWM_MspInit+0x284>)
 8004a32:	4a25      	ldr	r2, [pc, #148]	; (8004ac8 <HAL_TIM_PWM_MspInit+0x288>)
 8004a34:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Channel = DMA_CHANNEL_7;
 8004a36:	4b23      	ldr	r3, [pc, #140]	; (8004ac4 <HAL_TIM_PWM_MspInit+0x284>)
 8004a38:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8004a3c:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a3e:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <HAL_TIM_PWM_MspInit+0x284>)
 8004a40:	2240      	movs	r2, #64	; 0x40
 8004a42:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a44:	4b1f      	ldr	r3, [pc, #124]	; (8004ac4 <HAL_TIM_PWM_MspInit+0x284>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004a4a:	4b1e      	ldr	r3, [pc, #120]	; (8004ac4 <HAL_TIM_PWM_MspInit+0x284>)
 8004a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a50:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a52:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <HAL_TIM_PWM_MspInit+0x284>)
 8004a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a58:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ac4 <HAL_TIM_PWM_MspInit+0x284>)
 8004a5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a60:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8004a62:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <HAL_TIM_PWM_MspInit+0x284>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004a68:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <HAL_TIM_PWM_MspInit+0x284>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a6e:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <HAL_TIM_PWM_MspInit+0x284>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8004a74:	4813      	ldr	r0, [pc, #76]	; (8004ac4 <HAL_TIM_PWM_MspInit+0x284>)
 8004a76:	f000 fd05 	bl	8005484 <HAL_DMA_Init>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_TIM_PWM_MspInit+0x244>
      Error_Handler();
 8004a80:	f7fe fa76 	bl	8002f70 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a0f      	ldr	r2, [pc, #60]	; (8004ac4 <HAL_TIM_PWM_MspInit+0x284>)
 8004a88:	629a      	str	r2, [r3, #40]	; 0x28
 8004a8a:	4a0e      	ldr	r2, [pc, #56]	; (8004ac4 <HAL_TIM_PWM_MspInit+0x284>)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40010000 	.word	0x40010000
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	200008ac 	.word	0x200008ac
 8004aa4:	40026428 	.word	0x40026428
 8004aa8:	20000b7c 	.word	0x20000b7c
 8004aac:	40026440 	.word	0x40026440
 8004ab0:	20000a14 	.word	0x20000a14
 8004ab4:	400264a0 	.word	0x400264a0
 8004ab8:	2000096c 	.word	0x2000096c
 8004abc:	40026470 	.word	0x40026470
 8004ac0:	40010400 	.word	0x40010400
 8004ac4:	2000090c 	.word	0x2000090c
 8004ac8:	40026458 	.word	0x40026458

08004acc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b090      	sub	sp, #64	; 0x40
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	605a      	str	r2, [r3, #4]
 8004ade:	609a      	str	r2, [r3, #8]
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aec:	d14b      	bne.n	8004b86 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004aee:	2300      	movs	r3, #0
 8004af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af2:	4b75      	ldr	r3, [pc, #468]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	4a74      	ldr	r2, [pc, #464]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	6413      	str	r3, [r2, #64]	; 0x40
 8004afe:	4b72      	ldr	r3, [pc, #456]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0e:	4b6e      	ldr	r3, [pc, #440]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	4a6d      	ldr	r2, [pc, #436]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	6313      	str	r3, [r2, #48]	; 0x30
 8004b1a:	4b6b      	ldr	r3, [pc, #428]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b26:	2300      	movs	r3, #0
 8004b28:	623b      	str	r3, [r7, #32]
 8004b2a:	4b67      	ldr	r3, [pc, #412]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	4a66      	ldr	r2, [pc, #408]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004b30:	f043 0302 	orr.w	r3, r3, #2
 8004b34:	6313      	str	r3, [r2, #48]	; 0x30
 8004b36:	4b64      	ldr	r3, [pc, #400]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	623b      	str	r3, [r7, #32]
 8004b40:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b50:	2300      	movs	r3, #0
 8004b52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b54:	2301      	movs	r3, #1
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	485b      	ldr	r0, [pc, #364]	; (8004ccc <HAL_TIM_Encoder_MspInit+0x200>)
 8004b60:	f001 f83c 	bl	8005bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004b64:	2308      	movs	r3, #8
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b70:	2300      	movs	r3, #0
 8004b72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b74:	2301      	movs	r3, #1
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4854      	ldr	r0, [pc, #336]	; (8004cd0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004b80:	f001 f82c 	bl	8005bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004b84:	e09c      	b.n	8004cc0 <HAL_TIM_Encoder_MspInit+0x1f4>
  else if(htim_encoder->Instance==TIM3)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a52      	ldr	r2, [pc, #328]	; (8004cd4 <HAL_TIM_Encoder_MspInit+0x208>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d12c      	bne.n	8004bea <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b90:	2300      	movs	r3, #0
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	4b4c      	ldr	r3, [pc, #304]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	4a4b      	ldr	r2, [pc, #300]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004b9a:	f043 0302 	orr.w	r3, r3, #2
 8004b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba0:	4b49      	ldr	r3, [pc, #292]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bac:	2300      	movs	r3, #0
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	4b45      	ldr	r3, [pc, #276]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	4a44      	ldr	r2, [pc, #272]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004bb6:	f043 0302 	orr.w	r3, r3, #2
 8004bba:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbc:	4b42      	ldr	r3, [pc, #264]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004bc8:	2330      	movs	r3, #48	; 0x30
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004bd8:	2302      	movs	r3, #2
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004be0:	4619      	mov	r1, r3
 8004be2:	483b      	ldr	r0, [pc, #236]	; (8004cd0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004be4:	f000 fffa 	bl	8005bdc <HAL_GPIO_Init>
}
 8004be8:	e06a      	b.n	8004cc0 <HAL_TIM_Encoder_MspInit+0x1f4>
  else if(htim_encoder->Instance==TIM4)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a3a      	ldr	r2, [pc, #232]	; (8004cd8 <HAL_TIM_Encoder_MspInit+0x20c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d12c      	bne.n	8004c4e <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	4b33      	ldr	r3, [pc, #204]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	4a32      	ldr	r2, [pc, #200]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004bfe:	f043 0304 	orr.w	r3, r3, #4
 8004c02:	6413      	str	r3, [r2, #64]	; 0x40
 8004c04:	4b30      	ldr	r3, [pc, #192]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	4b2c      	ldr	r3, [pc, #176]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c18:	4a2b      	ldr	r2, [pc, #172]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004c1a:	f043 0302 	orr.w	r3, r3, #2
 8004c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c20:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c2c:	23c0      	movs	r3, #192	; 0xc0
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c30:	2302      	movs	r3, #2
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c44:	4619      	mov	r1, r3
 8004c46:	4822      	ldr	r0, [pc, #136]	; (8004cd0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004c48:	f000 ffc8 	bl	8005bdc <HAL_GPIO_Init>
}
 8004c4c:	e038      	b.n	8004cc0 <HAL_TIM_Encoder_MspInit+0x1f4>
  else if(htim_encoder->Instance==TIM5)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a22      	ldr	r2, [pc, #136]	; (8004cdc <HAL_TIM_Encoder_MspInit+0x210>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d133      	bne.n	8004cc0 <HAL_TIM_Encoder_MspInit+0x1f4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	4a19      	ldr	r2, [pc, #100]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004c62:	f043 0308 	orr.w	r3, r3, #8
 8004c66:	6413      	str	r3, [r2, #64]	; 0x40
 8004c68:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c74:	2300      	movs	r3, #0
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	4b13      	ldr	r3, [pc, #76]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	4a12      	ldr	r2, [pc, #72]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	6313      	str	r3, [r2, #48]	; 0x30
 8004c84:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004c90:	2303      	movs	r3, #3
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c94:	2302      	movs	r3, #2
 8004c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4808      	ldr	r0, [pc, #32]	; (8004ccc <HAL_TIM_Encoder_MspInit+0x200>)
 8004cac:	f000 ff96 	bl	8005bdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	2032      	movs	r0, #50	; 0x32
 8004cb6:	f000 fb8c 	bl	80053d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004cba:	2032      	movs	r0, #50	; 0x32
 8004cbc:	f000 fba5 	bl	800540a <HAL_NVIC_EnableIRQ>
}
 8004cc0:	bf00      	nop
 8004cc2:	3740      	adds	r7, #64	; 0x40
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40020000 	.word	0x40020000
 8004cd0:	40020400 	.word	0x40020400
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40000800 	.word	0x40000800
 8004cdc:	40000c00 	.word	0x40000c00

08004ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08a      	sub	sp, #40	; 0x28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ce8:	f107 0314 	add.w	r3, r7, #20
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	605a      	str	r2, [r3, #4]
 8004cf2:	609a      	str	r2, [r3, #8]
 8004cf4:	60da      	str	r2, [r3, #12]
 8004cf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a24      	ldr	r2, [pc, #144]	; (8004d90 <HAL_TIM_MspPostInit+0xb0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d11f      	bne.n	8004d42 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <HAL_TIM_MspPostInit+0xb4>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	4a22      	ldr	r2, [pc, #136]	; (8004d94 <HAL_TIM_MspPostInit+0xb4>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	6313      	str	r3, [r2, #48]	; 0x30
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <HAL_TIM_MspPostInit+0xb4>)
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = CH1_FL_Pin|CH2_FR_Pin|CH3_BL_Pin|CH4_BR_Pin;
 8004d1e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d24:	2302      	movs	r3, #2
 8004d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004d30:	2301      	movs	r3, #1
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d34:	f107 0314 	add.w	r3, r7, #20
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4817      	ldr	r0, [pc, #92]	; (8004d98 <HAL_TIM_MspPostInit+0xb8>)
 8004d3c:	f000 ff4e 	bl	8005bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004d40:	e022      	b.n	8004d88 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a15      	ldr	r2, [pc, #84]	; (8004d9c <HAL_TIM_MspPostInit+0xbc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d11d      	bne.n	8004d88 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <HAL_TIM_MspPostInit+0xb4>)
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	4a0f      	ldr	r2, [pc, #60]	; (8004d94 <HAL_TIM_MspPostInit+0xb4>)
 8004d56:	f043 0304 	orr.w	r3, r3, #4
 8004d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <HAL_TIM_MspPostInit+0xb4>)
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d68:	23c0      	movs	r3, #192	; 0xc0
 8004d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d74:	2300      	movs	r3, #0
 8004d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d7c:	f107 0314 	add.w	r3, r7, #20
 8004d80:	4619      	mov	r1, r3
 8004d82:	4807      	ldr	r0, [pc, #28]	; (8004da0 <HAL_TIM_MspPostInit+0xc0>)
 8004d84:	f000 ff2a 	bl	8005bdc <HAL_GPIO_Init>
}
 8004d88:	bf00      	nop
 8004d8a:	3728      	adds	r7, #40	; 0x28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40020000 	.word	0x40020000
 8004d9c:	40010400 	.word	0x40010400
 8004da0:	40020800 	.word	0x40020800

08004da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004da8:	e7fe      	b.n	8004da8 <NMI_Handler+0x4>

08004daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004daa:	b480      	push	{r7}
 8004dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dae:	e7fe      	b.n	8004dae <HardFault_Handler+0x4>

08004db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004db4:	e7fe      	b.n	8004db4 <MemManage_Handler+0x4>

08004db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004db6:	b480      	push	{r7}
 8004db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dba:	e7fe      	b.n	8004dba <BusFault_Handler+0x4>

08004dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dc0:	e7fe      	b.n	8004dc0 <UsageFault_Handler+0x4>

08004dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dc6:	bf00      	nop
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dde:	b480      	push	{r7}
 8004de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004de2:	bf00      	nop
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004df0:	f000 f9d0 	bl	8005194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8004df4:	f000 fb40 	bl	8005478 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8004df8:	bf00      	nop
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004e00:	4802      	ldr	r0, [pc, #8]	; (8004e0c <DMA1_Stream6_IRQHandler+0x10>)
 8004e02:	f000 fc67 	bl	80056d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004e06:	bf00      	nop
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000a74 	.word	0x20000a74

08004e10 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004e14:	4802      	ldr	r0, [pc, #8]	; (8004e20 <I2C2_EV_IRQHandler+0x10>)
 8004e16:	f001 ff83 	bl	8006d20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004e1a:	bf00      	nop
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000b28 	.word	0x20000b28

08004e24 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8004e28:	4802      	ldr	r0, [pc, #8]	; (8004e34 <I2C2_ER_IRQHandler+0x10>)
 8004e2a:	f002 f8ea 	bl	8007002 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000b28 	.word	0x20000b28

08004e38 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8004e3c:	4802      	ldr	r0, [pc, #8]	; (8004e48 <DMA1_Stream7_IRQHandler+0x10>)
 8004e3e:	f000 fc49 	bl	80056d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004e42:	bf00      	nop
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000c44 	.word	0x20000c44

08004e4c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004e50:	4802      	ldr	r0, [pc, #8]	; (8004e5c <TIM5_IRQHandler+0x10>)
 8004e52:	f005 fdf1 	bl	800aa38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004e56:	bf00      	nop
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	2000072c 	.word	0x2000072c

08004e60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004e64:	4802      	ldr	r0, [pc, #8]	; (8004e70 <DMA2_Stream0_IRQHandler+0x10>)
 8004e66:	f000 fc35 	bl	80056d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000df0 	.word	0x20000df0

08004e74 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004e78:	4802      	ldr	r0, [pc, #8]	; (8004e84 <DMA2_Stream1_IRQHandler+0x10>)
 8004e7a:	f000 fc2b 	bl	80056d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004e7e:	bf00      	nop
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	200008ac 	.word	0x200008ac

08004e88 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8004e8c:	4802      	ldr	r0, [pc, #8]	; (8004e98 <DMA2_Stream2_IRQHandler+0x10>)
 8004e8e:	f000 fc21 	bl	80056d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004e92:	bf00      	nop
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000b7c 	.word	0x20000b7c

08004e9c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8004ea0:	4802      	ldr	r0, [pc, #8]	; (8004eac <DMA2_Stream3_IRQHandler+0x10>)
 8004ea2:	f000 fc17 	bl	80056d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004ea6:	bf00      	nop
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	2000090c 	.word	0x2000090c

08004eb0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8004eb4:	4802      	ldr	r0, [pc, #8]	; (8004ec0 <DMA2_Stream4_IRQHandler+0x10>)
 8004eb6:	f000 fc0d 	bl	80056d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8004eba:	bf00      	nop
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	2000096c 	.word	0x2000096c

08004ec4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004ec8:	4802      	ldr	r0, [pc, #8]	; (8004ed4 <DMA2_Stream5_IRQHandler+0x10>)
 8004eca:	f000 fc03 	bl	80056d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8004ece:	bf00      	nop
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000e70 	.word	0x20000e70

08004ed8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8004edc:	4802      	ldr	r0, [pc, #8]	; (8004ee8 <DMA2_Stream6_IRQHandler+0x10>)
 8004ede:	f000 fbf9 	bl	80056d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000a14 	.word	0x20000a14

08004eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
	return 1;
 8004ef0:	2301      	movs	r3, #1
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <_kill>:

int _kill(int pid, int sig)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f06:	f006 fae1 	bl	800b4cc <__errno>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2216      	movs	r2, #22
 8004f0e:	601a      	str	r2, [r3, #0]
	return -1;
 8004f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <_exit>:

void _exit (int status)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f24:	f04f 31ff 	mov.w	r1, #4294967295
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff ffe7 	bl	8004efc <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f2e:	e7fe      	b.n	8004f2e <_exit+0x12>

08004f30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e00a      	b.n	8004f58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f42:	f3af 8000 	nop.w
 8004f46:	4601      	mov	r1, r0
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	60ba      	str	r2, [r7, #8]
 8004f4e:	b2ca      	uxtb	r2, r1
 8004f50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	3301      	adds	r3, #1
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	dbf0      	blt.n	8004f42 <_read+0x12>
	}

return len;
 8004f60:	687b      	ldr	r3, [r7, #4]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b086      	sub	sp, #24
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e009      	b.n	8004f90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	60ba      	str	r2, [r7, #8]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	dbf1      	blt.n	8004f7c <_write+0x12>
	}
	return len;
 8004f98:	687b      	ldr	r3, [r7, #4]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <_close>:

int _close(int file)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
	return -1;
 8004faa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fca:	605a      	str	r2, [r3, #4]
	return 0;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <_isatty>:

int _isatty(int file)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
	return 1;
 8004fe2:	2301      	movs	r3, #1
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
	return 0;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005014:	4a14      	ldr	r2, [pc, #80]	; (8005068 <_sbrk+0x5c>)
 8005016:	4b15      	ldr	r3, [pc, #84]	; (800506c <_sbrk+0x60>)
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005020:	4b13      	ldr	r3, [pc, #76]	; (8005070 <_sbrk+0x64>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005028:	4b11      	ldr	r3, [pc, #68]	; (8005070 <_sbrk+0x64>)
 800502a:	4a12      	ldr	r2, [pc, #72]	; (8005074 <_sbrk+0x68>)
 800502c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800502e:	4b10      	ldr	r3, [pc, #64]	; (8005070 <_sbrk+0x64>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4413      	add	r3, r2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	429a      	cmp	r2, r3
 800503a:	d207      	bcs.n	800504c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800503c:	f006 fa46 	bl	800b4cc <__errno>
 8005040:	4603      	mov	r3, r0
 8005042:	220c      	movs	r2, #12
 8005044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	e009      	b.n	8005060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800504c:	4b08      	ldr	r3, [pc, #32]	; (8005070 <_sbrk+0x64>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005052:	4b07      	ldr	r3, [pc, #28]	; (8005070 <_sbrk+0x64>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4413      	add	r3, r2
 800505a:	4a05      	ldr	r2, [pc, #20]	; (8005070 <_sbrk+0x64>)
 800505c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800505e:	68fb      	ldr	r3, [r7, #12]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20020000 	.word	0x20020000
 800506c:	00000400 	.word	0x00000400
 8005070:	200006d8 	.word	0x200006d8
 8005074:	20000f08 	.word	0x20000f08

08005078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <SystemInit+0x20>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	4a05      	ldr	r2, [pc, #20]	; (8005098 <SystemInit+0x20>)
 8005084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800508c:	bf00      	nop
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	e000ed00 	.word	0xe000ed00

0800509c <Reset_Handler>:
 800509c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050d4 <LoopFillZerobss+0x12>
 80050a0:	480d      	ldr	r0, [pc, #52]	; (80050d8 <LoopFillZerobss+0x16>)
 80050a2:	490e      	ldr	r1, [pc, #56]	; (80050dc <LoopFillZerobss+0x1a>)
 80050a4:	4a0e      	ldr	r2, [pc, #56]	; (80050e0 <LoopFillZerobss+0x1e>)
 80050a6:	2300      	movs	r3, #0
 80050a8:	e002      	b.n	80050b0 <LoopCopyDataInit>

080050aa <CopyDataInit>:
 80050aa:	58d4      	ldr	r4, [r2, r3]
 80050ac:	50c4      	str	r4, [r0, r3]
 80050ae:	3304      	adds	r3, #4

080050b0 <LoopCopyDataInit>:
 80050b0:	18c4      	adds	r4, r0, r3
 80050b2:	428c      	cmp	r4, r1
 80050b4:	d3f9      	bcc.n	80050aa <CopyDataInit>
 80050b6:	4a0b      	ldr	r2, [pc, #44]	; (80050e4 <LoopFillZerobss+0x22>)
 80050b8:	4c0b      	ldr	r4, [pc, #44]	; (80050e8 <LoopFillZerobss+0x26>)
 80050ba:	2300      	movs	r3, #0
 80050bc:	e001      	b.n	80050c2 <LoopFillZerobss>

080050be <FillZerobss>:
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	3204      	adds	r2, #4

080050c2 <LoopFillZerobss>:
 80050c2:	42a2      	cmp	r2, r4
 80050c4:	d3fb      	bcc.n	80050be <FillZerobss>
 80050c6:	f7ff ffd7 	bl	8005078 <SystemInit>
 80050ca:	f006 fa05 	bl	800b4d8 <__libc_init_array>
 80050ce:	f7fc ff5f 	bl	8001f90 <main>
 80050d2:	4770      	bx	lr
 80050d4:	20020000 	.word	0x20020000
 80050d8:	20000000 	.word	0x20000000
 80050dc:	20000280 	.word	0x20000280
 80050e0:	0800f568 	.word	0x0800f568
 80050e4:	20000280 	.word	0x20000280
 80050e8:	20000f08 	.word	0x20000f08

080050ec <ADC_IRQHandler>:
 80050ec:	e7fe      	b.n	80050ec <ADC_IRQHandler>
	...

080050f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050f4:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <HAL_Init+0x40>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <HAL_Init+0x40>)
 80050fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <HAL_Init+0x40>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a0a      	ldr	r2, [pc, #40]	; (8005130 <HAL_Init+0x40>)
 8005106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800510a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800510c:	4b08      	ldr	r3, [pc, #32]	; (8005130 <HAL_Init+0x40>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a07      	ldr	r2, [pc, #28]	; (8005130 <HAL_Init+0x40>)
 8005112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005118:	2003      	movs	r0, #3
 800511a:	f000 f94f 	bl	80053bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800511e:	2000      	movs	r0, #0
 8005120:	f000 f808 	bl	8005134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005124:	f7ff f9a4 	bl	8004470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40023c00 	.word	0x40023c00

08005134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800513c:	4b12      	ldr	r3, [pc, #72]	; (8005188 <HAL_InitTick+0x54>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4b12      	ldr	r3, [pc, #72]	; (800518c <HAL_InitTick+0x58>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	4619      	mov	r1, r3
 8005146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800514a:	fbb3 f3f1 	udiv	r3, r3, r1
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f967 	bl	8005426 <HAL_SYSTICK_Config>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e00e      	b.n	8005180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b0f      	cmp	r3, #15
 8005166:	d80a      	bhi.n	800517e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005168:	2200      	movs	r2, #0
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	f04f 30ff 	mov.w	r0, #4294967295
 8005170:	f000 f92f 	bl	80053d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005174:	4a06      	ldr	r2, [pc, #24]	; (8005190 <HAL_InitTick+0x5c>)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	e000      	b.n	8005180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	200000a0 	.word	0x200000a0
 800518c:	200000a8 	.word	0x200000a8
 8005190:	200000a4 	.word	0x200000a4

08005194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <HAL_IncTick+0x20>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <HAL_IncTick+0x24>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4413      	add	r3, r2
 80051a4:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <HAL_IncTick+0x24>)
 80051a6:	6013      	str	r3, [r2, #0]
}
 80051a8:	bf00      	nop
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	200000a8 	.word	0x200000a8
 80051b8:	20000ef4 	.word	0x20000ef4

080051bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return uwTick;
 80051c0:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <HAL_GetTick+0x14>)
 80051c2:	681b      	ldr	r3, [r3, #0]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20000ef4 	.word	0x20000ef4

080051d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051dc:	f7ff ffee 	bl	80051bc <HAL_GetTick>
 80051e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d005      	beq.n	80051fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051ee:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <HAL_Delay+0x44>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80051fa:	bf00      	nop
 80051fc:	f7ff ffde 	bl	80051bc <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	429a      	cmp	r2, r3
 800520a:	d8f7      	bhi.n	80051fc <HAL_Delay+0x28>
  {
  }
}
 800520c:	bf00      	nop
 800520e:	bf00      	nop
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	200000a8 	.word	0x200000a8

0800521c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800522c:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <__NVIC_SetPriorityGrouping+0x44>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005238:	4013      	ands	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800524c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800524e:	4a04      	ldr	r2, [pc, #16]	; (8005260 <__NVIC_SetPriorityGrouping+0x44>)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	60d3      	str	r3, [r2, #12]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	e000ed00 	.word	0xe000ed00

08005264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005268:	4b04      	ldr	r3, [pc, #16]	; (800527c <__NVIC_GetPriorityGrouping+0x18>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	f003 0307 	and.w	r3, r3, #7
}
 8005272:	4618      	mov	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	e000ed00 	.word	0xe000ed00

08005280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800528a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528e:	2b00      	cmp	r3, #0
 8005290:	db0b      	blt.n	80052aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	f003 021f 	and.w	r2, r3, #31
 8005298:	4907      	ldr	r1, [pc, #28]	; (80052b8 <__NVIC_EnableIRQ+0x38>)
 800529a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	2001      	movs	r0, #1
 80052a2:	fa00 f202 	lsl.w	r2, r0, r2
 80052a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	e000e100 	.word	0xe000e100

080052bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	6039      	str	r1, [r7, #0]
 80052c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	db0a      	blt.n	80052e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	490c      	ldr	r1, [pc, #48]	; (8005308 <__NVIC_SetPriority+0x4c>)
 80052d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052da:	0112      	lsls	r2, r2, #4
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	440b      	add	r3, r1
 80052e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052e4:	e00a      	b.n	80052fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	4908      	ldr	r1, [pc, #32]	; (800530c <__NVIC_SetPriority+0x50>)
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	3b04      	subs	r3, #4
 80052f4:	0112      	lsls	r2, r2, #4
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	440b      	add	r3, r1
 80052fa:	761a      	strb	r2, [r3, #24]
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	e000e100 	.word	0xe000e100
 800530c:	e000ed00 	.word	0xe000ed00

08005310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005310:	b480      	push	{r7}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f1c3 0307 	rsb	r3, r3, #7
 800532a:	2b04      	cmp	r3, #4
 800532c:	bf28      	it	cs
 800532e:	2304      	movcs	r3, #4
 8005330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	3304      	adds	r3, #4
 8005336:	2b06      	cmp	r3, #6
 8005338:	d902      	bls.n	8005340 <NVIC_EncodePriority+0x30>
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	3b03      	subs	r3, #3
 800533e:	e000      	b.n	8005342 <NVIC_EncodePriority+0x32>
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005344:	f04f 32ff 	mov.w	r2, #4294967295
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	43da      	mvns	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	401a      	ands	r2, r3
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005358:	f04f 31ff 	mov.w	r1, #4294967295
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	fa01 f303 	lsl.w	r3, r1, r3
 8005362:	43d9      	mvns	r1, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005368:	4313      	orrs	r3, r2
         );
}
 800536a:	4618      	mov	r0, r3
 800536c:	3724      	adds	r7, #36	; 0x24
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3b01      	subs	r3, #1
 8005384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005388:	d301      	bcc.n	800538e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800538a:	2301      	movs	r3, #1
 800538c:	e00f      	b.n	80053ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800538e:	4a0a      	ldr	r2, [pc, #40]	; (80053b8 <SysTick_Config+0x40>)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3b01      	subs	r3, #1
 8005394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005396:	210f      	movs	r1, #15
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
 800539c:	f7ff ff8e 	bl	80052bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <SysTick_Config+0x40>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053a6:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <SysTick_Config+0x40>)
 80053a8:	2207      	movs	r2, #7
 80053aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	e000e010 	.word	0xe000e010

080053bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff ff29 	bl	800521c <__NVIC_SetPriorityGrouping>
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b086      	sub	sp, #24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	4603      	mov	r3, r0
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053e4:	f7ff ff3e 	bl	8005264 <__NVIC_GetPriorityGrouping>
 80053e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	6978      	ldr	r0, [r7, #20]
 80053f0:	f7ff ff8e 	bl	8005310 <NVIC_EncodePriority>
 80053f4:	4602      	mov	r2, r0
 80053f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053fa:	4611      	mov	r1, r2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff ff5d 	bl	80052bc <__NVIC_SetPriority>
}
 8005402:	bf00      	nop
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	4603      	mov	r3, r0
 8005412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff ff31 	bl	8005280 <__NVIC_EnableIRQ>
}
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff ffa2 	bl	8005378 <SysTick_Config>
 8005434:	4603      	mov	r3, r0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b04      	cmp	r3, #4
 800544c:	d106      	bne.n	800545c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a08      	ldr	r2, [pc, #32]	; (8005474 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005454:	f043 0304 	orr.w	r3, r3, #4
 8005458:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800545a:	e005      	b.n	8005468 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a04      	ldr	r2, [pc, #16]	; (8005474 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005462:	f023 0304 	bic.w	r3, r3, #4
 8005466:	6013      	str	r3, [r2, #0]
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	e000e010 	.word	0xe000e010

08005478 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800547c:	f7fc fd3a 	bl	8001ef4 <HAL_SYSTICK_Callback>
}
 8005480:	bf00      	nop
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005490:	f7ff fe94 	bl	80051bc <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e099      	b.n	80055d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0201 	bic.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054c0:	e00f      	b.n	80054e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054c2:	f7ff fe7b 	bl	80051bc <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b05      	cmp	r3, #5
 80054ce:	d908      	bls.n	80054e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2203      	movs	r2, #3
 80054da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e078      	b.n	80055d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e8      	bne.n	80054c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4b38      	ldr	r3, [pc, #224]	; (80055dc <HAL_DMA_Init+0x158>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800550e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800551a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	2b04      	cmp	r3, #4
 800553a:	d107      	bne.n	800554c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	4313      	orrs	r3, r2
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f023 0307 	bic.w	r3, r3, #7
 8005562:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	2b04      	cmp	r3, #4
 8005574:	d117      	bne.n	80055a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00e      	beq.n	80055a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 faab 	bl	8005ae4 <DMA_CheckFifoParam>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d008      	beq.n	80055a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2240      	movs	r2, #64	; 0x40
 8005598:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055a2:	2301      	movs	r3, #1
 80055a4:	e016      	b.n	80055d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa62 	bl	8005a78 <DMA_CalcBaseAndBitshift>
 80055b4:	4603      	mov	r3, r0
 80055b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055bc:	223f      	movs	r2, #63	; 0x3f
 80055be:	409a      	lsls	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	f010803f 	.word	0xf010803f

080055e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_DMA_Start_IT+0x26>
 8005602:	2302      	movs	r3, #2
 8005604:	e040      	b.n	8005688 <HAL_DMA_Start_IT+0xa8>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b01      	cmp	r3, #1
 8005618:	d12f      	bne.n	800567a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2202      	movs	r2, #2
 800561e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f9f4 	bl	8005a1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005638:	223f      	movs	r2, #63	; 0x3f
 800563a:	409a      	lsls	r2, r3
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0216 	orr.w	r2, r2, #22
 800564e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0208 	orr.w	r2, r2, #8
 8005666:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e005      	b.n	8005686 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005682:	2302      	movs	r3, #2
 8005684:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005686:	7dfb      	ldrb	r3, [r7, #23]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d004      	beq.n	80056ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2280      	movs	r2, #128	; 0x80
 80056a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e00c      	b.n	80056c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2205      	movs	r2, #5
 80056b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0201 	bic.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056e0:	4b92      	ldr	r3, [pc, #584]	; (800592c <HAL_DMA_IRQHandler+0x258>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a92      	ldr	r2, [pc, #584]	; (8005930 <HAL_DMA_IRQHandler+0x25c>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	0a9b      	lsrs	r3, r3, #10
 80056ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fe:	2208      	movs	r2, #8
 8005700:	409a      	lsls	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4013      	ands	r3, r2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01a      	beq.n	8005740 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d013      	beq.n	8005740 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0204 	bic.w	r2, r2, #4
 8005726:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572c:	2208      	movs	r2, #8
 800572e:	409a      	lsls	r2, r3
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005738:	f043 0201 	orr.w	r2, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005744:	2201      	movs	r2, #1
 8005746:	409a      	lsls	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d012      	beq.n	8005776 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005762:	2201      	movs	r2, #1
 8005764:	409a      	lsls	r2, r3
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576e:	f043 0202 	orr.w	r2, r3, #2
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577a:	2204      	movs	r2, #4
 800577c:	409a      	lsls	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d012      	beq.n	80057ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00b      	beq.n	80057ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005798:	2204      	movs	r2, #4
 800579a:	409a      	lsls	r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a4:	f043 0204 	orr.w	r2, r3, #4
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b0:	2210      	movs	r2, #16
 80057b2:	409a      	lsls	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d043      	beq.n	8005844 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d03c      	beq.n	8005844 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ce:	2210      	movs	r2, #16
 80057d0:	409a      	lsls	r2, r3
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d018      	beq.n	8005816 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d108      	bne.n	8005804 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d024      	beq.n	8005844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
 8005802:	e01f      	b.n	8005844 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01b      	beq.n	8005844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	4798      	blx	r3
 8005814:	e016      	b.n	8005844 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005820:	2b00      	cmp	r3, #0
 8005822:	d107      	bne.n	8005834 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0208 	bic.w	r2, r2, #8
 8005832:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005848:	2220      	movs	r2, #32
 800584a:	409a      	lsls	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 808e 	beq.w	8005972 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 8086 	beq.w	8005972 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586a:	2220      	movs	r2, #32
 800586c:	409a      	lsls	r2, r3
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b05      	cmp	r3, #5
 800587c:	d136      	bne.n	80058ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0216 	bic.w	r2, r2, #22
 800588c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800589c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <HAL_DMA_IRQHandler+0x1da>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0208 	bic.w	r2, r2, #8
 80058bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c2:	223f      	movs	r2, #63	; 0x3f
 80058c4:	409a      	lsls	r2, r3
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d07d      	beq.n	80059de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	4798      	blx	r3
        }
        return;
 80058ea:	e078      	b.n	80059de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d01c      	beq.n	8005934 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d108      	bne.n	800591a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590c:	2b00      	cmp	r3, #0
 800590e:	d030      	beq.n	8005972 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	4798      	blx	r3
 8005918:	e02b      	b.n	8005972 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d027      	beq.n	8005972 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4798      	blx	r3
 800592a:	e022      	b.n	8005972 <HAL_DMA_IRQHandler+0x29e>
 800592c:	200000a0 	.word	0x200000a0
 8005930:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10f      	bne.n	8005962 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0210 	bic.w	r2, r2, #16
 8005950:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005976:	2b00      	cmp	r3, #0
 8005978:	d032      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d022      	beq.n	80059cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2205      	movs	r2, #5
 800598a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0201 	bic.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60bb      	str	r3, [r7, #8]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d307      	bcc.n	80059ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1f2      	bne.n	800599e <HAL_DMA_IRQHandler+0x2ca>
 80059b8:	e000      	b.n	80059bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80059ba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	4798      	blx	r3
 80059dc:	e000      	b.n	80059e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80059de:	bf00      	nop
    }
  }
}
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop

080059e8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059f6:	b2db      	uxtb	r3, r3
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b40      	cmp	r3, #64	; 0x40
 8005a48:	d108      	bne.n	8005a5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a5a:	e007      	b.n	8005a6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	60da      	str	r2, [r3, #12]
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	3b10      	subs	r3, #16
 8005a88:	4a14      	ldr	r2, [pc, #80]	; (8005adc <DMA_CalcBaseAndBitshift+0x64>)
 8005a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8e:	091b      	lsrs	r3, r3, #4
 8005a90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a92:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <DMA_CalcBaseAndBitshift+0x68>)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4413      	add	r3, r2
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d909      	bls.n	8005aba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005aae:	f023 0303 	bic.w	r3, r3, #3
 8005ab2:	1d1a      	adds	r2, r3, #4
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	659a      	str	r2, [r3, #88]	; 0x58
 8005ab8:	e007      	b.n	8005aca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ac2:	f023 0303 	bic.w	r3, r3, #3
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	aaaaaaab 	.word	0xaaaaaaab
 8005ae0:	0800f0f8 	.word	0x0800f0f8

08005ae4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d11f      	bne.n	8005b3e <DMA_CheckFifoParam+0x5a>
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d856      	bhi.n	8005bb2 <DMA_CheckFifoParam+0xce>
 8005b04:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <DMA_CheckFifoParam+0x28>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b1d 	.word	0x08005b1d
 8005b10:	08005b2f 	.word	0x08005b2f
 8005b14:	08005b1d 	.word	0x08005b1d
 8005b18:	08005bb3 	.word	0x08005bb3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d046      	beq.n	8005bb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b2c:	e043      	b.n	8005bb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b36:	d140      	bne.n	8005bba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b3c:	e03d      	b.n	8005bba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b46:	d121      	bne.n	8005b8c <DMA_CheckFifoParam+0xa8>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d837      	bhi.n	8005bbe <DMA_CheckFifoParam+0xda>
 8005b4e:	a201      	add	r2, pc, #4	; (adr r2, 8005b54 <DMA_CheckFifoParam+0x70>)
 8005b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b54:	08005b65 	.word	0x08005b65
 8005b58:	08005b6b 	.word	0x08005b6b
 8005b5c:	08005b65 	.word	0x08005b65
 8005b60:	08005b7d 	.word	0x08005b7d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	73fb      	strb	r3, [r7, #15]
      break;
 8005b68:	e030      	b.n	8005bcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d025      	beq.n	8005bc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b7a:	e022      	b.n	8005bc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b84:	d11f      	bne.n	8005bc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b8a:	e01c      	b.n	8005bc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d903      	bls.n	8005b9a <DMA_CheckFifoParam+0xb6>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d003      	beq.n	8005ba0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b98:	e018      	b.n	8005bcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b9e:	e015      	b.n	8005bcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00e      	beq.n	8005bca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb0:	e00b      	b.n	8005bca <DMA_CheckFifoParam+0xe6>
      break;
 8005bb2:	bf00      	nop
 8005bb4:	e00a      	b.n	8005bcc <DMA_CheckFifoParam+0xe8>
      break;
 8005bb6:	bf00      	nop
 8005bb8:	e008      	b.n	8005bcc <DMA_CheckFifoParam+0xe8>
      break;
 8005bba:	bf00      	nop
 8005bbc:	e006      	b.n	8005bcc <DMA_CheckFifoParam+0xe8>
      break;
 8005bbe:	bf00      	nop
 8005bc0:	e004      	b.n	8005bcc <DMA_CheckFifoParam+0xe8>
      break;
 8005bc2:	bf00      	nop
 8005bc4:	e002      	b.n	8005bcc <DMA_CheckFifoParam+0xe8>
      break;   
 8005bc6:	bf00      	nop
 8005bc8:	e000      	b.n	8005bcc <DMA_CheckFifoParam+0xe8>
      break;
 8005bca:	bf00      	nop
    }
  } 
  
  return status; 
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop

08005bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b089      	sub	sp, #36	; 0x24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
 8005bf6:	e165      	b.n	8005ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	f040 8154 	bne.w	8005ebe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d005      	beq.n	8005c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d130      	bne.n	8005c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	2203      	movs	r2, #3
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4013      	ands	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c64:	2201      	movs	r2, #1
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6c:	43db      	mvns	r3, r3
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	4013      	ands	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	091b      	lsrs	r3, r3, #4
 8005c7a:	f003 0201 	and.w	r2, r3, #1
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d017      	beq.n	8005ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	43db      	mvns	r3, r3
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d123      	bne.n	8005d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	08da      	lsrs	r2, r3, #3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3208      	adds	r2, #8
 8005ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	220f      	movs	r2, #15
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	08da      	lsrs	r2, r3, #3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3208      	adds	r2, #8
 8005d1a:	69b9      	ldr	r1, [r7, #24]
 8005d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	43db      	mvns	r3, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4013      	ands	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f003 0203 	and.w	r2, r3, #3
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80ae 	beq.w	8005ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	4b5d      	ldr	r3, [pc, #372]	; (8005edc <HAL_GPIO_Init+0x300>)
 8005d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6a:	4a5c      	ldr	r2, [pc, #368]	; (8005edc <HAL_GPIO_Init+0x300>)
 8005d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d70:	6453      	str	r3, [r2, #68]	; 0x44
 8005d72:	4b5a      	ldr	r3, [pc, #360]	; (8005edc <HAL_GPIO_Init+0x300>)
 8005d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d7e:	4a58      	ldr	r2, [pc, #352]	; (8005ee0 <HAL_GPIO_Init+0x304>)
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	089b      	lsrs	r3, r3, #2
 8005d84:	3302      	adds	r3, #2
 8005d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	220f      	movs	r2, #15
 8005d96:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a4f      	ldr	r2, [pc, #316]	; (8005ee4 <HAL_GPIO_Init+0x308>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d025      	beq.n	8005df6 <HAL_GPIO_Init+0x21a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a4e      	ldr	r2, [pc, #312]	; (8005ee8 <HAL_GPIO_Init+0x30c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d01f      	beq.n	8005df2 <HAL_GPIO_Init+0x216>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a4d      	ldr	r2, [pc, #308]	; (8005eec <HAL_GPIO_Init+0x310>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d019      	beq.n	8005dee <HAL_GPIO_Init+0x212>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a4c      	ldr	r2, [pc, #304]	; (8005ef0 <HAL_GPIO_Init+0x314>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d013      	beq.n	8005dea <HAL_GPIO_Init+0x20e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a4b      	ldr	r2, [pc, #300]	; (8005ef4 <HAL_GPIO_Init+0x318>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00d      	beq.n	8005de6 <HAL_GPIO_Init+0x20a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a4a      	ldr	r2, [pc, #296]	; (8005ef8 <HAL_GPIO_Init+0x31c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <HAL_GPIO_Init+0x206>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a49      	ldr	r2, [pc, #292]	; (8005efc <HAL_GPIO_Init+0x320>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d101      	bne.n	8005dde <HAL_GPIO_Init+0x202>
 8005dda:	2306      	movs	r3, #6
 8005ddc:	e00c      	b.n	8005df8 <HAL_GPIO_Init+0x21c>
 8005dde:	2307      	movs	r3, #7
 8005de0:	e00a      	b.n	8005df8 <HAL_GPIO_Init+0x21c>
 8005de2:	2305      	movs	r3, #5
 8005de4:	e008      	b.n	8005df8 <HAL_GPIO_Init+0x21c>
 8005de6:	2304      	movs	r3, #4
 8005de8:	e006      	b.n	8005df8 <HAL_GPIO_Init+0x21c>
 8005dea:	2303      	movs	r3, #3
 8005dec:	e004      	b.n	8005df8 <HAL_GPIO_Init+0x21c>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e002      	b.n	8005df8 <HAL_GPIO_Init+0x21c>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <HAL_GPIO_Init+0x21c>
 8005df6:	2300      	movs	r3, #0
 8005df8:	69fa      	ldr	r2, [r7, #28]
 8005dfa:	f002 0203 	and.w	r2, r2, #3
 8005dfe:	0092      	lsls	r2, r2, #2
 8005e00:	4093      	lsls	r3, r2
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e08:	4935      	ldr	r1, [pc, #212]	; (8005ee0 <HAL_GPIO_Init+0x304>)
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	089b      	lsrs	r3, r3, #2
 8005e0e:	3302      	adds	r3, #2
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e16:	4b3a      	ldr	r3, [pc, #232]	; (8005f00 <HAL_GPIO_Init+0x324>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	43db      	mvns	r3, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4013      	ands	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e3a:	4a31      	ldr	r2, [pc, #196]	; (8005f00 <HAL_GPIO_Init+0x324>)
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e40:	4b2f      	ldr	r3, [pc, #188]	; (8005f00 <HAL_GPIO_Init+0x324>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e64:	4a26      	ldr	r2, [pc, #152]	; (8005f00 <HAL_GPIO_Init+0x324>)
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e6a:	4b25      	ldr	r3, [pc, #148]	; (8005f00 <HAL_GPIO_Init+0x324>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	43db      	mvns	r3, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	4013      	ands	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e8e:	4a1c      	ldr	r2, [pc, #112]	; (8005f00 <HAL_GPIO_Init+0x324>)
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e94:	4b1a      	ldr	r3, [pc, #104]	; (8005f00 <HAL_GPIO_Init+0x324>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005eb8:	4a11      	ldr	r2, [pc, #68]	; (8005f00 <HAL_GPIO_Init+0x324>)
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	61fb      	str	r3, [r7, #28]
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	2b0f      	cmp	r3, #15
 8005ec8:	f67f ae96 	bls.w	8005bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	3724      	adds	r7, #36	; 0x24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	40013800 	.word	0x40013800
 8005ee4:	40020000 	.word	0x40020000
 8005ee8:	40020400 	.word	0x40020400
 8005eec:	40020800 	.word	0x40020800
 8005ef0:	40020c00 	.word	0x40020c00
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	40021400 	.word	0x40021400
 8005efc:	40021800 	.word	0x40021800
 8005f00:	40013c00 	.word	0x40013c00

08005f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	807b      	strh	r3, [r7, #2]
 8005f10:	4613      	mov	r3, r2
 8005f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f14:	787b      	ldrb	r3, [r7, #1]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f1a:	887a      	ldrh	r2, [r7, #2]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f20:	e003      	b.n	8005f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f22:	887b      	ldrh	r3, [r7, #2]
 8005f24:	041a      	lsls	r2, r3, #16
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	619a      	str	r2, [r3, #24]
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
	...

08005f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e12b      	b.n	80061a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fe faae 	bl	80044c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2224      	movs	r2, #36	; 0x24
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0201 	bic.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f9c:	f003 f8f4 	bl	8009188 <HAL_RCC_GetPCLK1Freq>
 8005fa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4a81      	ldr	r2, [pc, #516]	; (80061ac <HAL_I2C_Init+0x274>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d807      	bhi.n	8005fbc <HAL_I2C_Init+0x84>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4a80      	ldr	r2, [pc, #512]	; (80061b0 <HAL_I2C_Init+0x278>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	bf94      	ite	ls
 8005fb4:	2301      	movls	r3, #1
 8005fb6:	2300      	movhi	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	e006      	b.n	8005fca <HAL_I2C_Init+0x92>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4a7d      	ldr	r2, [pc, #500]	; (80061b4 <HAL_I2C_Init+0x27c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	bf94      	ite	ls
 8005fc4:	2301      	movls	r3, #1
 8005fc6:	2300      	movhi	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e0e7      	b.n	80061a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4a78      	ldr	r2, [pc, #480]	; (80061b8 <HAL_I2C_Init+0x280>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	0c9b      	lsrs	r3, r3, #18
 8005fdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	4a6a      	ldr	r2, [pc, #424]	; (80061ac <HAL_I2C_Init+0x274>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d802      	bhi.n	800600c <HAL_I2C_Init+0xd4>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	3301      	adds	r3, #1
 800600a:	e009      	b.n	8006020 <HAL_I2C_Init+0xe8>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006012:	fb02 f303 	mul.w	r3, r2, r3
 8006016:	4a69      	ldr	r2, [pc, #420]	; (80061bc <HAL_I2C_Init+0x284>)
 8006018:	fba2 2303 	umull	r2, r3, r2, r3
 800601c:	099b      	lsrs	r3, r3, #6
 800601e:	3301      	adds	r3, #1
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	430b      	orrs	r3, r1
 8006026:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006032:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	495c      	ldr	r1, [pc, #368]	; (80061ac <HAL_I2C_Init+0x274>)
 800603c:	428b      	cmp	r3, r1
 800603e:	d819      	bhi.n	8006074 <HAL_I2C_Init+0x13c>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	1e59      	subs	r1, r3, #1
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	fbb1 f3f3 	udiv	r3, r1, r3
 800604e:	1c59      	adds	r1, r3, #1
 8006050:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006054:	400b      	ands	r3, r1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <HAL_I2C_Init+0x138>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1e59      	subs	r1, r3, #1
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	fbb1 f3f3 	udiv	r3, r1, r3
 8006068:	3301      	adds	r3, #1
 800606a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800606e:	e051      	b.n	8006114 <HAL_I2C_Init+0x1dc>
 8006070:	2304      	movs	r3, #4
 8006072:	e04f      	b.n	8006114 <HAL_I2C_Init+0x1dc>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d111      	bne.n	80060a0 <HAL_I2C_Init+0x168>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	1e58      	subs	r0, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6859      	ldr	r1, [r3, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	440b      	add	r3, r1
 800608a:	fbb0 f3f3 	udiv	r3, r0, r3
 800608e:	3301      	adds	r3, #1
 8006090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006094:	2b00      	cmp	r3, #0
 8006096:	bf0c      	ite	eq
 8006098:	2301      	moveq	r3, #1
 800609a:	2300      	movne	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	e012      	b.n	80060c6 <HAL_I2C_Init+0x18e>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	1e58      	subs	r0, r3, #1
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6859      	ldr	r1, [r3, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	0099      	lsls	r1, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80060b6:	3301      	adds	r3, #1
 80060b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060bc:	2b00      	cmp	r3, #0
 80060be:	bf0c      	ite	eq
 80060c0:	2301      	moveq	r3, #1
 80060c2:	2300      	movne	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_I2C_Init+0x196>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e022      	b.n	8006114 <HAL_I2C_Init+0x1dc>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10e      	bne.n	80060f4 <HAL_I2C_Init+0x1bc>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	1e58      	subs	r0, r3, #1
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6859      	ldr	r1, [r3, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	440b      	add	r3, r1
 80060e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80060e8:	3301      	adds	r3, #1
 80060ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f2:	e00f      	b.n	8006114 <HAL_I2C_Init+0x1dc>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	1e58      	subs	r0, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6859      	ldr	r1, [r3, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	440b      	add	r3, r1
 8006102:	0099      	lsls	r1, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	fbb0 f3f3 	udiv	r3, r0, r3
 800610a:	3301      	adds	r3, #1
 800610c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	6809      	ldr	r1, [r1, #0]
 8006118:	4313      	orrs	r3, r2
 800611a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69da      	ldr	r2, [r3, #28]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006142:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6911      	ldr	r1, [r2, #16]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	68d2      	ldr	r2, [r2, #12]
 800614e:	4311      	orrs	r1, r2
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	430b      	orrs	r3, r1
 8006156:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695a      	ldr	r2, [r3, #20]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	000186a0 	.word	0x000186a0
 80061b0:	001e847f 	.word	0x001e847f
 80061b4:	003d08ff 	.word	0x003d08ff
 80061b8:	431bde83 	.word	0x431bde83
 80061bc:	10624dd3 	.word	0x10624dd3

080061c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	4608      	mov	r0, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	461a      	mov	r2, r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	817b      	strh	r3, [r7, #10]
 80061d2:	460b      	mov	r3, r1
 80061d4:	813b      	strh	r3, [r7, #8]
 80061d6:	4613      	mov	r3, r2
 80061d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061da:	f7fe ffef 	bl	80051bc <HAL_GetTick>
 80061de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b20      	cmp	r3, #32
 80061ea:	f040 80d9 	bne.w	80063a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	2319      	movs	r3, #25
 80061f4:	2201      	movs	r2, #1
 80061f6:	496d      	ldr	r1, [pc, #436]	; (80063ac <HAL_I2C_Mem_Write+0x1ec>)
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f002 fca9 	bl	8008b50 <I2C_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006204:	2302      	movs	r3, #2
 8006206:	e0cc      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_I2C_Mem_Write+0x56>
 8006212:	2302      	movs	r3, #2
 8006214:	e0c5      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e2>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b01      	cmp	r3, #1
 800622a:	d007      	beq.n	800623c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0201 	orr.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800624a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2221      	movs	r2, #33	; 0x21
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2240      	movs	r2, #64	; 0x40
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a3a      	ldr	r2, [r7, #32]
 8006266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800626c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4a4d      	ldr	r2, [pc, #308]	; (80063b0 <HAL_I2C_Mem_Write+0x1f0>)
 800627c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800627e:	88f8      	ldrh	r0, [r7, #6]
 8006280:	893a      	ldrh	r2, [r7, #8]
 8006282:	8979      	ldrh	r1, [r7, #10]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	9301      	str	r3, [sp, #4]
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	4603      	mov	r3, r0
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f002 f926 	bl	80084e0 <I2C_RequestMemoryWrite>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d052      	beq.n	8006340 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e081      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f002 fd2a 	bl	8008cfc <I2C_WaitOnTXEFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00d      	beq.n	80062ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d107      	bne.n	80062c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e06b      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	781a      	ldrb	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b04      	cmp	r3, #4
 8006306:	d11b      	bne.n	8006340 <HAL_I2C_Mem_Write+0x180>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630c:	2b00      	cmp	r3, #0
 800630e:	d017      	beq.n	8006340 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	781a      	ldrb	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006336:	b29b      	uxth	r3, r3
 8006338:	3b01      	subs	r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1aa      	bne.n	800629e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f002 fd16 	bl	8008d7e <I2C_WaitOnBTFFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00d      	beq.n	8006374 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	2b04      	cmp	r3, #4
 800635e:	d107      	bne.n	8006370 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800636e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e016      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	e000      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
  }
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	00100002 	.word	0x00100002
 80063b0:	ffff0000 	.word	0xffff0000

080063b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08c      	sub	sp, #48	; 0x30
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	4608      	mov	r0, r1
 80063be:	4611      	mov	r1, r2
 80063c0:	461a      	mov	r2, r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	817b      	strh	r3, [r7, #10]
 80063c6:	460b      	mov	r3, r1
 80063c8:	813b      	strh	r3, [r7, #8]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063ce:	f7fe fef5 	bl	80051bc <HAL_GetTick>
 80063d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b20      	cmp	r3, #32
 80063de:	f040 8208 	bne.w	80067f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	2319      	movs	r3, #25
 80063e8:	2201      	movs	r2, #1
 80063ea:	497b      	ldr	r1, [pc, #492]	; (80065d8 <HAL_I2C_Mem_Read+0x224>)
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f002 fbaf 	bl	8008b50 <I2C_WaitOnFlagUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80063f8:	2302      	movs	r3, #2
 80063fa:	e1fb      	b.n	80067f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006402:	2b01      	cmp	r3, #1
 8006404:	d101      	bne.n	800640a <HAL_I2C_Mem_Read+0x56>
 8006406:	2302      	movs	r3, #2
 8006408:	e1f4      	b.n	80067f4 <HAL_I2C_Mem_Read+0x440>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b01      	cmp	r3, #1
 800641e:	d007      	beq.n	8006430 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800643e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2222      	movs	r2, #34	; 0x22
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2240      	movs	r2, #64	; 0x40
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4a5b      	ldr	r2, [pc, #364]	; (80065dc <HAL_I2C_Mem_Read+0x228>)
 8006470:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006472:	88f8      	ldrh	r0, [r7, #6]
 8006474:	893a      	ldrh	r2, [r7, #8]
 8006476:	8979      	ldrh	r1, [r7, #10]
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4603      	mov	r3, r0
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f002 f8c2 	bl	800860c <I2C_RequestMemoryRead>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e1b0      	b.n	80067f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006496:	2b00      	cmp	r3, #0
 8006498:	d113      	bne.n	80064c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800649a:	2300      	movs	r3, #0
 800649c:	623b      	str	r3, [r7, #32]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	623b      	str	r3, [r7, #32]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	e184      	b.n	80067cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d11b      	bne.n	8006502 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	61fb      	str	r3, [r7, #28]
 80064ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	e164      	b.n	80067cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006506:	2b02      	cmp	r3, #2
 8006508:	d11b      	bne.n	8006542 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006518:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006528:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800652a:	2300      	movs	r3, #0
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	61bb      	str	r3, [r7, #24]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	e144      	b.n	80067cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006558:	e138      	b.n	80067cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	2b03      	cmp	r3, #3
 8006560:	f200 80f1 	bhi.w	8006746 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	2b01      	cmp	r3, #1
 800656a:	d123      	bne.n	80065b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800656c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800656e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f002 fc77 	bl	8008e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e139      	b.n	80067f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659c:	3b01      	subs	r3, #1
 800659e:	b29a      	uxth	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065b2:	e10b      	b.n	80067cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d14e      	bne.n	800665a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	2200      	movs	r2, #0
 80065c4:	4906      	ldr	r1, [pc, #24]	; (80065e0 <HAL_I2C_Mem_Read+0x22c>)
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f002 fac2 	bl	8008b50 <I2C_WaitOnFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d008      	beq.n	80065e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e10e      	b.n	80067f4 <HAL_I2C_Mem_Read+0x440>
 80065d6:	bf00      	nop
 80065d8:	00100002 	.word	0x00100002
 80065dc:	ffff0000 	.word	0xffff0000
 80065e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691a      	ldr	r2, [r3, #16]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006658:	e0b8      	b.n	80067cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	2200      	movs	r2, #0
 8006662:	4966      	ldr	r1, [pc, #408]	; (80067fc <HAL_I2C_Mem_Read+0x448>)
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f002 fa73 	bl	8008b50 <I2C_WaitOnFlagUntilTimeout>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e0bf      	b.n	80067f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	691a      	ldr	r2, [r3, #16]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	2200      	movs	r2, #0
 80066be:	494f      	ldr	r1, [pc, #316]	; (80067fc <HAL_I2C_Mem_Read+0x448>)
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f002 fa45 	bl	8008b50 <I2C_WaitOnFlagUntilTimeout>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e091      	b.n	80067f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691a      	ldr	r2, [r3, #16]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	691a      	ldr	r2, [r3, #16]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006744:	e042      	b.n	80067cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f002 fb8a 	bl	8008e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e04c      	b.n	80067f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b04      	cmp	r3, #4
 8006798:	d118      	bne.n	80067cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	b2d2      	uxtb	r2, r2
 80067a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b6:	3b01      	subs	r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f47f aec2 	bne.w	800655a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e000      	b.n	80067f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80067f2:	2302      	movs	r3, #2
  }
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3728      	adds	r7, #40	; 0x28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	00010004 	.word	0x00010004

08006800 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08a      	sub	sp, #40	; 0x28
 8006804:	af02      	add	r7, sp, #8
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	4608      	mov	r0, r1
 800680a:	4611      	mov	r1, r2
 800680c:	461a      	mov	r2, r3
 800680e:	4603      	mov	r3, r0
 8006810:	817b      	strh	r3, [r7, #10]
 8006812:	460b      	mov	r3, r1
 8006814:	813b      	strh	r3, [r7, #8]
 8006816:	4613      	mov	r3, r2
 8006818:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800681e:	f7fe fccd 	bl	80051bc <HAL_GetTick>
 8006822:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b20      	cmp	r3, #32
 800682e:	f040 813a 	bne.w	8006aa6 <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006832:	4b9f      	ldr	r3, [pc, #636]	; (8006ab0 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	08db      	lsrs	r3, r3, #3
 8006838:	4a9e      	ldr	r2, [pc, #632]	; (8006ab4 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800683a:	fba2 2303 	umull	r2, r3, r2, r3
 800683e:	0a1a      	lsrs	r2, r3, #8
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009a      	lsls	r2, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	3b01      	subs	r3, #1
 8006850:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d116      	bne.n	8006886 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2220      	movs	r2, #32
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	f043 0220 	orr.w	r2, r3, #32
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e110      	b.n	8006aa8 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b02      	cmp	r3, #2
 8006892:	d0db      	beq.n	800684c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_I2C_Mem_Write_DMA+0xa2>
 800689e:	2302      	movs	r3, #2
 80068a0:	e102      	b.n	8006aa8 <HAL_I2C_Mem_Write_DMA+0x2a8>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d007      	beq.n	80068c8 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2221      	movs	r2, #33	; 0x21
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2240      	movs	r2, #64	; 0x40
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80068f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fe:	b29a      	uxth	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4a6c      	ldr	r2, [pc, #432]	; (8006ab8 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8006908:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800690a:	897a      	ldrh	r2, [r7, #10]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8006910:	893a      	ldrh	r2, [r7, #8]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006916:	88fa      	ldrh	r2, [r7, #6]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 80a9 	beq.w	8006a7e <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006930:	2b00      	cmp	r3, #0
 8006932:	d02a      	beq.n	800698a <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006938:	4a60      	ldr	r2, [pc, #384]	; (8006abc <HAL_I2C_Mem_Write_DMA+0x2bc>)
 800693a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006940:	4a5f      	ldr	r2, [pc, #380]	; (8006ac0 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 8006942:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006948:	2200      	movs	r2, #0
 800694a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006950:	2200      	movs	r2, #0
 8006952:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006958:	2200      	movs	r2, #0
 800695a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006960:	2200      	movs	r2, #0
 8006962:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	4619      	mov	r1, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3310      	adds	r3, #16
 8006974:	461a      	mov	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697a:	f7fe fe31 	bl	80055e0 <HAL_DMA_Start_IT>
 800697e:	4603      	mov	r3, r0
 8006980:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006982:	7efb      	ldrb	r3, [r7, #27]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d166      	bne.n	8006a56 <HAL_I2C_Mem_Write_DMA+0x256>
 8006988:	e013      	b.n	80069b2 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2220      	movs	r2, #32
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e07a      	b.n	8006aa8 <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80069b2:	88f8      	ldrh	r0, [r7, #6]
 80069b4:	893a      	ldrh	r2, [r7, #8]
 80069b6:	8979      	ldrh	r1, [r7, #10]
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	2323      	movs	r3, #35	; 0x23
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	4603      	mov	r3, r0
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f001 fd8c 	bl	80084e0 <I2C_RequestMemoryWrite>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d022      	beq.n	8006a14 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe fe5c 	bl	8005690 <HAL_DMA_Abort_IT>
 80069d8:	4603      	mov	r3, r0
 80069da:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e0:	2200      	movs	r2, #0
 80069e2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0201 	bic.w	r2, r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e049      	b.n	8006aa8 <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a14:	2300      	movs	r3, #0
 8006a16:	613b      	str	r3, [r7, #16]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	613b      	str	r3, [r7, #16]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a40:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a50:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e028      	b.n	8006aa8 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f043 0210 	orr.w	r2, r3, #16
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e014      	b.n	8006aa8 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 8006aa6:	2302      	movs	r3, #2
  }
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	200000a0 	.word	0x200000a0
 8006ab4:	14f8b589 	.word	0x14f8b589
 8006ab8:	ffff0000 	.word	0xffff0000
 8006abc:	080087dd 	.word	0x080087dd
 8006ac0:	08008987 	.word	0x08008987

08006ac4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08a      	sub	sp, #40	; 0x28
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	607a      	str	r2, [r7, #4]
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006ad4:	f7fe fb72 	bl	80051bc <HAL_GetTick>
 8006ad8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8006ada:	2301      	movs	r3, #1
 8006adc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b20      	cmp	r3, #32
 8006ae8:	f040 8111 	bne.w	8006d0e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	2319      	movs	r3, #25
 8006af2:	2201      	movs	r2, #1
 8006af4:	4988      	ldr	r1, [pc, #544]	; (8006d18 <HAL_I2C_IsDeviceReady+0x254>)
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f002 f82a 	bl	8008b50 <I2C_WaitOnFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006b02:	2302      	movs	r3, #2
 8006b04:	e104      	b.n	8006d10 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_I2C_IsDeviceReady+0x50>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e0fd      	b.n	8006d10 <HAL_I2C_IsDeviceReady+0x24c>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d007      	beq.n	8006b3a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f042 0201 	orr.w	r2, r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2224      	movs	r2, #36	; 0x24
 8006b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4a70      	ldr	r2, [pc, #448]	; (8006d1c <HAL_I2C_IsDeviceReady+0x258>)
 8006b5c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b6c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f001 ffe8 	bl	8008b50 <I2C_WaitOnFlagUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00d      	beq.n	8006ba2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b94:	d103      	bne.n	8006b9e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b9c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e0b6      	b.n	8006d10 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ba2:	897b      	ldrh	r3, [r7, #10]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bb0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006bb2:	f7fe fb03 	bl	80051bc <HAL_GetTick>
 8006bb6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	bf0c      	ite	eq
 8006bc6:	2301      	moveq	r3, #1
 8006bc8:	2300      	movne	r3, #0
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bdc:	bf0c      	ite	eq
 8006bde:	2301      	moveq	r3, #1
 8006be0:	2300      	movne	r3, #0
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006be6:	e025      	b.n	8006c34 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006be8:	f7fe fae8 	bl	80051bc <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d302      	bcc.n	8006bfe <HAL_I2C_IsDeviceReady+0x13a>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	22a0      	movs	r2, #160	; 0xa0
 8006c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	bf0c      	ite	eq
 8006c14:	2301      	moveq	r3, #1
 8006c16:	2300      	movne	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c2a:	bf0c      	ite	eq
 8006c2c:	2301      	moveq	r3, #1
 8006c2e:	2300      	movne	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2ba0      	cmp	r3, #160	; 0xa0
 8006c3e:	d005      	beq.n	8006c4c <HAL_I2C_IsDeviceReady+0x188>
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d102      	bne.n	8006c4c <HAL_I2C_IsDeviceReady+0x188>
 8006c46:	7dbb      	ldrb	r3, [r7, #22]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0cd      	beq.n	8006be8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d129      	bne.n	8006cb6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c70:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c72:	2300      	movs	r3, #0
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	2319      	movs	r3, #25
 8006c8e:	2201      	movs	r2, #1
 8006c90:	4921      	ldr	r1, [pc, #132]	; (8006d18 <HAL_I2C_IsDeviceReady+0x254>)
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f001 ff5c 	bl	8008b50 <I2C_WaitOnFlagUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e036      	b.n	8006d10 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e02c      	b.n	8006d10 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	2319      	movs	r3, #25
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	490f      	ldr	r1, [pc, #60]	; (8006d18 <HAL_I2C_IsDeviceReady+0x254>)
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f001 ff38 	bl	8008b50 <I2C_WaitOnFlagUntilTimeout>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e012      	b.n	8006d10 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	3301      	adds	r3, #1
 8006cee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	f4ff af32 	bcc.w	8006b5e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006d0e:	2302      	movs	r3, #2
  }
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3720      	adds	r7, #32
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	00100002 	.word	0x00100002
 8006d1c:	ffff0000 	.word	0xffff0000

08006d20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d48:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	2b10      	cmp	r3, #16
 8006d4e:	d003      	beq.n	8006d58 <HAL_I2C_EV_IRQHandler+0x38>
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b40      	cmp	r3, #64	; 0x40
 8006d54:	f040 80c1 	bne.w	8006eda <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10d      	bne.n	8006d8e <HAL_I2C_EV_IRQHandler+0x6e>
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006d78:	d003      	beq.n	8006d82 <HAL_I2C_EV_IRQHandler+0x62>
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006d80:	d101      	bne.n	8006d86 <HAL_I2C_EV_IRQHandler+0x66>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e000      	b.n	8006d88 <HAL_I2C_EV_IRQHandler+0x68>
 8006d86:	2300      	movs	r3, #0
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	f000 8132 	beq.w	8006ff2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00c      	beq.n	8006db2 <HAL_I2C_EV_IRQHandler+0x92>
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	0a5b      	lsrs	r3, r3, #9
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d006      	beq.n	8006db2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f002 f8e2 	bl	8008f6e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fd7d 	bl	80078aa <I2C_Master_SB>
 8006db0:	e092      	b.n	8006ed8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	08db      	lsrs	r3, r3, #3
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <HAL_I2C_EV_IRQHandler+0xb2>
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	0a5b      	lsrs	r3, r3, #9
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fdf3 	bl	80079b6 <I2C_Master_ADD10>
 8006dd0:	e082      	b.n	8006ed8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	085b      	lsrs	r3, r3, #1
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d009      	beq.n	8006df2 <HAL_I2C_EV_IRQHandler+0xd2>
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	0a5b      	lsrs	r3, r3, #9
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fe0d 	bl	8007a0a <I2C_Master_ADDR>
 8006df0:	e072      	b.n	8006ed8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	089b      	lsrs	r3, r3, #2
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d03b      	beq.n	8006e76 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e0c:	f000 80f3 	beq.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	09db      	lsrs	r3, r3, #7
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00f      	beq.n	8006e3c <HAL_I2C_EV_IRQHandler+0x11c>
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	0a9b      	lsrs	r3, r3, #10
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d009      	beq.n	8006e3c <HAL_I2C_EV_IRQHandler+0x11c>
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	089b      	lsrs	r3, r3, #2
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d103      	bne.n	8006e3c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f9f7 	bl	8007228 <I2C_MasterTransmit_TXE>
 8006e3a:	e04d      	b.n	8006ed8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	089b      	lsrs	r3, r3, #2
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80d6 	beq.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	0a5b      	lsrs	r3, r3, #9
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 80cf 	beq.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	2b21      	cmp	r3, #33	; 0x21
 8006e5c:	d103      	bne.n	8006e66 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa7e 	bl	8007360 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e64:	e0c7      	b.n	8006ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	2b40      	cmp	r3, #64	; 0x40
 8006e6a:	f040 80c4 	bne.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 faec 	bl	800744c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e74:	e0bf      	b.n	8006ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e84:	f000 80b7 	beq.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	099b      	lsrs	r3, r3, #6
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00f      	beq.n	8006eb4 <HAL_I2C_EV_IRQHandler+0x194>
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	0a9b      	lsrs	r3, r3, #10
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d009      	beq.n	8006eb4 <HAL_I2C_EV_IRQHandler+0x194>
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	089b      	lsrs	r3, r3, #2
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d103      	bne.n	8006eb4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fb61 	bl	8007574 <I2C_MasterReceive_RXNE>
 8006eb2:	e011      	b.n	8006ed8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	089b      	lsrs	r3, r3, #2
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 809a 	beq.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	0a5b      	lsrs	r3, r3, #9
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 8093 	beq.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fc00 	bl	80076d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ed6:	e08e      	b.n	8006ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006ed8:	e08d      	b.n	8006ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	e007      	b.n	8006efc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	085b      	lsrs	r3, r3, #1
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d012      	beq.n	8006f2e <HAL_I2C_EV_IRQHandler+0x20e>
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	0a5b      	lsrs	r3, r3, #9
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00c      	beq.n	8006f2e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006f24:	69b9      	ldr	r1, [r7, #24]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 ffbe 	bl	8007ea8 <I2C_Slave_ADDR>
 8006f2c:	e066      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	091b      	lsrs	r3, r3, #4
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d009      	beq.n	8006f4e <HAL_I2C_EV_IRQHandler+0x22e>
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	0a5b      	lsrs	r3, r3, #9
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fff8 	bl	8007f3c <I2C_Slave_STOPF>
 8006f4c:	e056      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b21      	cmp	r3, #33	; 0x21
 8006f52:	d002      	beq.n	8006f5a <HAL_I2C_EV_IRQHandler+0x23a>
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	2b29      	cmp	r3, #41	; 0x29
 8006f58:	d125      	bne.n	8006fa6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	09db      	lsrs	r3, r3, #7
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00f      	beq.n	8006f86 <HAL_I2C_EV_IRQHandler+0x266>
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	0a9b      	lsrs	r3, r3, #10
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d009      	beq.n	8006f86 <HAL_I2C_EV_IRQHandler+0x266>
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	089b      	lsrs	r3, r3, #2
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d103      	bne.n	8006f86 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fed4 	bl	8007d2c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f84:	e039      	b.n	8006ffa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	089b      	lsrs	r3, r3, #2
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d033      	beq.n	8006ffa <HAL_I2C_EV_IRQHandler+0x2da>
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	0a5b      	lsrs	r3, r3, #9
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d02d      	beq.n	8006ffa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 ff01 	bl	8007da6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fa4:	e029      	b.n	8006ffa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	099b      	lsrs	r3, r3, #6
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00f      	beq.n	8006fd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	0a9b      	lsrs	r3, r3, #10
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d009      	beq.n	8006fd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	089b      	lsrs	r3, r3, #2
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d103      	bne.n	8006fd2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 ff0c 	bl	8007de8 <I2C_SlaveReceive_RXNE>
 8006fd0:	e014      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	089b      	lsrs	r3, r3, #2
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00e      	beq.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2dc>
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	0a5b      	lsrs	r3, r3, #9
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d008      	beq.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 ff3a 	bl	8007e64 <I2C_SlaveReceive_BTF>
 8006ff0:	e004      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006ff2:	bf00      	nop
 8006ff4:	e002      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ff6:	bf00      	nop
 8006ff8:	e000      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ffa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006ffc:	3720      	adds	r7, #32
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b08a      	sub	sp, #40	; 0x28
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800701a:	2300      	movs	r3, #0
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007024:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	0a1b      	lsrs	r3, r3, #8
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00e      	beq.n	8007050 <HAL_I2C_ER_IRQHandler+0x4e>
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	0a1b      	lsrs	r3, r3, #8
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d008      	beq.n	8007050 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	f043 0301 	orr.w	r3, r3, #1
 8007044:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800704e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	0a5b      	lsrs	r3, r3, #9
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00e      	beq.n	800707a <HAL_I2C_ER_IRQHandler+0x78>
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	0a1b      	lsrs	r3, r3, #8
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b00      	cmp	r3, #0
 8007066:	d008      	beq.n	800707a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	f043 0302 	orr.w	r3, r3, #2
 800706e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007078:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	0a9b      	lsrs	r3, r3, #10
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d03f      	beq.n	8007106 <HAL_I2C_ER_IRQHandler+0x104>
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	0a1b      	lsrs	r3, r3, #8
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d039      	beq.n	8007106 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007092:	7efb      	ldrb	r3, [r7, #27]
 8007094:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709a:	b29b      	uxth	r3, r3
 800709c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070aa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80070ac:	7ebb      	ldrb	r3, [r7, #26]
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d112      	bne.n	80070d8 <HAL_I2C_ER_IRQHandler+0xd6>
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10f      	bne.n	80070d8 <HAL_I2C_ER_IRQHandler+0xd6>
 80070b8:	7cfb      	ldrb	r3, [r7, #19]
 80070ba:	2b21      	cmp	r3, #33	; 0x21
 80070bc:	d008      	beq.n	80070d0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80070be:	7cfb      	ldrb	r3, [r7, #19]
 80070c0:	2b29      	cmp	r3, #41	; 0x29
 80070c2:	d005      	beq.n	80070d0 <HAL_I2C_ER_IRQHandler+0xce>
 80070c4:	7cfb      	ldrb	r3, [r7, #19]
 80070c6:	2b28      	cmp	r3, #40	; 0x28
 80070c8:	d106      	bne.n	80070d8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b21      	cmp	r3, #33	; 0x21
 80070ce:	d103      	bne.n	80070d8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 f863 	bl	800819c <I2C_Slave_AF>
 80070d6:	e016      	b.n	8007106 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070e0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	f043 0304 	orr.w	r3, r3, #4
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80070ea:	7efb      	ldrb	r3, [r7, #27]
 80070ec:	2b10      	cmp	r3, #16
 80070ee:	d002      	beq.n	80070f6 <HAL_I2C_ER_IRQHandler+0xf4>
 80070f0:	7efb      	ldrb	r3, [r7, #27]
 80070f2:	2b40      	cmp	r3, #64	; 0x40
 80070f4:	d107      	bne.n	8007106 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007104:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	0adb      	lsrs	r3, r3, #11
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00e      	beq.n	8007130 <HAL_I2C_ER_IRQHandler+0x12e>
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	0a1b      	lsrs	r3, r3, #8
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d008      	beq.n	8007130 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	f043 0308 	orr.w	r3, r3, #8
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800712e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	2b00      	cmp	r3, #0
 8007134:	d008      	beq.n	8007148 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	431a      	orrs	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 f89a 	bl	800827c <I2C_ITError>
  }
}
 8007148:	bf00      	nop
 800714a:	3728      	adds	r7, #40	; 0x28
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
 80071ac:	4613      	mov	r3, r2
 80071ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721a:	b2db      	uxtb	r3, r3
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007236:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800723e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800724a:	2b00      	cmp	r3, #0
 800724c:	d150      	bne.n	80072f0 <I2C_MasterTransmit_TXE+0xc8>
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	2b21      	cmp	r3, #33	; 0x21
 8007252:	d14d      	bne.n	80072f0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b08      	cmp	r3, #8
 8007258:	d01d      	beq.n	8007296 <I2C_MasterTransmit_TXE+0x6e>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b20      	cmp	r3, #32
 800725e:	d01a      	beq.n	8007296 <I2C_MasterTransmit_TXE+0x6e>
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007266:	d016      	beq.n	8007296 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007276:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2211      	movs	r2, #17
 800727c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff ff5e 	bl	8007150 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007294:	e060      	b.n	8007358 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072a4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072b4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b40      	cmp	r3, #64	; 0x40
 80072ce:	d107      	bne.n	80072e0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7fc ffff 	bl	80042dc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072de:	e03b      	b.n	8007358 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff ff31 	bl	8007150 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072ee:	e033      	b.n	8007358 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	2b21      	cmp	r3, #33	; 0x21
 80072f4:	d005      	beq.n	8007302 <I2C_MasterTransmit_TXE+0xda>
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b40      	cmp	r3, #64	; 0x40
 80072fa:	d12d      	bne.n	8007358 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	2b22      	cmp	r3, #34	; 0x22
 8007300:	d12a      	bne.n	8007358 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d108      	bne.n	800731e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800731a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800731c:	e01c      	b.n	8007358 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b40      	cmp	r3, #64	; 0x40
 8007328:	d103      	bne.n	8007332 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f88e 	bl	800744c <I2C_MemoryTransmit_TXE_BTF>
}
 8007330:	e012      	b.n	8007358 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	781a      	ldrb	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734c:	b29b      	uxth	r3, r3
 800734e:	3b01      	subs	r3, #1
 8007350:	b29a      	uxth	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007356:	e7ff      	b.n	8007358 <I2C_MasterTransmit_TXE+0x130>
 8007358:	bf00      	nop
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b21      	cmp	r3, #33	; 0x21
 8007378:	d164      	bne.n	8007444 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d012      	beq.n	80073aa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	781a      	ldrb	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739e:	b29b      	uxth	r3, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80073a8:	e04c      	b.n	8007444 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d01d      	beq.n	80073ec <I2C_MasterTransmit_BTF+0x8c>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b20      	cmp	r3, #32
 80073b4:	d01a      	beq.n	80073ec <I2C_MasterTransmit_BTF+0x8c>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073bc:	d016      	beq.n	80073ec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073cc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2211      	movs	r2, #17
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7ff feb3 	bl	8007150 <HAL_I2C_MasterTxCpltCallback>
}
 80073ea:	e02b      	b.n	8007444 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073fa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800740a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d107      	bne.n	8007436 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fc ff54 	bl	80042dc <HAL_I2C_MemTxCpltCallback>
}
 8007434:	e006      	b.n	8007444 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff fe86 	bl	8007150 <HAL_I2C_MasterTxCpltCallback>
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007460:	2b00      	cmp	r3, #0
 8007462:	d11d      	bne.n	80074a0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007468:	2b01      	cmp	r3, #1
 800746a:	d10b      	bne.n	8007484 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007470:	b2da      	uxtb	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747c:	1c9a      	adds	r2, r3, #2
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007482:	e073      	b.n	800756c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007488:	b29b      	uxth	r3, r3
 800748a:	121b      	asrs	r3, r3, #8
 800748c:	b2da      	uxtb	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800749e:	e065      	b.n	800756c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d10b      	bne.n	80074c0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80074be:	e055      	b.n	800756c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d151      	bne.n	800756c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	2b22      	cmp	r3, #34	; 0x22
 80074cc:	d10d      	bne.n	80074ea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074dc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80074e8:	e040      	b.n	800756c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d015      	beq.n	8007520 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	2b21      	cmp	r3, #33	; 0x21
 80074f8:	d112      	bne.n	8007520 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	781a      	ldrb	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007514:	b29b      	uxth	r3, r3
 8007516:	3b01      	subs	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800751e:	e025      	b.n	800756c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d120      	bne.n	800756c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	2b21      	cmp	r3, #33	; 0x21
 800752e:	d11d      	bne.n	800756c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800753e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800754e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fc feb8 	bl	80042dc <HAL_I2C_MemTxCpltCallback>
}
 800756c:	bf00      	nop
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b22      	cmp	r3, #34	; 0x22
 8007586:	f040 80a2 	bne.w	80076ce <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758e:	b29b      	uxth	r3, r3
 8007590:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b03      	cmp	r3, #3
 8007596:	d921      	bls.n	80075dc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	3b01      	subs	r3, #1
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	f040 8082 	bne.w	80076ce <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075d8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80075da:	e078      	b.n	80076ce <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d074      	beq.n	80076ce <I2C_MasterReceive_RXNE+0x15a>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d002      	beq.n	80075f0 <I2C_MasterReceive_RXNE+0x7c>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d16e      	bne.n	80076ce <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 fc05 	bl	8008e00 <I2C_WaitOnSTOPRequestThroughIT>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d142      	bne.n	8007682 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800760a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800761a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	b2d2      	uxtb	r2, r2
 8007628:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	1c5a      	adds	r2, r3, #1
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007638:	b29b      	uxth	r3, r3
 800763a:	3b01      	subs	r3, #1
 800763c:	b29a      	uxth	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b40      	cmp	r3, #64	; 0x40
 8007654:	d10a      	bne.n	800766c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff fdb3 	bl	80071d0 <HAL_I2C_MemRxCpltCallback>
}
 800766a:	e030      	b.n	80076ce <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2212      	movs	r2, #18
 8007678:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff fd72 	bl	8007164 <HAL_I2C_MasterRxCpltCallback>
}
 8007680:	e025      	b.n	80076ce <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007690:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff fd8b 	bl	80071e4 <HAL_I2C_ErrorCallback>
}
 80076ce:	bf00      	nop
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d11b      	bne.n	8007726 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	b2d2      	uxtb	r2, r2
 800770a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007724:	e0bd      	b.n	80078a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b03      	cmp	r3, #3
 800772e:	d129      	bne.n	8007784 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800773e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b04      	cmp	r3, #4
 8007744:	d00a      	beq.n	800775c <I2C_MasterReceive_BTF+0x86>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d007      	beq.n	800775c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800775a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691a      	ldr	r2, [r3, #16]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	b2d2      	uxtb	r2, r2
 8007768:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007782:	e08e      	b.n	80078a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007788:	b29b      	uxth	r3, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d176      	bne.n	800787c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d002      	beq.n	800779a <I2C_MasterReceive_BTF+0xc4>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b10      	cmp	r3, #16
 8007798:	d108      	bne.n	80077ac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	e019      	b.n	80077e0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d002      	beq.n	80077b8 <I2C_MasterReceive_BTF+0xe2>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d108      	bne.n	80077ca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	e00a      	b.n	80077e0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b10      	cmp	r3, #16
 80077ce:	d007      	beq.n	80077e0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691a      	ldr	r2, [r3, #16]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	3b01      	subs	r3, #1
 8007800:	b29a      	uxth	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	691a      	ldr	r2, [r3, #16]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	b2d2      	uxtb	r2, r2
 8007812:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	1c5a      	adds	r2, r3, #1
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800783a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b40      	cmp	r3, #64	; 0x40
 800784e:	d10a      	bne.n	8007866 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff fcb6 	bl	80071d0 <HAL_I2C_MemRxCpltCallback>
}
 8007864:	e01d      	b.n	80078a2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2212      	movs	r2, #18
 8007872:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fc75 	bl	8007164 <HAL_I2C_MasterRxCpltCallback>
}
 800787a:	e012      	b.n	80078a2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	691a      	ldr	r2, [r3, #16]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007898:	b29b      	uxth	r3, r3
 800789a:	3b01      	subs	r3, #1
 800789c:	b29a      	uxth	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80078a2:	bf00      	nop
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b40      	cmp	r3, #64	; 0x40
 80078bc:	d117      	bne.n	80078ee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d109      	bne.n	80078da <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078d6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80078d8:	e067      	b.n	80079aa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	f043 0301 	orr.w	r3, r3, #1
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	611a      	str	r2, [r3, #16]
}
 80078ec:	e05d      	b.n	80079aa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078f6:	d133      	bne.n	8007960 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b21      	cmp	r3, #33	; 0x21
 8007902:	d109      	bne.n	8007918 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007908:	b2db      	uxtb	r3, r3
 800790a:	461a      	mov	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007914:	611a      	str	r2, [r3, #16]
 8007916:	e008      	b.n	800792a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f043 0301 	orr.w	r3, r3, #1
 8007922:	b2da      	uxtb	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792e:	2b00      	cmp	r3, #0
 8007930:	d004      	beq.n	800793c <I2C_Master_SB+0x92>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007938:	2b00      	cmp	r3, #0
 800793a:	d108      	bne.n	800794e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	2b00      	cmp	r3, #0
 8007942:	d032      	beq.n	80079aa <I2C_Master_SB+0x100>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d02d      	beq.n	80079aa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800795c:	605a      	str	r2, [r3, #4]
}
 800795e:	e024      	b.n	80079aa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10e      	bne.n	8007986 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796c:	b29b      	uxth	r3, r3
 800796e:	11db      	asrs	r3, r3, #7
 8007970:	b2db      	uxtb	r3, r3
 8007972:	f003 0306 	and.w	r3, r3, #6
 8007976:	b2db      	uxtb	r3, r3
 8007978:	f063 030f 	orn	r3, r3, #15
 800797c:	b2da      	uxtb	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	611a      	str	r2, [r3, #16]
}
 8007984:	e011      	b.n	80079aa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800798a:	2b01      	cmp	r3, #1
 800798c:	d10d      	bne.n	80079aa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007992:	b29b      	uxth	r3, r3
 8007994:	11db      	asrs	r3, r3, #7
 8007996:	b2db      	uxtb	r3, r3
 8007998:	f003 0306 	and.w	r3, r3, #6
 800799c:	b2db      	uxtb	r3, r3
 800799e:	f063 030e 	orn	r3, r3, #14
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	611a      	str	r2, [r3, #16]
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d004      	beq.n	80079dc <I2C_Master_ADD10+0x26>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d108      	bne.n	80079ee <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00c      	beq.n	80079fe <I2C_Master_ADD10+0x48>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d007      	beq.n	80079fe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079fc:	605a      	str	r2, [r3, #4]
  }
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b091      	sub	sp, #68	; 0x44
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a26:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b22      	cmp	r3, #34	; 0x22
 8007a32:	f040 8169 	bne.w	8007d08 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10f      	bne.n	8007a5e <I2C_Master_ADDR+0x54>
 8007a3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a42:	2b40      	cmp	r3, #64	; 0x40
 8007a44:	d10b      	bne.n	8007a5e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a46:	2300      	movs	r3, #0
 8007a48:	633b      	str	r3, [r7, #48]	; 0x30
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	633b      	str	r3, [r7, #48]	; 0x30
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	633b      	str	r3, [r7, #48]	; 0x30
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	e160      	b.n	8007d20 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d11d      	bne.n	8007aa2 <I2C_Master_ADDR+0x98>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a6e:	d118      	bne.n	8007aa2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a70:	2300      	movs	r3, #0
 8007a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a94:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	651a      	str	r2, [r3, #80]	; 0x50
 8007aa0:	e13e      	b.n	8007d20 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d113      	bne.n	8007ad4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aac:	2300      	movs	r3, #0
 8007aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	e115      	b.n	8007d00 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	f040 808a 	bne.w	8007bf4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ae6:	d137      	bne.n	8007b58 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007af6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b06:	d113      	bne.n	8007b30 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b16:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b18:	2300      	movs	r3, #0
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	e0e7      	b.n	8007d00 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b30:	2300      	movs	r3, #0
 8007b32:	623b      	str	r3, [r7, #32]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	623b      	str	r3, [r7, #32]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	623b      	str	r3, [r7, #32]
 8007b44:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	e0d3      	b.n	8007d00 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5a:	2b08      	cmp	r3, #8
 8007b5c:	d02e      	beq.n	8007bbc <I2C_Master_ADDR+0x1b2>
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	d02b      	beq.n	8007bbc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	2b12      	cmp	r3, #18
 8007b68:	d102      	bne.n	8007b70 <I2C_Master_ADDR+0x166>
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d125      	bne.n	8007bbc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d00e      	beq.n	8007b94 <I2C_Master_ADDR+0x18a>
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d00b      	beq.n	8007b94 <I2C_Master_ADDR+0x18a>
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7e:	2b10      	cmp	r3, #16
 8007b80:	d008      	beq.n	8007b94 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	e007      	b.n	8007ba4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ba2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	61fb      	str	r3, [r7, #28]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	61fb      	str	r3, [r7, #28]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	61fb      	str	r3, [r7, #28]
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	e0a1      	b.n	8007d00 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61bb      	str	r3, [r7, #24]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	61bb      	str	r3, [r7, #24]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	61bb      	str	r3, [r7, #24]
 8007be0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	e085      	b.n	8007d00 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d14d      	bne.n	8007c9a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	d016      	beq.n	8007c32 <I2C_Master_ADDR+0x228>
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d013      	beq.n	8007c32 <I2C_Master_ADDR+0x228>
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	2b10      	cmp	r3, #16
 8007c0e:	d010      	beq.n	8007c32 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c1e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e007      	b.n	8007c42 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c40:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c50:	d117      	bne.n	8007c82 <I2C_Master_ADDR+0x278>
 8007c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c58:	d00b      	beq.n	8007c72 <I2C_Master_ADDR+0x268>
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d008      	beq.n	8007c72 <I2C_Master_ADDR+0x268>
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	2b08      	cmp	r3, #8
 8007c64:	d005      	beq.n	8007c72 <I2C_Master_ADDR+0x268>
 8007c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c68:	2b10      	cmp	r3, #16
 8007c6a:	d002      	beq.n	8007c72 <I2C_Master_ADDR+0x268>
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6e:	2b20      	cmp	r3, #32
 8007c70:	d107      	bne.n	8007c82 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c80:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c82:	2300      	movs	r3, #0
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	617b      	str	r3, [r7, #20]
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	e032      	b.n	8007d00 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ca8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb8:	d117      	bne.n	8007cea <I2C_Master_ADDR+0x2e0>
 8007cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cc0:	d00b      	beq.n	8007cda <I2C_Master_ADDR+0x2d0>
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d008      	beq.n	8007cda <I2C_Master_ADDR+0x2d0>
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	2b08      	cmp	r3, #8
 8007ccc:	d005      	beq.n	8007cda <I2C_Master_ADDR+0x2d0>
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	2b10      	cmp	r3, #16
 8007cd2:	d002      	beq.n	8007cda <I2C_Master_ADDR+0x2d0>
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	2b20      	cmp	r3, #32
 8007cd8:	d107      	bne.n	8007cea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ce8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cea:	2300      	movs	r3, #0
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	613b      	str	r3, [r7, #16]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	613b      	str	r3, [r7, #16]
 8007cfe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007d06:	e00b      	b.n	8007d20 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
}
 8007d1e:	e7ff      	b.n	8007d20 <I2C_Master_ADDR+0x316>
 8007d20:	bf00      	nop
 8007d22:	3744      	adds	r7, #68	; 0x44
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d02b      	beq.n	8007d9e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	781a      	ldrb	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d114      	bne.n	8007d9e <I2C_SlaveTransmit_TXE+0x72>
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	2b29      	cmp	r3, #41	; 0x29
 8007d78:	d111      	bne.n	8007d9e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d88:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2221      	movs	r2, #33	; 0x21
 8007d8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2228      	movs	r2, #40	; 0x28
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff f9ed 	bl	8007178 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d011      	beq.n	8007ddc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	781a      	ldrb	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d02c      	beq.n	8007e5c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	691a      	ldr	r2, [r3, #16]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	b2d2      	uxtb	r2, r2
 8007e0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d114      	bne.n	8007e5c <I2C_SlaveReceive_RXNE+0x74>
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
 8007e34:	2b2a      	cmp	r3, #42	; 0x2a
 8007e36:	d111      	bne.n	8007e5c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2222      	movs	r2, #34	; 0x22
 8007e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2228      	movs	r2, #40	; 0x28
 8007e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7ff f998 	bl	800718c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d012      	beq.n	8007e9c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	691a      	ldr	r2, [r3, #16]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	b2d2      	uxtb	r2, r2
 8007e82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	3b01      	subs	r3, #1
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ec2:	2b28      	cmp	r3, #40	; 0x28
 8007ec4:	d127      	bne.n	8007f16 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	089b      	lsrs	r3, r3, #2
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	09db      	lsrs	r3, r3, #7
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d103      	bne.n	8007efa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	81bb      	strh	r3, [r7, #12]
 8007ef8:	e002      	b.n	8007f00 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007f08:	89ba      	ldrh	r2, [r7, #12]
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff f946 	bl	80071a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007f14:	e00e      	b.n	8007f34 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f16:	2300      	movs	r3, #0
 8007f18:	60bb      	str	r3, [r7, #8]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	60bb      	str	r3, [r7, #8]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007f34:	bf00      	nop
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f4a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f5a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60bb      	str	r3, [r7, #8]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	60bb      	str	r3, [r7, #8]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f042 0201 	orr.w	r2, r2, #1
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f88:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f98:	d172      	bne.n	8008080 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	2b22      	cmp	r3, #34	; 0x22
 8007f9e:	d002      	beq.n	8007fa6 <I2C_Slave_STOPF+0x6a>
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8007fa4:	d135      	bne.n	8008012 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d005      	beq.n	8007fca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc2:	f043 0204 	orr.w	r2, r3, #4
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fd8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fd fd02 	bl	80059e8 <HAL_DMA_GetState>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d049      	beq.n	800807e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fee:	4a69      	ldr	r2, [pc, #420]	; (8008194 <I2C_Slave_STOPF+0x258>)
 8007ff0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fd fb4a 	bl	8005690 <HAL_DMA_Abort_IT>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d03d      	beq.n	800807e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800800c:	4610      	mov	r0, r2
 800800e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008010:	e035      	b.n	800807e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	b29a      	uxth	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008024:	b29b      	uxth	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	f043 0204 	orr.w	r2, r3, #4
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008044:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804a:	4618      	mov	r0, r3
 800804c:	f7fd fccc 	bl	80059e8 <HAL_DMA_GetState>
 8008050:	4603      	mov	r3, r0
 8008052:	2b01      	cmp	r3, #1
 8008054:	d014      	beq.n	8008080 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805a:	4a4e      	ldr	r2, [pc, #312]	; (8008194 <I2C_Slave_STOPF+0x258>)
 800805c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008062:	4618      	mov	r0, r3
 8008064:	f7fd fb14 	bl	8005690 <HAL_DMA_Abort_IT>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d008      	beq.n	8008080 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
 800807c:	e000      	b.n	8008080 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800807e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008084:	b29b      	uxth	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d03e      	beq.n	8008108 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b04      	cmp	r3, #4
 8008096:	d112      	bne.n	80080be <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	691a      	ldr	r2, [r3, #16]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	3b01      	subs	r3, #1
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c8:	2b40      	cmp	r3, #64	; 0x40
 80080ca:	d112      	bne.n	80080f2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691a      	ldr	r2, [r3, #16]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	b2d2      	uxtb	r2, r2
 80080d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d005      	beq.n	8008108 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	f043 0204 	orr.w	r2, r3, #4
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f8b3 	bl	800827c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008116:	e039      	b.n	800818c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	2b2a      	cmp	r3, #42	; 0x2a
 800811c:	d109      	bne.n	8008132 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2228      	movs	r2, #40	; 0x28
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff f82d 	bl	800718c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b28      	cmp	r3, #40	; 0x28
 800813c:	d111      	bne.n	8008162 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a15      	ldr	r2, [pc, #84]	; (8008198 <I2C_Slave_STOPF+0x25c>)
 8008142:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff f82e 	bl	80071bc <HAL_I2C_ListenCpltCallback>
}
 8008160:	e014      	b.n	800818c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008166:	2b22      	cmp	r3, #34	; 0x22
 8008168:	d002      	beq.n	8008170 <I2C_Slave_STOPF+0x234>
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	2b22      	cmp	r3, #34	; 0x22
 800816e:	d10d      	bne.n	800818c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7ff f800 	bl	800718c <HAL_I2C_SlaveRxCpltCallback>
}
 800818c:	bf00      	nop
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	08008a01 	.word	0x08008a01
 8008198:	ffff0000 	.word	0xffff0000

0800819c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081aa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d002      	beq.n	80081be <I2C_Slave_AF+0x22>
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	d129      	bne.n	8008212 <I2C_Slave_AF+0x76>
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	2b28      	cmp	r3, #40	; 0x28
 80081c2:	d126      	bne.n	8008212 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a2c      	ldr	r2, [pc, #176]	; (8008278 <I2C_Slave_AF+0xdc>)
 80081c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80081d8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081e2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081f2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fe ffd6 	bl	80071bc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008210:	e02e      	b.n	8008270 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	2b21      	cmp	r3, #33	; 0x21
 8008216:	d126      	bne.n	8008266 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a17      	ldr	r2, [pc, #92]	; (8008278 <I2C_Slave_AF+0xdc>)
 800821c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2221      	movs	r2, #33	; 0x21
 8008222:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2220      	movs	r2, #32
 8008228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008242:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800824c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800825c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7fe ff8a 	bl	8007178 <HAL_I2C_SlaveTxCpltCallback>
}
 8008264:	e004      	b.n	8008270 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800826e:	615a      	str	r2, [r3, #20]
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	ffff0000 	.word	0xffff0000

0800827c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008292:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	2b10      	cmp	r3, #16
 8008298:	d002      	beq.n	80082a0 <I2C_ITError+0x24>
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b40      	cmp	r3, #64	; 0x40
 800829e:	d10a      	bne.n	80082b6 <I2C_ITError+0x3a>
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	2b22      	cmp	r3, #34	; 0x22
 80082a4:	d107      	bne.n	80082b6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082b4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80082bc:	2b28      	cmp	r3, #40	; 0x28
 80082be:	d107      	bne.n	80082d0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2228      	movs	r2, #40	; 0x28
 80082ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80082ce:	e015      	b.n	80082fc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082de:	d00a      	beq.n	80082f6 <I2C_ITError+0x7a>
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	2b60      	cmp	r3, #96	; 0x60
 80082e4:	d007      	beq.n	80082f6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800830a:	d162      	bne.n	80083d2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800831a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b01      	cmp	r3, #1
 8008328:	d020      	beq.n	800836c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832e:	4a6a      	ldr	r2, [pc, #424]	; (80084d8 <I2C_ITError+0x25c>)
 8008330:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008336:	4618      	mov	r0, r3
 8008338:	f7fd f9aa 	bl	8005690 <HAL_DMA_Abort_IT>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 8089 	beq.w	8008456 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0201 	bic.w	r2, r2, #1
 8008352:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2220      	movs	r2, #32
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008366:	4610      	mov	r0, r2
 8008368:	4798      	blx	r3
 800836a:	e074      	b.n	8008456 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008370:	4a59      	ldr	r2, [pc, #356]	; (80084d8 <I2C_ITError+0x25c>)
 8008372:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008378:	4618      	mov	r0, r3
 800837a:	f7fd f989 	bl	8005690 <HAL_DMA_Abort_IT>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d068      	beq.n	8008456 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838e:	2b40      	cmp	r3, #64	; 0x40
 8008390:	d10b      	bne.n	80083aa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	691a      	ldr	r2, [r3, #16]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	b2d2      	uxtb	r2, r2
 800839e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	1c5a      	adds	r2, r3, #1
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0201 	bic.w	r2, r2, #1
 80083b8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3
 80083d0:	e041      	b.n	8008456 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b60      	cmp	r3, #96	; 0x60
 80083dc:	d125      	bne.n	800842a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f6:	2b40      	cmp	r3, #64	; 0x40
 80083f8:	d10b      	bne.n	8008412 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	691a      	ldr	r2, [r3, #16]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	b2d2      	uxtb	r2, r2
 8008406:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0201 	bic.w	r2, r2, #1
 8008420:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7fe fee8 	bl	80071f8 <HAL_I2C_AbortCpltCallback>
 8008428:	e015      	b.n	8008456 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008434:	2b40      	cmp	r3, #64	; 0x40
 8008436:	d10b      	bne.n	8008450 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691a      	ldr	r2, [r3, #16]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	b2d2      	uxtb	r2, r2
 8008444:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7fe fec7 	bl	80071e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10e      	bne.n	8008484 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800846c:	2b00      	cmp	r3, #0
 800846e:	d109      	bne.n	8008484 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008476:	2b00      	cmp	r3, #0
 8008478:	d104      	bne.n	8008484 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008492:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800849a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a0:	f003 0304 	and.w	r3, r3, #4
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	d113      	bne.n	80084d0 <I2C_ITError+0x254>
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	2b28      	cmp	r3, #40	; 0x28
 80084ac:	d110      	bne.n	80084d0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a0a      	ldr	r2, [pc, #40]	; (80084dc <I2C_ITError+0x260>)
 80084b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2220      	movs	r2, #32
 80084be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7fe fe76 	bl	80071bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80084d0:	bf00      	nop
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	08008a01 	.word	0x08008a01
 80084dc:	ffff0000 	.word	0xffff0000

080084e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	4608      	mov	r0, r1
 80084ea:	4611      	mov	r1, r2
 80084ec:	461a      	mov	r2, r3
 80084ee:	4603      	mov	r3, r0
 80084f0:	817b      	strh	r3, [r7, #10]
 80084f2:	460b      	mov	r3, r1
 80084f4:	813b      	strh	r3, [r7, #8]
 80084f6:	4613      	mov	r3, r2
 80084f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008508:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	2200      	movs	r2, #0
 8008512:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 fb1a 	bl	8008b50 <I2C_WaitOnFlagUntilTimeout>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00d      	beq.n	800853e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008530:	d103      	bne.n	800853a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008538:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e05f      	b.n	80085fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800853e:	897b      	ldrh	r3, [r7, #10]
 8008540:	b2db      	uxtb	r3, r3
 8008542:	461a      	mov	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800854c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	6a3a      	ldr	r2, [r7, #32]
 8008552:	492d      	ldr	r1, [pc, #180]	; (8008608 <I2C_RequestMemoryWrite+0x128>)
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 fb52 	bl	8008bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e04c      	b.n	80085fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008564:	2300      	movs	r3, #0
 8008566:	617b      	str	r3, [r7, #20]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800857a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857c:	6a39      	ldr	r1, [r7, #32]
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 fbbc 	bl	8008cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00d      	beq.n	80085a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	2b04      	cmp	r3, #4
 8008590:	d107      	bne.n	80085a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e02b      	b.n	80085fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085a6:	88fb      	ldrh	r3, [r7, #6]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d105      	bne.n	80085b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085ac:	893b      	ldrh	r3, [r7, #8]
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	611a      	str	r2, [r3, #16]
 80085b6:	e021      	b.n	80085fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80085b8:	893b      	ldrh	r3, [r7, #8]
 80085ba:	0a1b      	lsrs	r3, r3, #8
 80085bc:	b29b      	uxth	r3, r3
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c8:	6a39      	ldr	r1, [r7, #32]
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 fb96 	bl	8008cfc <I2C_WaitOnTXEFlagUntilTimeout>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00d      	beq.n	80085f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d107      	bne.n	80085ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e005      	b.n	80085fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085f2:	893b      	ldrh	r3, [r7, #8]
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	00010002 	.word	0x00010002

0800860c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af02      	add	r7, sp, #8
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	4608      	mov	r0, r1
 8008616:	4611      	mov	r1, r2
 8008618:	461a      	mov	r2, r3
 800861a:	4603      	mov	r3, r0
 800861c:	817b      	strh	r3, [r7, #10]
 800861e:	460b      	mov	r3, r1
 8008620:	813b      	strh	r3, [r7, #8]
 8008622:	4613      	mov	r3, r2
 8008624:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008634:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008644:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	2200      	movs	r2, #0
 800864e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 fa7c 	bl	8008b50 <I2C_WaitOnFlagUntilTimeout>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00d      	beq.n	800867a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800866c:	d103      	bne.n	8008676 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008674:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e0aa      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800867a:	897b      	ldrh	r3, [r7, #10]
 800867c:	b2db      	uxtb	r3, r3
 800867e:	461a      	mov	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008688:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	6a3a      	ldr	r2, [r7, #32]
 800868e:	4952      	ldr	r1, [pc, #328]	; (80087d8 <I2C_RequestMemoryRead+0x1cc>)
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f000 fab4 	bl	8008bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e097      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b8:	6a39      	ldr	r1, [r7, #32]
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 fb1e 	bl	8008cfc <I2C_WaitOnTXEFlagUntilTimeout>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00d      	beq.n	80086e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d107      	bne.n	80086de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e076      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086e2:	88fb      	ldrh	r3, [r7, #6]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d105      	bne.n	80086f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086e8:	893b      	ldrh	r3, [r7, #8]
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	611a      	str	r2, [r3, #16]
 80086f2:	e021      	b.n	8008738 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80086f4:	893b      	ldrh	r3, [r7, #8]
 80086f6:	0a1b      	lsrs	r3, r3, #8
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008704:	6a39      	ldr	r1, [r7, #32]
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 faf8 	bl	8008cfc <I2C_WaitOnTXEFlagUntilTimeout>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00d      	beq.n	800872e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	2b04      	cmp	r3, #4
 8008718:	d107      	bne.n	800872a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008728:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e050      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800872e:	893b      	ldrh	r3, [r7, #8]
 8008730:	b2da      	uxtb	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873a:	6a39      	ldr	r1, [r7, #32]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 fadd 	bl	8008cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00d      	beq.n	8008764 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874c:	2b04      	cmp	r3, #4
 800874e:	d107      	bne.n	8008760 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800875e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e035      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008772:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2200      	movs	r2, #0
 800877c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 f9e5 	bl	8008b50 <I2C_WaitOnFlagUntilTimeout>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00d      	beq.n	80087a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800879a:	d103      	bne.n	80087a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e013      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80087a8:	897b      	ldrh	r3, [r7, #10]
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	f043 0301 	orr.w	r3, r3, #1
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	6a3a      	ldr	r2, [r7, #32]
 80087bc:	4906      	ldr	r1, [pc, #24]	; (80087d8 <I2C_RequestMemoryRead+0x1cc>)
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 fa1d 	bl	8008bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e000      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	00010002 	.word	0x00010002

080087dc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087f8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800880e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881c:	2200      	movs	r2, #0
 800881e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008824:	2b00      	cmp	r3, #0
 8008826:	d003      	beq.n	8008830 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882c:	2200      	movs	r2, #0
 800882e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008830:	7cfb      	ldrb	r3, [r7, #19]
 8008832:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008836:	2b21      	cmp	r3, #33	; 0x21
 8008838:	d007      	beq.n	800884a <I2C_DMAXferCplt+0x6e>
 800883a:	7cfb      	ldrb	r3, [r7, #19]
 800883c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8008840:	2b22      	cmp	r3, #34	; 0x22
 8008842:	d131      	bne.n	80088a8 <I2C_DMAXferCplt+0xcc>
 8008844:	7cbb      	ldrb	r3, [r7, #18]
 8008846:	2b20      	cmp	r3, #32
 8008848:	d12e      	bne.n	80088a8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008858:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2200      	movs	r2, #0
 800885e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008860:	7cfb      	ldrb	r3, [r7, #19]
 8008862:	2b29      	cmp	r3, #41	; 0x29
 8008864:	d10a      	bne.n	800887c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2221      	movs	r2, #33	; 0x21
 800886a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2228      	movs	r2, #40	; 0x28
 8008870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008874:	6978      	ldr	r0, [r7, #20]
 8008876:	f7fe fc7f 	bl	8007178 <HAL_I2C_SlaveTxCpltCallback>
 800887a:	e00c      	b.n	8008896 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800887c:	7cfb      	ldrb	r3, [r7, #19]
 800887e:	2b2a      	cmp	r3, #42	; 0x2a
 8008880:	d109      	bne.n	8008896 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2222      	movs	r2, #34	; 0x22
 8008886:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2228      	movs	r2, #40	; 0x28
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008890:	6978      	ldr	r0, [r7, #20]
 8008892:	f7fe fc7b 	bl	800718c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80088a4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80088a6:	e06a      	b.n	800897e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d064      	beq.n	800897e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d107      	bne.n	80088ce <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088cc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80088dc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80088e4:	d009      	beq.n	80088fa <I2C_DMAXferCplt+0x11e>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d006      	beq.n	80088fa <I2C_DMAXferCplt+0x11e>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80088f2:	d002      	beq.n	80088fa <I2C_DMAXferCplt+0x11e>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	d107      	bne.n	800890a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008908:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008918:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008928:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2200      	movs	r2, #0
 800892e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008938:	6978      	ldr	r0, [r7, #20]
 800893a:	f7fe fc53 	bl	80071e4 <HAL_I2C_ErrorCallback>
}
 800893e:	e01e      	b.n	800897e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2220      	movs	r2, #32
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b40      	cmp	r3, #64	; 0x40
 8008952:	d10a      	bne.n	800896a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	2200      	movs	r2, #0
 8008960:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008962:	6978      	ldr	r0, [r7, #20]
 8008964:	f7fe fc34 	bl	80071d0 <HAL_I2C_MemRxCpltCallback>
}
 8008968:	e009      	b.n	800897e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	2212      	movs	r2, #18
 8008976:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008978:	6978      	ldr	r0, [r7, #20]
 800897a:	f7fe fbf3 	bl	8007164 <HAL_I2C_MasterRxCpltCallback>
}
 800897e:	bf00      	nop
 8008980:	3718      	adds	r7, #24
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008992:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a0:	2200      	movs	r2, #0
 80089a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b0:	2200      	movs	r2, #0
 80089b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7fd f825 	bl	8005a04 <HAL_DMA_GetError>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d01b      	beq.n	80089f8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089ce:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2220      	movs	r2, #32
 80089da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ea:	f043 0210 	orr.w	r2, r3, #16
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f7fe fbf6 	bl	80071e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80089f8:	bf00      	nop
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a10:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a18:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a1a:	4b4b      	ldr	r3, [pc, #300]	; (8008b48 <I2C_DMAAbort+0x148>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	08db      	lsrs	r3, r3, #3
 8008a20:	4a4a      	ldr	r2, [pc, #296]	; (8008b4c <I2C_DMAAbort+0x14c>)
 8008a22:	fba2 2303 	umull	r2, r3, r2, r3
 8008a26:	0a1a      	lsrs	r2, r3, #8
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	00da      	lsls	r2, r3, #3
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d106      	bne.n	8008a48 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3e:	f043 0220 	orr.w	r2, r3, #32
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008a46:	e00a      	b.n	8008a5e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a5c:	d0ea      	beq.n	8008a34 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a8c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2200      	movs	r2, #0
 8008a92:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 0201 	bic.w	r2, r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b60      	cmp	r3, #96	; 0x60
 8008ace:	d10e      	bne.n	8008aee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008ae6:	6978      	ldr	r0, [r7, #20]
 8008ae8:	f7fe fb86 	bl	80071f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008aec:	e027      	b.n	8008b3e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008aee:	7cfb      	ldrb	r3, [r7, #19]
 8008af0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008af4:	2b28      	cmp	r3, #40	; 0x28
 8008af6:	d117      	bne.n	8008b28 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f042 0201 	orr.w	r2, r2, #1
 8008b06:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2228      	movs	r2, #40	; 0x28
 8008b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008b26:	e007      	b.n	8008b38 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008b38:	6978      	ldr	r0, [r7, #20]
 8008b3a:	f7fe fb53 	bl	80071e4 <HAL_I2C_ErrorCallback>
}
 8008b3e:	bf00      	nop
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	200000a0 	.word	0x200000a0
 8008b4c:	14f8b589 	.word	0x14f8b589

08008b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b60:	e025      	b.n	8008bae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b68:	d021      	beq.n	8008bae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b6a:	f7fc fb27 	bl	80051bc <HAL_GetTick>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	683a      	ldr	r2, [r7, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d302      	bcc.n	8008b80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d116      	bne.n	8008bae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9a:	f043 0220 	orr.w	r2, r3, #32
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e023      	b.n	8008bf6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	0c1b      	lsrs	r3, r3, #16
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d10d      	bne.n	8008bd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	43da      	mvns	r2, r3
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	bf0c      	ite	eq
 8008bca:	2301      	moveq	r3, #1
 8008bcc:	2300      	movne	r3, #0
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	e00c      	b.n	8008bee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	43da      	mvns	r2, r3
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	4013      	ands	r3, r2
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	bf0c      	ite	eq
 8008be6:	2301      	moveq	r3, #1
 8008be8:	2300      	movne	r3, #0
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	461a      	mov	r2, r3
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d0b6      	beq.n	8008b62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	607a      	str	r2, [r7, #4]
 8008c0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c0c:	e051      	b.n	8008cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c1c:	d123      	bne.n	8008c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2220      	movs	r2, #32
 8008c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c52:	f043 0204 	orr.w	r2, r3, #4
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e046      	b.n	8008cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6c:	d021      	beq.n	8008cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c6e:	f7fc faa5 	bl	80051bc <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d302      	bcc.n	8008c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d116      	bne.n	8008cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9e:	f043 0220 	orr.w	r2, r3, #32
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e020      	b.n	8008cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	0c1b      	lsrs	r3, r3, #16
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d10c      	bne.n	8008cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	43da      	mvns	r2, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	bf14      	ite	ne
 8008cce:	2301      	movne	r3, #1
 8008cd0:	2300      	moveq	r3, #0
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	e00b      	b.n	8008cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	43da      	mvns	r2, r3
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	bf14      	ite	ne
 8008ce8:	2301      	movne	r3, #1
 8008cea:	2300      	moveq	r3, #0
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d18d      	bne.n	8008c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d08:	e02d      	b.n	8008d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 f900 	bl	8008f10 <I2C_IsAcknowledgeFailed>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e02d      	b.n	8008d76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d20:	d021      	beq.n	8008d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d22:	f7fc fa4b 	bl	80051bc <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d302      	bcc.n	8008d38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d116      	bne.n	8008d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d52:	f043 0220 	orr.w	r2, r3, #32
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e007      	b.n	8008d76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d70:	2b80      	cmp	r3, #128	; 0x80
 8008d72:	d1ca      	bne.n	8008d0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008d8a:	e02d      	b.n	8008de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f000 f8bf 	bl	8008f10 <I2C_IsAcknowledgeFailed>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e02d      	b.n	8008df8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da2:	d021      	beq.n	8008de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008da4:	f7fc fa0a 	bl	80051bc <HAL_GetTick>
 8008da8:	4602      	mov	r2, r0
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d302      	bcc.n	8008dba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d116      	bne.n	8008de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd4:	f043 0220 	orr.w	r2, r3, #32
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e007      	b.n	8008df8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	f003 0304 	and.w	r3, r3, #4
 8008df2:	2b04      	cmp	r3, #4
 8008df4:	d1ca      	bne.n	8008d8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008e0c:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	08db      	lsrs	r3, r3, #3
 8008e12:	4a13      	ldr	r2, [pc, #76]	; (8008e60 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008e14:	fba2 2303 	umull	r2, r3, r2, r3
 8008e18:	0a1a      	lsrs	r2, r3, #8
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d107      	bne.n	8008e3e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	f043 0220 	orr.w	r2, r3, #32
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e008      	b.n	8008e50 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e4c:	d0e9      	beq.n	8008e22 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	200000a0 	.word	0x200000a0
 8008e60:	14f8b589 	.word	0x14f8b589

08008e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008e70:	e042      	b.n	8008ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b10      	cmp	r3, #16
 8008e7e:	d119      	bne.n	8008eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f06f 0210 	mvn.w	r2, #16
 8008e88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e029      	b.n	8008f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eb4:	f7fc f982 	bl	80051bc <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d302      	bcc.n	8008eca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d116      	bne.n	8008ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee4:	f043 0220 	orr.w	r2, r3, #32
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e007      	b.n	8008f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f02:	2b40      	cmp	r3, #64	; 0x40
 8008f04:	d1b5      	bne.n	8008e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f26:	d11b      	bne.n	8008f60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4c:	f043 0204 	orr.w	r2, r3, #4
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e000      	b.n	8008f62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b083      	sub	sp, #12
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008f7e:	d103      	bne.n	8008f88 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008f86:	e007      	b.n	8008f98 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008f90:	d102      	bne.n	8008f98 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2208      	movs	r2, #8
 8008f96:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e0cc      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008fb8:	4b68      	ldr	r3, [pc, #416]	; (800915c <HAL_RCC_ClockConfig+0x1b8>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 030f 	and.w	r3, r3, #15
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d90c      	bls.n	8008fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fc6:	4b65      	ldr	r3, [pc, #404]	; (800915c <HAL_RCC_ClockConfig+0x1b8>)
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	b2d2      	uxtb	r2, r2
 8008fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fce:	4b63      	ldr	r3, [pc, #396]	; (800915c <HAL_RCC_ClockConfig+0x1b8>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 030f 	and.w	r3, r3, #15
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d001      	beq.n	8008fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e0b8      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d020      	beq.n	800902e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0304 	and.w	r3, r3, #4
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d005      	beq.n	8009004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ff8:	4b59      	ldr	r3, [pc, #356]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	4a58      	ldr	r2, [pc, #352]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8008ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0308 	and.w	r3, r3, #8
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009010:	4b53      	ldr	r3, [pc, #332]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	4a52      	ldr	r2, [pc, #328]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800901a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800901c:	4b50      	ldr	r3, [pc, #320]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	494d      	ldr	r1, [pc, #308]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 800902a:	4313      	orrs	r3, r2
 800902c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d044      	beq.n	80090c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d107      	bne.n	8009052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009042:	4b47      	ldr	r3, [pc, #284]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d119      	bne.n	8009082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e07f      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	2b02      	cmp	r3, #2
 8009058:	d003      	beq.n	8009062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800905e:	2b03      	cmp	r3, #3
 8009060:	d107      	bne.n	8009072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009062:	4b3f      	ldr	r3, [pc, #252]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d109      	bne.n	8009082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e06f      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009072:	4b3b      	ldr	r3, [pc, #236]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e067      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009082:	4b37      	ldr	r3, [pc, #220]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f023 0203 	bic.w	r2, r3, #3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	4934      	ldr	r1, [pc, #208]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009090:	4313      	orrs	r3, r2
 8009092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009094:	f7fc f892 	bl	80051bc <HAL_GetTick>
 8009098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800909a:	e00a      	b.n	80090b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800909c:	f7fc f88e 	bl	80051bc <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e04f      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090b2:	4b2b      	ldr	r3, [pc, #172]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 020c 	and.w	r2, r3, #12
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d1eb      	bne.n	800909c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80090c4:	4b25      	ldr	r3, [pc, #148]	; (800915c <HAL_RCC_ClockConfig+0x1b8>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d20c      	bcs.n	80090ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d2:	4b22      	ldr	r3, [pc, #136]	; (800915c <HAL_RCC_ClockConfig+0x1b8>)
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	b2d2      	uxtb	r2, r2
 80090d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090da:	4b20      	ldr	r3, [pc, #128]	; (800915c <HAL_RCC_ClockConfig+0x1b8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 030f 	and.w	r3, r3, #15
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d001      	beq.n	80090ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e032      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d008      	beq.n	800910a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090f8:	4b19      	ldr	r3, [pc, #100]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	4916      	ldr	r1, [pc, #88]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009106:	4313      	orrs	r3, r2
 8009108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0308 	and.w	r3, r3, #8
 8009112:	2b00      	cmp	r3, #0
 8009114:	d009      	beq.n	800912a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009116:	4b12      	ldr	r3, [pc, #72]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	490e      	ldr	r1, [pc, #56]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009126:	4313      	orrs	r3, r2
 8009128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800912a:	f000 f841 	bl	80091b0 <HAL_RCC_GetSysClockFreq>
 800912e:	4602      	mov	r2, r0
 8009130:	4b0b      	ldr	r3, [pc, #44]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	091b      	lsrs	r3, r3, #4
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	490a      	ldr	r1, [pc, #40]	; (8009164 <HAL_RCC_ClockConfig+0x1c0>)
 800913c:	5ccb      	ldrb	r3, [r1, r3]
 800913e:	fa22 f303 	lsr.w	r3, r2, r3
 8009142:	4a09      	ldr	r2, [pc, #36]	; (8009168 <HAL_RCC_ClockConfig+0x1c4>)
 8009144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009146:	4b09      	ldr	r3, [pc, #36]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4618      	mov	r0, r3
 800914c:	f7fb fff2 	bl	8005134 <HAL_InitTick>

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	40023c00 	.word	0x40023c00
 8009160:	40023800 	.word	0x40023800
 8009164:	0800f0e0 	.word	0x0800f0e0
 8009168:	200000a0 	.word	0x200000a0
 800916c:	200000a4 	.word	0x200000a4

08009170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009174:	4b03      	ldr	r3, [pc, #12]	; (8009184 <HAL_RCC_GetHCLKFreq+0x14>)
 8009176:	681b      	ldr	r3, [r3, #0]
}
 8009178:	4618      	mov	r0, r3
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	200000a0 	.word	0x200000a0

08009188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800918c:	f7ff fff0 	bl	8009170 <HAL_RCC_GetHCLKFreq>
 8009190:	4602      	mov	r2, r0
 8009192:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	0a9b      	lsrs	r3, r3, #10
 8009198:	f003 0307 	and.w	r3, r3, #7
 800919c:	4903      	ldr	r1, [pc, #12]	; (80091ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800919e:	5ccb      	ldrb	r3, [r1, r3]
 80091a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	40023800 	.word	0x40023800
 80091ac:	0800f0f0 	.word	0x0800f0f0

080091b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091b4:	b088      	sub	sp, #32
 80091b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80091bc:	2300      	movs	r3, #0
 80091be:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80091c4:	2300      	movs	r3, #0
 80091c6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80091c8:	2300      	movs	r3, #0
 80091ca:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091cc:	4bce      	ldr	r3, [pc, #824]	; (8009508 <HAL_RCC_GetSysClockFreq+0x358>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f003 030c 	and.w	r3, r3, #12
 80091d4:	2b0c      	cmp	r3, #12
 80091d6:	f200 818d 	bhi.w	80094f4 <HAL_RCC_GetSysClockFreq+0x344>
 80091da:	a201      	add	r2, pc, #4	; (adr r2, 80091e0 <HAL_RCC_GetSysClockFreq+0x30>)
 80091dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e0:	08009215 	.word	0x08009215
 80091e4:	080094f5 	.word	0x080094f5
 80091e8:	080094f5 	.word	0x080094f5
 80091ec:	080094f5 	.word	0x080094f5
 80091f0:	0800921b 	.word	0x0800921b
 80091f4:	080094f5 	.word	0x080094f5
 80091f8:	080094f5 	.word	0x080094f5
 80091fc:	080094f5 	.word	0x080094f5
 8009200:	08009221 	.word	0x08009221
 8009204:	080094f5 	.word	0x080094f5
 8009208:	080094f5 	.word	0x080094f5
 800920c:	080094f5 	.word	0x080094f5
 8009210:	08009395 	.word	0x08009395
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009214:	4bbd      	ldr	r3, [pc, #756]	; (800950c <HAL_RCC_GetSysClockFreq+0x35c>)
 8009216:	61bb      	str	r3, [r7, #24]
       break;
 8009218:	e16f      	b.n	80094fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800921a:	4bbd      	ldr	r3, [pc, #756]	; (8009510 <HAL_RCC_GetSysClockFreq+0x360>)
 800921c:	61bb      	str	r3, [r7, #24]
      break;
 800921e:	e16c      	b.n	80094fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009220:	4bb9      	ldr	r3, [pc, #740]	; (8009508 <HAL_RCC_GetSysClockFreq+0x358>)
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009228:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800922a:	4bb7      	ldr	r3, [pc, #732]	; (8009508 <HAL_RCC_GetSysClockFreq+0x358>)
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d053      	beq.n	80092de <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009236:	4bb4      	ldr	r3, [pc, #720]	; (8009508 <HAL_RCC_GetSysClockFreq+0x358>)
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	099b      	lsrs	r3, r3, #6
 800923c:	461a      	mov	r2, r3
 800923e:	f04f 0300 	mov.w	r3, #0
 8009242:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009246:	f04f 0100 	mov.w	r1, #0
 800924a:	ea02 0400 	and.w	r4, r2, r0
 800924e:	603c      	str	r4, [r7, #0]
 8009250:	400b      	ands	r3, r1
 8009252:	607b      	str	r3, [r7, #4]
 8009254:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009258:	4620      	mov	r0, r4
 800925a:	4629      	mov	r1, r5
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	f04f 0300 	mov.w	r3, #0
 8009264:	014b      	lsls	r3, r1, #5
 8009266:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800926a:	0142      	lsls	r2, r0, #5
 800926c:	4610      	mov	r0, r2
 800926e:	4619      	mov	r1, r3
 8009270:	4623      	mov	r3, r4
 8009272:	1ac0      	subs	r0, r0, r3
 8009274:	462b      	mov	r3, r5
 8009276:	eb61 0103 	sbc.w	r1, r1, r3
 800927a:	f04f 0200 	mov.w	r2, #0
 800927e:	f04f 0300 	mov.w	r3, #0
 8009282:	018b      	lsls	r3, r1, #6
 8009284:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009288:	0182      	lsls	r2, r0, #6
 800928a:	1a12      	subs	r2, r2, r0
 800928c:	eb63 0301 	sbc.w	r3, r3, r1
 8009290:	f04f 0000 	mov.w	r0, #0
 8009294:	f04f 0100 	mov.w	r1, #0
 8009298:	00d9      	lsls	r1, r3, #3
 800929a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800929e:	00d0      	lsls	r0, r2, #3
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4621      	mov	r1, r4
 80092a6:	1852      	adds	r2, r2, r1
 80092a8:	4629      	mov	r1, r5
 80092aa:	eb43 0101 	adc.w	r1, r3, r1
 80092ae:	460b      	mov	r3, r1
 80092b0:	f04f 0000 	mov.w	r0, #0
 80092b4:	f04f 0100 	mov.w	r1, #0
 80092b8:	0259      	lsls	r1, r3, #9
 80092ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80092be:	0250      	lsls	r0, r2, #9
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4610      	mov	r0, r2
 80092c6:	4619      	mov	r1, r3
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	461a      	mov	r2, r3
 80092cc:	f04f 0300 	mov.w	r3, #0
 80092d0:	f7f7 fcfa 	bl	8000cc8 <__aeabi_uldivmod>
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	4613      	mov	r3, r2
 80092da:	61fb      	str	r3, [r7, #28]
 80092dc:	e04c      	b.n	8009378 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092de:	4b8a      	ldr	r3, [pc, #552]	; (8009508 <HAL_RCC_GetSysClockFreq+0x358>)
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	099b      	lsrs	r3, r3, #6
 80092e4:	461a      	mov	r2, r3
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80092ee:	f04f 0100 	mov.w	r1, #0
 80092f2:	ea02 0a00 	and.w	sl, r2, r0
 80092f6:	ea03 0b01 	and.w	fp, r3, r1
 80092fa:	4650      	mov	r0, sl
 80092fc:	4659      	mov	r1, fp
 80092fe:	f04f 0200 	mov.w	r2, #0
 8009302:	f04f 0300 	mov.w	r3, #0
 8009306:	014b      	lsls	r3, r1, #5
 8009308:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800930c:	0142      	lsls	r2, r0, #5
 800930e:	4610      	mov	r0, r2
 8009310:	4619      	mov	r1, r3
 8009312:	ebb0 000a 	subs.w	r0, r0, sl
 8009316:	eb61 010b 	sbc.w	r1, r1, fp
 800931a:	f04f 0200 	mov.w	r2, #0
 800931e:	f04f 0300 	mov.w	r3, #0
 8009322:	018b      	lsls	r3, r1, #6
 8009324:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009328:	0182      	lsls	r2, r0, #6
 800932a:	1a12      	subs	r2, r2, r0
 800932c:	eb63 0301 	sbc.w	r3, r3, r1
 8009330:	f04f 0000 	mov.w	r0, #0
 8009334:	f04f 0100 	mov.w	r1, #0
 8009338:	00d9      	lsls	r1, r3, #3
 800933a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800933e:	00d0      	lsls	r0, r2, #3
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	eb12 020a 	adds.w	r2, r2, sl
 8009348:	eb43 030b 	adc.w	r3, r3, fp
 800934c:	f04f 0000 	mov.w	r0, #0
 8009350:	f04f 0100 	mov.w	r1, #0
 8009354:	0299      	lsls	r1, r3, #10
 8009356:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800935a:	0290      	lsls	r0, r2, #10
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	4610      	mov	r0, r2
 8009362:	4619      	mov	r1, r3
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	461a      	mov	r2, r3
 8009368:	f04f 0300 	mov.w	r3, #0
 800936c:	f7f7 fcac 	bl	8000cc8 <__aeabi_uldivmod>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4613      	mov	r3, r2
 8009376:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009378:	4b63      	ldr	r3, [pc, #396]	; (8009508 <HAL_RCC_GetSysClockFreq+0x358>)
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	0c1b      	lsrs	r3, r3, #16
 800937e:	f003 0303 	and.w	r3, r3, #3
 8009382:	3301      	adds	r3, #1
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8009388:	69fa      	ldr	r2, [r7, #28]
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009390:	61bb      	str	r3, [r7, #24]
      break;
 8009392:	e0b2      	b.n	80094fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009394:	4b5c      	ldr	r3, [pc, #368]	; (8009508 <HAL_RCC_GetSysClockFreq+0x358>)
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800939c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800939e:	4b5a      	ldr	r3, [pc, #360]	; (8009508 <HAL_RCC_GetSysClockFreq+0x358>)
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d04d      	beq.n	8009446 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093aa:	4b57      	ldr	r3, [pc, #348]	; (8009508 <HAL_RCC_GetSysClockFreq+0x358>)
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	099b      	lsrs	r3, r3, #6
 80093b0:	461a      	mov	r2, r3
 80093b2:	f04f 0300 	mov.w	r3, #0
 80093b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80093ba:	f04f 0100 	mov.w	r1, #0
 80093be:	ea02 0800 	and.w	r8, r2, r0
 80093c2:	ea03 0901 	and.w	r9, r3, r1
 80093c6:	4640      	mov	r0, r8
 80093c8:	4649      	mov	r1, r9
 80093ca:	f04f 0200 	mov.w	r2, #0
 80093ce:	f04f 0300 	mov.w	r3, #0
 80093d2:	014b      	lsls	r3, r1, #5
 80093d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80093d8:	0142      	lsls	r2, r0, #5
 80093da:	4610      	mov	r0, r2
 80093dc:	4619      	mov	r1, r3
 80093de:	ebb0 0008 	subs.w	r0, r0, r8
 80093e2:	eb61 0109 	sbc.w	r1, r1, r9
 80093e6:	f04f 0200 	mov.w	r2, #0
 80093ea:	f04f 0300 	mov.w	r3, #0
 80093ee:	018b      	lsls	r3, r1, #6
 80093f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80093f4:	0182      	lsls	r2, r0, #6
 80093f6:	1a12      	subs	r2, r2, r0
 80093f8:	eb63 0301 	sbc.w	r3, r3, r1
 80093fc:	f04f 0000 	mov.w	r0, #0
 8009400:	f04f 0100 	mov.w	r1, #0
 8009404:	00d9      	lsls	r1, r3, #3
 8009406:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800940a:	00d0      	lsls	r0, r2, #3
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	eb12 0208 	adds.w	r2, r2, r8
 8009414:	eb43 0309 	adc.w	r3, r3, r9
 8009418:	f04f 0000 	mov.w	r0, #0
 800941c:	f04f 0100 	mov.w	r1, #0
 8009420:	0259      	lsls	r1, r3, #9
 8009422:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009426:	0250      	lsls	r0, r2, #9
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4610      	mov	r0, r2
 800942e:	4619      	mov	r1, r3
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	461a      	mov	r2, r3
 8009434:	f04f 0300 	mov.w	r3, #0
 8009438:	f7f7 fc46 	bl	8000cc8 <__aeabi_uldivmod>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	4613      	mov	r3, r2
 8009442:	61fb      	str	r3, [r7, #28]
 8009444:	e04a      	b.n	80094dc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009446:	4b30      	ldr	r3, [pc, #192]	; (8009508 <HAL_RCC_GetSysClockFreq+0x358>)
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	099b      	lsrs	r3, r3, #6
 800944c:	461a      	mov	r2, r3
 800944e:	f04f 0300 	mov.w	r3, #0
 8009452:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009456:	f04f 0100 	mov.w	r1, #0
 800945a:	ea02 0400 	and.w	r4, r2, r0
 800945e:	ea03 0501 	and.w	r5, r3, r1
 8009462:	4620      	mov	r0, r4
 8009464:	4629      	mov	r1, r5
 8009466:	f04f 0200 	mov.w	r2, #0
 800946a:	f04f 0300 	mov.w	r3, #0
 800946e:	014b      	lsls	r3, r1, #5
 8009470:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009474:	0142      	lsls	r2, r0, #5
 8009476:	4610      	mov	r0, r2
 8009478:	4619      	mov	r1, r3
 800947a:	1b00      	subs	r0, r0, r4
 800947c:	eb61 0105 	sbc.w	r1, r1, r5
 8009480:	f04f 0200 	mov.w	r2, #0
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	018b      	lsls	r3, r1, #6
 800948a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800948e:	0182      	lsls	r2, r0, #6
 8009490:	1a12      	subs	r2, r2, r0
 8009492:	eb63 0301 	sbc.w	r3, r3, r1
 8009496:	f04f 0000 	mov.w	r0, #0
 800949a:	f04f 0100 	mov.w	r1, #0
 800949e:	00d9      	lsls	r1, r3, #3
 80094a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094a4:	00d0      	lsls	r0, r2, #3
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	1912      	adds	r2, r2, r4
 80094ac:	eb45 0303 	adc.w	r3, r5, r3
 80094b0:	f04f 0000 	mov.w	r0, #0
 80094b4:	f04f 0100 	mov.w	r1, #0
 80094b8:	0299      	lsls	r1, r3, #10
 80094ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80094be:	0290      	lsls	r0, r2, #10
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	4610      	mov	r0, r2
 80094c6:	4619      	mov	r1, r3
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f04f 0300 	mov.w	r3, #0
 80094d0:	f7f7 fbfa 	bl	8000cc8 <__aeabi_uldivmod>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4613      	mov	r3, r2
 80094da:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80094dc:	4b0a      	ldr	r3, [pc, #40]	; (8009508 <HAL_RCC_GetSysClockFreq+0x358>)
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	0f1b      	lsrs	r3, r3, #28
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80094e8:	69fa      	ldr	r2, [r7, #28]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f0:	61bb      	str	r3, [r7, #24]
      break;
 80094f2:	e002      	b.n	80094fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80094f4:	4b05      	ldr	r3, [pc, #20]	; (800950c <HAL_RCC_GetSysClockFreq+0x35c>)
 80094f6:	61bb      	str	r3, [r7, #24]
      break;
 80094f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80094fa:	69bb      	ldr	r3, [r7, #24]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3720      	adds	r7, #32
 8009500:	46bd      	mov	sp, r7
 8009502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009506:	bf00      	nop
 8009508:	40023800 	.word	0x40023800
 800950c:	00f42400 	.word	0x00f42400
 8009510:	007a1200 	.word	0x007a1200

08009514 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e28d      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 8083 	beq.w	800963a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009534:	4b94      	ldr	r3, [pc, #592]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f003 030c 	and.w	r3, r3, #12
 800953c:	2b04      	cmp	r3, #4
 800953e:	d019      	beq.n	8009574 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009540:	4b91      	ldr	r3, [pc, #580]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009548:	2b08      	cmp	r3, #8
 800954a:	d106      	bne.n	800955a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800954c:	4b8e      	ldr	r3, [pc, #568]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009558:	d00c      	beq.n	8009574 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800955a:	4b8b      	ldr	r3, [pc, #556]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009562:	2b0c      	cmp	r3, #12
 8009564:	d112      	bne.n	800958c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009566:	4b88      	ldr	r3, [pc, #544]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800956e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009572:	d10b      	bne.n	800958c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009574:	4b84      	ldr	r3, [pc, #528]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d05b      	beq.n	8009638 <HAL_RCC_OscConfig+0x124>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d157      	bne.n	8009638 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e25a      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009594:	d106      	bne.n	80095a4 <HAL_RCC_OscConfig+0x90>
 8009596:	4b7c      	ldr	r3, [pc, #496]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a7b      	ldr	r2, [pc, #492]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 800959c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095a0:	6013      	str	r3, [r2, #0]
 80095a2:	e01d      	b.n	80095e0 <HAL_RCC_OscConfig+0xcc>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095ac:	d10c      	bne.n	80095c8 <HAL_RCC_OscConfig+0xb4>
 80095ae:	4b76      	ldr	r3, [pc, #472]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a75      	ldr	r2, [pc, #468]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 80095b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095b8:	6013      	str	r3, [r2, #0]
 80095ba:	4b73      	ldr	r3, [pc, #460]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a72      	ldr	r2, [pc, #456]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 80095c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095c4:	6013      	str	r3, [r2, #0]
 80095c6:	e00b      	b.n	80095e0 <HAL_RCC_OscConfig+0xcc>
 80095c8:	4b6f      	ldr	r3, [pc, #444]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a6e      	ldr	r2, [pc, #440]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 80095ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095d2:	6013      	str	r3, [r2, #0]
 80095d4:	4b6c      	ldr	r3, [pc, #432]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a6b      	ldr	r2, [pc, #428]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 80095da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d013      	beq.n	8009610 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e8:	f7fb fde8 	bl	80051bc <HAL_GetTick>
 80095ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095ee:	e008      	b.n	8009602 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095f0:	f7fb fde4 	bl	80051bc <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	2b64      	cmp	r3, #100	; 0x64
 80095fc:	d901      	bls.n	8009602 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e21f      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009602:	4b61      	ldr	r3, [pc, #388]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800960a:	2b00      	cmp	r3, #0
 800960c:	d0f0      	beq.n	80095f0 <HAL_RCC_OscConfig+0xdc>
 800960e:	e014      	b.n	800963a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009610:	f7fb fdd4 	bl	80051bc <HAL_GetTick>
 8009614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009616:	e008      	b.n	800962a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009618:	f7fb fdd0 	bl	80051bc <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	2b64      	cmp	r3, #100	; 0x64
 8009624:	d901      	bls.n	800962a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e20b      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800962a:	4b57      	ldr	r3, [pc, #348]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1f0      	bne.n	8009618 <HAL_RCC_OscConfig+0x104>
 8009636:	e000      	b.n	800963a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0302 	and.w	r3, r3, #2
 8009642:	2b00      	cmp	r3, #0
 8009644:	d06f      	beq.n	8009726 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009646:	4b50      	ldr	r3, [pc, #320]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f003 030c 	and.w	r3, r3, #12
 800964e:	2b00      	cmp	r3, #0
 8009650:	d017      	beq.n	8009682 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009652:	4b4d      	ldr	r3, [pc, #308]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800965a:	2b08      	cmp	r3, #8
 800965c:	d105      	bne.n	800966a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800965e:	4b4a      	ldr	r3, [pc, #296]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00b      	beq.n	8009682 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800966a:	4b47      	ldr	r3, [pc, #284]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009672:	2b0c      	cmp	r3, #12
 8009674:	d11c      	bne.n	80096b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009676:	4b44      	ldr	r3, [pc, #272]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800967e:	2b00      	cmp	r3, #0
 8009680:	d116      	bne.n	80096b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009682:	4b41      	ldr	r3, [pc, #260]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0302 	and.w	r3, r3, #2
 800968a:	2b00      	cmp	r3, #0
 800968c:	d005      	beq.n	800969a <HAL_RCC_OscConfig+0x186>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d001      	beq.n	800969a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e1d3      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800969a:	4b3b      	ldr	r3, [pc, #236]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	4937      	ldr	r1, [pc, #220]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 80096aa:	4313      	orrs	r3, r2
 80096ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096ae:	e03a      	b.n	8009726 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d020      	beq.n	80096fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80096b8:	4b34      	ldr	r3, [pc, #208]	; (800978c <HAL_RCC_OscConfig+0x278>)
 80096ba:	2201      	movs	r2, #1
 80096bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096be:	f7fb fd7d 	bl	80051bc <HAL_GetTick>
 80096c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096c4:	e008      	b.n	80096d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096c6:	f7fb fd79 	bl	80051bc <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d901      	bls.n	80096d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e1b4      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096d8:	4b2b      	ldr	r3, [pc, #172]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d0f0      	beq.n	80096c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096e4:	4b28      	ldr	r3, [pc, #160]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	00db      	lsls	r3, r3, #3
 80096f2:	4925      	ldr	r1, [pc, #148]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	600b      	str	r3, [r1, #0]
 80096f8:	e015      	b.n	8009726 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80096fa:	4b24      	ldr	r3, [pc, #144]	; (800978c <HAL_RCC_OscConfig+0x278>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009700:	f7fb fd5c 	bl	80051bc <HAL_GetTick>
 8009704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009706:	e008      	b.n	800971a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009708:	f7fb fd58 	bl	80051bc <HAL_GetTick>
 800970c:	4602      	mov	r2, r0
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	2b02      	cmp	r3, #2
 8009714:	d901      	bls.n	800971a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e193      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800971a:	4b1b      	ldr	r3, [pc, #108]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0302 	and.w	r3, r3, #2
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1f0      	bne.n	8009708 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0308 	and.w	r3, r3, #8
 800972e:	2b00      	cmp	r3, #0
 8009730:	d036      	beq.n	80097a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d016      	beq.n	8009768 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800973a:	4b15      	ldr	r3, [pc, #84]	; (8009790 <HAL_RCC_OscConfig+0x27c>)
 800973c:	2201      	movs	r2, #1
 800973e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009740:	f7fb fd3c 	bl	80051bc <HAL_GetTick>
 8009744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009746:	e008      	b.n	800975a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009748:	f7fb fd38 	bl	80051bc <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	2b02      	cmp	r3, #2
 8009754:	d901      	bls.n	800975a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e173      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800975a:	4b0b      	ldr	r3, [pc, #44]	; (8009788 <HAL_RCC_OscConfig+0x274>)
 800975c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800975e:	f003 0302 	and.w	r3, r3, #2
 8009762:	2b00      	cmp	r3, #0
 8009764:	d0f0      	beq.n	8009748 <HAL_RCC_OscConfig+0x234>
 8009766:	e01b      	b.n	80097a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009768:	4b09      	ldr	r3, [pc, #36]	; (8009790 <HAL_RCC_OscConfig+0x27c>)
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800976e:	f7fb fd25 	bl	80051bc <HAL_GetTick>
 8009772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009774:	e00e      	b.n	8009794 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009776:	f7fb fd21 	bl	80051bc <HAL_GetTick>
 800977a:	4602      	mov	r2, r0
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	2b02      	cmp	r3, #2
 8009782:	d907      	bls.n	8009794 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009784:	2303      	movs	r3, #3
 8009786:	e15c      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
 8009788:	40023800 	.word	0x40023800
 800978c:	42470000 	.word	0x42470000
 8009790:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009794:	4b8a      	ldr	r3, [pc, #552]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 8009796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1ea      	bne.n	8009776 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0304 	and.w	r3, r3, #4
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 8097 	beq.w	80098dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80097ae:	2300      	movs	r3, #0
 80097b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097b2:	4b83      	ldr	r3, [pc, #524]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 80097b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10f      	bne.n	80097de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097be:	2300      	movs	r3, #0
 80097c0:	60bb      	str	r3, [r7, #8]
 80097c2:	4b7f      	ldr	r3, [pc, #508]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 80097c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c6:	4a7e      	ldr	r2, [pc, #504]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 80097c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097cc:	6413      	str	r3, [r2, #64]	; 0x40
 80097ce:	4b7c      	ldr	r3, [pc, #496]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 80097d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097d6:	60bb      	str	r3, [r7, #8]
 80097d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80097da:	2301      	movs	r3, #1
 80097dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097de:	4b79      	ldr	r3, [pc, #484]	; (80099c4 <HAL_RCC_OscConfig+0x4b0>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d118      	bne.n	800981c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80097ea:	4b76      	ldr	r3, [pc, #472]	; (80099c4 <HAL_RCC_OscConfig+0x4b0>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a75      	ldr	r2, [pc, #468]	; (80099c4 <HAL_RCC_OscConfig+0x4b0>)
 80097f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097f6:	f7fb fce1 	bl	80051bc <HAL_GetTick>
 80097fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097fc:	e008      	b.n	8009810 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097fe:	f7fb fcdd 	bl	80051bc <HAL_GetTick>
 8009802:	4602      	mov	r2, r0
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	2b02      	cmp	r3, #2
 800980a:	d901      	bls.n	8009810 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800980c:	2303      	movs	r3, #3
 800980e:	e118      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009810:	4b6c      	ldr	r3, [pc, #432]	; (80099c4 <HAL_RCC_OscConfig+0x4b0>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009818:	2b00      	cmp	r3, #0
 800981a:	d0f0      	beq.n	80097fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d106      	bne.n	8009832 <HAL_RCC_OscConfig+0x31e>
 8009824:	4b66      	ldr	r3, [pc, #408]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 8009826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009828:	4a65      	ldr	r2, [pc, #404]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 800982a:	f043 0301 	orr.w	r3, r3, #1
 800982e:	6713      	str	r3, [r2, #112]	; 0x70
 8009830:	e01c      	b.n	800986c <HAL_RCC_OscConfig+0x358>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	2b05      	cmp	r3, #5
 8009838:	d10c      	bne.n	8009854 <HAL_RCC_OscConfig+0x340>
 800983a:	4b61      	ldr	r3, [pc, #388]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 800983c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983e:	4a60      	ldr	r2, [pc, #384]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 8009840:	f043 0304 	orr.w	r3, r3, #4
 8009844:	6713      	str	r3, [r2, #112]	; 0x70
 8009846:	4b5e      	ldr	r3, [pc, #376]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 8009848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800984a:	4a5d      	ldr	r2, [pc, #372]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 800984c:	f043 0301 	orr.w	r3, r3, #1
 8009850:	6713      	str	r3, [r2, #112]	; 0x70
 8009852:	e00b      	b.n	800986c <HAL_RCC_OscConfig+0x358>
 8009854:	4b5a      	ldr	r3, [pc, #360]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 8009856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009858:	4a59      	ldr	r2, [pc, #356]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 800985a:	f023 0301 	bic.w	r3, r3, #1
 800985e:	6713      	str	r3, [r2, #112]	; 0x70
 8009860:	4b57      	ldr	r3, [pc, #348]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 8009862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009864:	4a56      	ldr	r2, [pc, #344]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 8009866:	f023 0304 	bic.w	r3, r3, #4
 800986a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d015      	beq.n	80098a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009874:	f7fb fca2 	bl	80051bc <HAL_GetTick>
 8009878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800987a:	e00a      	b.n	8009892 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800987c:	f7fb fc9e 	bl	80051bc <HAL_GetTick>
 8009880:	4602      	mov	r2, r0
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	f241 3288 	movw	r2, #5000	; 0x1388
 800988a:	4293      	cmp	r3, r2
 800988c:	d901      	bls.n	8009892 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e0d7      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009892:	4b4b      	ldr	r3, [pc, #300]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 8009894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d0ee      	beq.n	800987c <HAL_RCC_OscConfig+0x368>
 800989e:	e014      	b.n	80098ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098a0:	f7fb fc8c 	bl	80051bc <HAL_GetTick>
 80098a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098a6:	e00a      	b.n	80098be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098a8:	f7fb fc88 	bl	80051bc <HAL_GetTick>
 80098ac:	4602      	mov	r2, r0
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d901      	bls.n	80098be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e0c1      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098be:	4b40      	ldr	r3, [pc, #256]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 80098c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1ee      	bne.n	80098a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d105      	bne.n	80098dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098d0:	4b3b      	ldr	r3, [pc, #236]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 80098d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d4:	4a3a      	ldr	r2, [pc, #232]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 80098d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 80ad 	beq.w	8009a40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098e6:	4b36      	ldr	r3, [pc, #216]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	f003 030c 	and.w	r3, r3, #12
 80098ee:	2b08      	cmp	r3, #8
 80098f0:	d060      	beq.n	80099b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d145      	bne.n	8009986 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098fa:	4b33      	ldr	r3, [pc, #204]	; (80099c8 <HAL_RCC_OscConfig+0x4b4>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009900:	f7fb fc5c 	bl	80051bc <HAL_GetTick>
 8009904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009906:	e008      	b.n	800991a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009908:	f7fb fc58 	bl	80051bc <HAL_GetTick>
 800990c:	4602      	mov	r2, r0
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	2b02      	cmp	r3, #2
 8009914:	d901      	bls.n	800991a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009916:	2303      	movs	r3, #3
 8009918:	e093      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800991a:	4b29      	ldr	r3, [pc, #164]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1f0      	bne.n	8009908 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	69da      	ldr	r2, [r3, #28]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	431a      	orrs	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	019b      	lsls	r3, r3, #6
 8009936:	431a      	orrs	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993c:	085b      	lsrs	r3, r3, #1
 800993e:	3b01      	subs	r3, #1
 8009940:	041b      	lsls	r3, r3, #16
 8009942:	431a      	orrs	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009948:	061b      	lsls	r3, r3, #24
 800994a:	431a      	orrs	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009950:	071b      	lsls	r3, r3, #28
 8009952:	491b      	ldr	r1, [pc, #108]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 8009954:	4313      	orrs	r3, r2
 8009956:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009958:	4b1b      	ldr	r3, [pc, #108]	; (80099c8 <HAL_RCC_OscConfig+0x4b4>)
 800995a:	2201      	movs	r2, #1
 800995c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800995e:	f7fb fc2d 	bl	80051bc <HAL_GetTick>
 8009962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009964:	e008      	b.n	8009978 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009966:	f7fb fc29 	bl	80051bc <HAL_GetTick>
 800996a:	4602      	mov	r2, r0
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	2b02      	cmp	r3, #2
 8009972:	d901      	bls.n	8009978 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009974:	2303      	movs	r3, #3
 8009976:	e064      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009978:	4b11      	ldr	r3, [pc, #68]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0f0      	beq.n	8009966 <HAL_RCC_OscConfig+0x452>
 8009984:	e05c      	b.n	8009a40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009986:	4b10      	ldr	r3, [pc, #64]	; (80099c8 <HAL_RCC_OscConfig+0x4b4>)
 8009988:	2200      	movs	r2, #0
 800998a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800998c:	f7fb fc16 	bl	80051bc <HAL_GetTick>
 8009990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009992:	e008      	b.n	80099a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009994:	f7fb fc12 	bl	80051bc <HAL_GetTick>
 8009998:	4602      	mov	r2, r0
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d901      	bls.n	80099a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e04d      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099a6:	4b06      	ldr	r3, [pc, #24]	; (80099c0 <HAL_RCC_OscConfig+0x4ac>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1f0      	bne.n	8009994 <HAL_RCC_OscConfig+0x480>
 80099b2:	e045      	b.n	8009a40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d107      	bne.n	80099cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e040      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
 80099c0:	40023800 	.word	0x40023800
 80099c4:	40007000 	.word	0x40007000
 80099c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80099cc:	4b1f      	ldr	r3, [pc, #124]	; (8009a4c <HAL_RCC_OscConfig+0x538>)
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d030      	beq.n	8009a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d129      	bne.n	8009a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d122      	bne.n	8009a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80099fc:	4013      	ands	r3, r2
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d119      	bne.n	8009a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a12:	085b      	lsrs	r3, r3, #1
 8009a14:	3b01      	subs	r3, #1
 8009a16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d10f      	bne.n	8009a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d107      	bne.n	8009a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d001      	beq.n	8009a40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e000      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	40023800 	.word	0x40023800

08009a50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e07b      	b.n	8009b5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d108      	bne.n	8009a7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a72:	d009      	beq.n	8009a88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	61da      	str	r2, [r3, #28]
 8009a7a:	e005      	b.n	8009a88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d106      	bne.n	8009aa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7fa fe20 	bl	80046e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2202      	movs	r2, #2
 8009aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009abe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ada:	431a      	orrs	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	f003 0302 	and.w	r3, r3, #2
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	f003 0301 	and.w	r3, r3, #1
 8009aee:	431a      	orrs	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009af8:	431a      	orrs	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b02:	431a      	orrs	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a1b      	ldr	r3, [r3, #32]
 8009b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b0c:	ea42 0103 	orr.w	r1, r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	430a      	orrs	r2, r1
 8009b1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	0c1b      	lsrs	r3, r3, #16
 8009b26:	f003 0104 	and.w	r1, r3, #4
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2e:	f003 0210 	and.w	r2, r3, #16
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	430a      	orrs	r2, r1
 8009b38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	69da      	ldr	r2, [r3, #28]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b088      	sub	sp, #32
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	60f8      	str	r0, [r7, #12]
 8009b6a:	60b9      	str	r1, [r7, #8]
 8009b6c:	603b      	str	r3, [r7, #0]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d101      	bne.n	8009b84 <HAL_SPI_Transmit+0x22>
 8009b80:	2302      	movs	r3, #2
 8009b82:	e126      	b.n	8009dd2 <HAL_SPI_Transmit+0x270>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b8c:	f7fb fb16 	bl	80051bc <HAL_GetTick>
 8009b90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009b92:	88fb      	ldrh	r3, [r7, #6]
 8009b94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d002      	beq.n	8009ba8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009ba6:	e10b      	b.n	8009dc0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d002      	beq.n	8009bb4 <HAL_SPI_Transmit+0x52>
 8009bae:	88fb      	ldrh	r3, [r7, #6]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d102      	bne.n	8009bba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009bb8:	e102      	b.n	8009dc0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2203      	movs	r2, #3
 8009bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	88fa      	ldrh	r2, [r7, #6]
 8009bd2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	88fa      	ldrh	r2, [r7, #6]
 8009bd8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c00:	d10f      	bne.n	8009c22 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c2c:	2b40      	cmp	r3, #64	; 0x40
 8009c2e:	d007      	beq.n	8009c40 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c48:	d14b      	bne.n	8009ce2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <HAL_SPI_Transmit+0xf6>
 8009c52:	8afb      	ldrh	r3, [r7, #22]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d13e      	bne.n	8009cd6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5c:	881a      	ldrh	r2, [r3, #0]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c68:	1c9a      	adds	r2, r3, #2
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	3b01      	subs	r3, #1
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009c7c:	e02b      	b.n	8009cd6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f003 0302 	and.w	r3, r3, #2
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d112      	bne.n	8009cb2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c90:	881a      	ldrh	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9c:	1c9a      	adds	r2, r3, #2
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	86da      	strh	r2, [r3, #54]	; 0x36
 8009cb0:	e011      	b.n	8009cd6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cb2:	f7fb fa83 	bl	80051bc <HAL_GetTick>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d803      	bhi.n	8009cca <HAL_SPI_Transmit+0x168>
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc8:	d102      	bne.n	8009cd0 <HAL_SPI_Transmit+0x16e>
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d102      	bne.n	8009cd6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009cd4:	e074      	b.n	8009dc0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1ce      	bne.n	8009c7e <HAL_SPI_Transmit+0x11c>
 8009ce0:	e04c      	b.n	8009d7c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d002      	beq.n	8009cf0 <HAL_SPI_Transmit+0x18e>
 8009cea:	8afb      	ldrh	r3, [r7, #22]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d140      	bne.n	8009d72 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	330c      	adds	r3, #12
 8009cfa:	7812      	ldrb	r2, [r2, #0]
 8009cfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009d16:	e02c      	b.n	8009d72 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d113      	bne.n	8009d4e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	330c      	adds	r3, #12
 8009d30:	7812      	ldrb	r2, [r2, #0]
 8009d32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	3b01      	subs	r3, #1
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d4c:	e011      	b.n	8009d72 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d4e:	f7fb fa35 	bl	80051bc <HAL_GetTick>
 8009d52:	4602      	mov	r2, r0
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d803      	bhi.n	8009d66 <HAL_SPI_Transmit+0x204>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d64:	d102      	bne.n	8009d6c <HAL_SPI_Transmit+0x20a>
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d102      	bne.n	8009d72 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d70:	e026      	b.n	8009dc0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1cd      	bne.n	8009d18 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d7c:	69ba      	ldr	r2, [r7, #24]
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 fbcb 	bl	800a51c <SPI_EndRxTxTransaction>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2220      	movs	r2, #32
 8009d90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10a      	bne.n	8009db0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	613b      	str	r3, [r7, #16]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	613b      	str	r3, [r7, #16]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	613b      	str	r3, [r7, #16]
 8009dae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	77fb      	strb	r3, [r7, #31]
 8009dbc:	e000      	b.n	8009dc0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009dbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009dd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3720      	adds	r7, #32
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b088      	sub	sp, #32
 8009dde:	af02      	add	r7, sp, #8
 8009de0:	60f8      	str	r0, [r7, #12]
 8009de2:	60b9      	str	r1, [r7, #8]
 8009de4:	603b      	str	r3, [r7, #0]
 8009de6:	4613      	mov	r3, r2
 8009de8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009df6:	d112      	bne.n	8009e1e <HAL_SPI_Receive+0x44>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10e      	bne.n	8009e1e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2204      	movs	r2, #4
 8009e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009e08:	88fa      	ldrh	r2, [r7, #6]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	68b9      	ldr	r1, [r7, #8]
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f000 f8f1 	bl	8009ffc <HAL_SPI_TransmitReceive>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	e0ea      	b.n	8009ff4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d101      	bne.n	8009e2c <HAL_SPI_Receive+0x52>
 8009e28:	2302      	movs	r3, #2
 8009e2a:	e0e3      	b.n	8009ff4 <HAL_SPI_Receive+0x21a>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e34:	f7fb f9c2 	bl	80051bc <HAL_GetTick>
 8009e38:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d002      	beq.n	8009e4c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009e46:	2302      	movs	r3, #2
 8009e48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e4a:	e0ca      	b.n	8009fe2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <HAL_SPI_Receive+0x7e>
 8009e52:	88fb      	ldrh	r3, [r7, #6]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d102      	bne.n	8009e5e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e5c:	e0c1      	b.n	8009fe2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2204      	movs	r2, #4
 8009e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	88fa      	ldrh	r2, [r7, #6]
 8009e76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	88fa      	ldrh	r2, [r7, #6]
 8009e7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ea4:	d10f      	bne.n	8009ec6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009eb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ec4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed0:	2b40      	cmp	r3, #64	; 0x40
 8009ed2:	d007      	beq.n	8009ee4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ee2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d162      	bne.n	8009fb2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009eec:	e02e      	b.n	8009f4c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f003 0301 	and.w	r3, r3, #1
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d115      	bne.n	8009f28 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f103 020c 	add.w	r2, r3, #12
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f08:	7812      	ldrb	r2, [r2, #0]
 8009f0a:	b2d2      	uxtb	r2, r2
 8009f0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f26:	e011      	b.n	8009f4c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f28:	f7fb f948 	bl	80051bc <HAL_GetTick>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d803      	bhi.n	8009f40 <HAL_SPI_Receive+0x166>
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3e:	d102      	bne.n	8009f46 <HAL_SPI_Receive+0x16c>
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d102      	bne.n	8009f4c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009f46:	2303      	movs	r3, #3
 8009f48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009f4a:	e04a      	b.n	8009fe2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1cb      	bne.n	8009eee <HAL_SPI_Receive+0x114>
 8009f56:	e031      	b.n	8009fbc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	f003 0301 	and.w	r3, r3, #1
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d113      	bne.n	8009f8e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f70:	b292      	uxth	r2, r2
 8009f72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f78:	1c9a      	adds	r2, r3, #2
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	3b01      	subs	r3, #1
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f8c:	e011      	b.n	8009fb2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f8e:	f7fb f915 	bl	80051bc <HAL_GetTick>
 8009f92:	4602      	mov	r2, r0
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d803      	bhi.n	8009fa6 <HAL_SPI_Receive+0x1cc>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa4:	d102      	bne.n	8009fac <HAL_SPI_Receive+0x1d2>
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d102      	bne.n	8009fb2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009fb0:	e017      	b.n	8009fe2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1cd      	bne.n	8009f58 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 fa45 	bl	800a450 <SPI_EndRxTransaction>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2220      	movs	r2, #32
 8009fd0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d002      	beq.n	8009fe0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	75fb      	strb	r3, [r7, #23]
 8009fde:	e000      	b.n	8009fe2 <HAL_SPI_Receive+0x208>
  }

error :
 8009fe0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b08c      	sub	sp, #48	; 0x30
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a00a:	2301      	movs	r3, #1
 800a00c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <HAL_SPI_TransmitReceive+0x26>
 800a01e:	2302      	movs	r3, #2
 800a020:	e18a      	b.n	800a338 <HAL_SPI_TransmitReceive+0x33c>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a02a:	f7fb f8c7 	bl	80051bc <HAL_GetTick>
 800a02e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a040:	887b      	ldrh	r3, [r7, #2]
 800a042:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d00f      	beq.n	800a06c <HAL_SPI_TransmitReceive+0x70>
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a052:	d107      	bne.n	800a064 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d103      	bne.n	800a064 <HAL_SPI_TransmitReceive+0x68>
 800a05c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a060:	2b04      	cmp	r3, #4
 800a062:	d003      	beq.n	800a06c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a064:	2302      	movs	r3, #2
 800a066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a06a:	e15b      	b.n	800a324 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d005      	beq.n	800a07e <HAL_SPI_TransmitReceive+0x82>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <HAL_SPI_TransmitReceive+0x82>
 800a078:	887b      	ldrh	r3, [r7, #2]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d103      	bne.n	800a086 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a084:	e14e      	b.n	800a324 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b04      	cmp	r3, #4
 800a090:	d003      	beq.n	800a09a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2205      	movs	r2, #5
 800a096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	887a      	ldrh	r2, [r7, #2]
 800a0aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	887a      	ldrh	r2, [r7, #2]
 800a0b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	887a      	ldrh	r2, [r7, #2]
 800a0bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	887a      	ldrh	r2, [r7, #2]
 800a0c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0da:	2b40      	cmp	r3, #64	; 0x40
 800a0dc:	d007      	beq.n	800a0ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0f6:	d178      	bne.n	800a1ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <HAL_SPI_TransmitReceive+0x10a>
 800a100:	8b7b      	ldrh	r3, [r7, #26]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d166      	bne.n	800a1d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10a:	881a      	ldrh	r2, [r3, #0]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a116:	1c9a      	adds	r2, r3, #2
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a120:	b29b      	uxth	r3, r3
 800a122:	3b01      	subs	r3, #1
 800a124:	b29a      	uxth	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a12a:	e053      	b.n	800a1d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	f003 0302 	and.w	r3, r3, #2
 800a136:	2b02      	cmp	r3, #2
 800a138:	d11b      	bne.n	800a172 <HAL_SPI_TransmitReceive+0x176>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a13e:	b29b      	uxth	r3, r3
 800a140:	2b00      	cmp	r3, #0
 800a142:	d016      	beq.n	800a172 <HAL_SPI_TransmitReceive+0x176>
 800a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a146:	2b01      	cmp	r3, #1
 800a148:	d113      	bne.n	800a172 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14e:	881a      	ldrh	r2, [r3, #0]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15a:	1c9a      	adds	r2, r3, #2
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a164:	b29b      	uxth	r3, r3
 800a166:	3b01      	subs	r3, #1
 800a168:	b29a      	uxth	r2, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a16e:	2300      	movs	r3, #0
 800a170:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d119      	bne.n	800a1b4 <HAL_SPI_TransmitReceive+0x1b8>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a184:	b29b      	uxth	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d014      	beq.n	800a1b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68da      	ldr	r2, [r3, #12]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a194:	b292      	uxth	r2, r2
 800a196:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19c:	1c9a      	adds	r2, r3, #2
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a1b4:	f7fb f802 	bl	80051bc <HAL_GetTick>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d807      	bhi.n	800a1d4 <HAL_SPI_TransmitReceive+0x1d8>
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ca:	d003      	beq.n	800a1d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a1d2:	e0a7      	b.n	800a324 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1a6      	bne.n	800a12c <HAL_SPI_TransmitReceive+0x130>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1a1      	bne.n	800a12c <HAL_SPI_TransmitReceive+0x130>
 800a1e8:	e07c      	b.n	800a2e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <HAL_SPI_TransmitReceive+0x1fc>
 800a1f2:	8b7b      	ldrh	r3, [r7, #26]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d16b      	bne.n	800a2d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	330c      	adds	r3, #12
 800a202:	7812      	ldrb	r2, [r2, #0]
 800a204:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a214:	b29b      	uxth	r3, r3
 800a216:	3b01      	subs	r3, #1
 800a218:	b29a      	uxth	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a21e:	e057      	b.n	800a2d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	f003 0302 	and.w	r3, r3, #2
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d11c      	bne.n	800a268 <HAL_SPI_TransmitReceive+0x26c>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a232:	b29b      	uxth	r3, r3
 800a234:	2b00      	cmp	r3, #0
 800a236:	d017      	beq.n	800a268 <HAL_SPI_TransmitReceive+0x26c>
 800a238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d114      	bne.n	800a268 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	330c      	adds	r3, #12
 800a248:	7812      	ldrb	r2, [r2, #0]
 800a24a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a250:	1c5a      	adds	r2, r3, #1
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	3b01      	subs	r3, #1
 800a25e:	b29a      	uxth	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a264:	2300      	movs	r3, #0
 800a266:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	2b01      	cmp	r3, #1
 800a274:	d119      	bne.n	800a2aa <HAL_SPI_TransmitReceive+0x2ae>
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d014      	beq.n	800a2aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68da      	ldr	r2, [r3, #12]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28a:	b2d2      	uxtb	r2, r2
 800a28c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a2aa:	f7fa ff87 	bl	80051bc <HAL_GetTick>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	1ad3      	subs	r3, r2, r3
 800a2b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d803      	bhi.n	800a2c2 <HAL_SPI_TransmitReceive+0x2c6>
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c0:	d102      	bne.n	800a2c8 <HAL_SPI_TransmitReceive+0x2cc>
 800a2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d103      	bne.n	800a2d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a2ce:	e029      	b.n	800a324 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1a2      	bne.n	800a220 <HAL_SPI_TransmitReceive+0x224>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d19d      	bne.n	800a220 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 f917 	bl	800a51c <SPI_EndRxTxTransaction>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d006      	beq.n	800a302 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2220      	movs	r2, #32
 800a2fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a300:	e010      	b.n	800a324 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10b      	bne.n	800a322 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a30a:	2300      	movs	r3, #0
 800a30c:	617b      	str	r3, [r7, #20]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	617b      	str	r3, [r7, #20]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	617b      	str	r3, [r7, #20]
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	e000      	b.n	800a324 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a322:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2200      	movs	r2, #0
 800a330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a334:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3730      	adds	r7, #48	; 0x30
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	4613      	mov	r3, r2
 800a34e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a350:	f7fa ff34 	bl	80051bc <HAL_GetTick>
 800a354:	4602      	mov	r2, r0
 800a356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a358:	1a9b      	subs	r3, r3, r2
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	4413      	add	r3, r2
 800a35e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a360:	f7fa ff2c 	bl	80051bc <HAL_GetTick>
 800a364:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a366:	4b39      	ldr	r3, [pc, #228]	; (800a44c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	015b      	lsls	r3, r3, #5
 800a36c:	0d1b      	lsrs	r3, r3, #20
 800a36e:	69fa      	ldr	r2, [r7, #28]
 800a370:	fb02 f303 	mul.w	r3, r2, r3
 800a374:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a376:	e054      	b.n	800a422 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a37e:	d050      	beq.n	800a422 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a380:	f7fa ff1c 	bl	80051bc <HAL_GetTick>
 800a384:	4602      	mov	r2, r0
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	69fa      	ldr	r2, [r7, #28]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d902      	bls.n	800a396 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d13d      	bne.n	800a412 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a3a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3ae:	d111      	bne.n	800a3d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3b8:	d004      	beq.n	800a3c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3c2:	d107      	bne.n	800a3d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3dc:	d10f      	bne.n	800a3fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e017      	b.n	800a442 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a418:	2300      	movs	r3, #0
 800a41a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	3b01      	subs	r3, #1
 800a420:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	689a      	ldr	r2, [r3, #8]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	4013      	ands	r3, r2
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	429a      	cmp	r2, r3
 800a430:	bf0c      	ite	eq
 800a432:	2301      	moveq	r3, #1
 800a434:	2300      	movne	r3, #0
 800a436:	b2db      	uxtb	r3, r3
 800a438:	461a      	mov	r2, r3
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d19b      	bne.n	800a378 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3720      	adds	r7, #32
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	200000a0 	.word	0x200000a0

0800a450 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af02      	add	r7, sp, #8
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a464:	d111      	bne.n	800a48a <SPI_EndRxTransaction+0x3a>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a46e:	d004      	beq.n	800a47a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a478:	d107      	bne.n	800a48a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a488:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a492:	d12a      	bne.n	800a4ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a49c:	d012      	beq.n	800a4c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	2180      	movs	r1, #128	; 0x80
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7ff ff49 	bl	800a340 <SPI_WaitFlagStateUntilTimeout>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d02d      	beq.n	800a510 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b8:	f043 0220 	orr.w	r2, r3, #32
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e026      	b.n	800a512 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f7ff ff36 	bl	800a340 <SPI_WaitFlagStateUntilTimeout>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d01a      	beq.n	800a510 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4de:	f043 0220 	orr.w	r2, r3, #32
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	e013      	b.n	800a512 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f7ff ff23 	bl	800a340 <SPI_WaitFlagStateUntilTimeout>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d007      	beq.n	800a510 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a504:	f043 0220 	orr.w	r2, r3, #32
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e000      	b.n	800a512 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
	...

0800a51c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af02      	add	r7, sp, #8
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a528:	4b1b      	ldr	r3, [pc, #108]	; (800a598 <SPI_EndRxTxTransaction+0x7c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a1b      	ldr	r2, [pc, #108]	; (800a59c <SPI_EndRxTxTransaction+0x80>)
 800a52e:	fba2 2303 	umull	r2, r3, r2, r3
 800a532:	0d5b      	lsrs	r3, r3, #21
 800a534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a538:	fb02 f303 	mul.w	r3, r2, r3
 800a53c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a546:	d112      	bne.n	800a56e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2200      	movs	r2, #0
 800a550:	2180      	movs	r1, #128	; 0x80
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f7ff fef4 	bl	800a340 <SPI_WaitFlagStateUntilTimeout>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d016      	beq.n	800a58c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a562:	f043 0220 	orr.w	r2, r3, #32
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a56a:	2303      	movs	r3, #3
 800a56c:	e00f      	b.n	800a58e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00a      	beq.n	800a58a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	3b01      	subs	r3, #1
 800a578:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a584:	2b80      	cmp	r3, #128	; 0x80
 800a586:	d0f2      	beq.n	800a56e <SPI_EndRxTxTransaction+0x52>
 800a588:	e000      	b.n	800a58c <SPI_EndRxTxTransaction+0x70>
        break;
 800a58a:	bf00      	nop
  }

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	200000a0 	.word	0x200000a0
 800a59c:	165e9f81 	.word	0x165e9f81

0800a5a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e041      	b.n	800a636 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d106      	bne.n	800a5cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7fa f93a 	bl	8004840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3304      	adds	r3, #4
 800a5dc:	4619      	mov	r1, r3
 800a5de:	4610      	mov	r0, r2
 800a5e0:	f000 fc1c 	bl	800ae1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d109      	bne.n	800a664 <HAL_TIM_PWM_Start+0x24>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a656:	b2db      	uxtb	r3, r3
 800a658:	2b01      	cmp	r3, #1
 800a65a:	bf14      	ite	ne
 800a65c:	2301      	movne	r3, #1
 800a65e:	2300      	moveq	r3, #0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	e022      	b.n	800a6aa <HAL_TIM_PWM_Start+0x6a>
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	2b04      	cmp	r3, #4
 800a668:	d109      	bne.n	800a67e <HAL_TIM_PWM_Start+0x3e>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b01      	cmp	r3, #1
 800a674:	bf14      	ite	ne
 800a676:	2301      	movne	r3, #1
 800a678:	2300      	moveq	r3, #0
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	e015      	b.n	800a6aa <HAL_TIM_PWM_Start+0x6a>
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	2b08      	cmp	r3, #8
 800a682:	d109      	bne.n	800a698 <HAL_TIM_PWM_Start+0x58>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	bf14      	ite	ne
 800a690:	2301      	movne	r3, #1
 800a692:	2300      	moveq	r3, #0
 800a694:	b2db      	uxtb	r3, r3
 800a696:	e008      	b.n	800a6aa <HAL_TIM_PWM_Start+0x6a>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	bf14      	ite	ne
 800a6a4:	2301      	movne	r3, #1
 800a6a6:	2300      	moveq	r3, #0
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e07c      	b.n	800a7ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d104      	bne.n	800a6c2 <HAL_TIM_PWM_Start+0x82>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6c0:	e013      	b.n	800a6ea <HAL_TIM_PWM_Start+0xaa>
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	d104      	bne.n	800a6d2 <HAL_TIM_PWM_Start+0x92>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2202      	movs	r2, #2
 800a6cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6d0:	e00b      	b.n	800a6ea <HAL_TIM_PWM_Start+0xaa>
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b08      	cmp	r3, #8
 800a6d6:	d104      	bne.n	800a6e2 <HAL_TIM_PWM_Start+0xa2>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6e0:	e003      	b.n	800a6ea <HAL_TIM_PWM_Start+0xaa>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2202      	movs	r2, #2
 800a6e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 fde2 	bl	800b2bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a2d      	ldr	r2, [pc, #180]	; (800a7b4 <HAL_TIM_PWM_Start+0x174>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d004      	beq.n	800a70c <HAL_TIM_PWM_Start+0xcc>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a2c      	ldr	r2, [pc, #176]	; (800a7b8 <HAL_TIM_PWM_Start+0x178>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d101      	bne.n	800a710 <HAL_TIM_PWM_Start+0xd0>
 800a70c:	2301      	movs	r3, #1
 800a70e:	e000      	b.n	800a712 <HAL_TIM_PWM_Start+0xd2>
 800a710:	2300      	movs	r3, #0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d007      	beq.n	800a726 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a724:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a22      	ldr	r2, [pc, #136]	; (800a7b4 <HAL_TIM_PWM_Start+0x174>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d022      	beq.n	800a776 <HAL_TIM_PWM_Start+0x136>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a738:	d01d      	beq.n	800a776 <HAL_TIM_PWM_Start+0x136>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1f      	ldr	r2, [pc, #124]	; (800a7bc <HAL_TIM_PWM_Start+0x17c>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d018      	beq.n	800a776 <HAL_TIM_PWM_Start+0x136>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a1d      	ldr	r2, [pc, #116]	; (800a7c0 <HAL_TIM_PWM_Start+0x180>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d013      	beq.n	800a776 <HAL_TIM_PWM_Start+0x136>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a1c      	ldr	r2, [pc, #112]	; (800a7c4 <HAL_TIM_PWM_Start+0x184>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d00e      	beq.n	800a776 <HAL_TIM_PWM_Start+0x136>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a16      	ldr	r2, [pc, #88]	; (800a7b8 <HAL_TIM_PWM_Start+0x178>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d009      	beq.n	800a776 <HAL_TIM_PWM_Start+0x136>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a18      	ldr	r2, [pc, #96]	; (800a7c8 <HAL_TIM_PWM_Start+0x188>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d004      	beq.n	800a776 <HAL_TIM_PWM_Start+0x136>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a16      	ldr	r2, [pc, #88]	; (800a7cc <HAL_TIM_PWM_Start+0x18c>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d111      	bne.n	800a79a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	f003 0307 	and.w	r3, r3, #7
 800a780:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2b06      	cmp	r3, #6
 800a786:	d010      	beq.n	800a7aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f042 0201 	orr.w	r2, r2, #1
 800a796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a798:	e007      	b.n	800a7aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f042 0201 	orr.w	r2, r2, #1
 800a7a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	40010000 	.word	0x40010000
 800a7b8:	40010400 	.word	0x40010400
 800a7bc:	40000400 	.word	0x40000400
 800a7c0:	40000800 	.word	0x40000800
 800a7c4:	40000c00 	.word	0x40000c00
 800a7c8:	40014000 	.word	0x40014000
 800a7cc:	40001800 	.word	0x40001800

0800a7d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e097      	b.n	800a914 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d106      	bne.n	800a7fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7fa f967 	bl	8004acc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2202      	movs	r2, #2
 800a802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	6812      	ldr	r2, [r2, #0]
 800a810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a814:	f023 0307 	bic.w	r3, r3, #7
 800a818:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	3304      	adds	r3, #4
 800a822:	4619      	mov	r1, r3
 800a824:	4610      	mov	r0, r2
 800a826:	f000 faf9 	bl	800ae1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6a1b      	ldr	r3, [r3, #32]
 800a840:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	4313      	orrs	r3, r2
 800a84a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a852:	f023 0303 	bic.w	r3, r3, #3
 800a856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	689a      	ldr	r2, [r3, #8]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	699b      	ldr	r3, [r3, #24]
 800a860:	021b      	lsls	r3, r3, #8
 800a862:	4313      	orrs	r3, r2
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	4313      	orrs	r3, r2
 800a868:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a870:	f023 030c 	bic.w	r3, r3, #12
 800a874:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a87c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a880:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	68da      	ldr	r2, [r3, #12]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	69db      	ldr	r3, [r3, #28]
 800a88a:	021b      	lsls	r3, r3, #8
 800a88c:	4313      	orrs	r3, r2
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	4313      	orrs	r3, r2
 800a892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	011a      	lsls	r2, r3, #4
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	031b      	lsls	r3, r3, #12
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a8ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a8b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	011b      	lsls	r3, r3, #4
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3718      	adds	r7, #24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a92c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a934:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a93c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a944:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d110      	bne.n	800a96e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d102      	bne.n	800a958 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a952:	7b7b      	ldrb	r3, [r7, #13]
 800a954:	2b01      	cmp	r3, #1
 800a956:	d001      	beq.n	800a95c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e069      	b.n	800aa30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2202      	movs	r2, #2
 800a960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2202      	movs	r2, #2
 800a968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a96c:	e031      	b.n	800a9d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	2b04      	cmp	r3, #4
 800a972:	d110      	bne.n	800a996 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d102      	bne.n	800a980 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a97a:	7b3b      	ldrb	r3, [r7, #12]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d001      	beq.n	800a984 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e055      	b.n	800aa30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2202      	movs	r2, #2
 800a988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2202      	movs	r2, #2
 800a990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a994:	e01d      	b.n	800a9d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d108      	bne.n	800a9ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d105      	bne.n	800a9ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9a2:	7b7b      	ldrb	r3, [r7, #13]
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d102      	bne.n	800a9ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a9a8:	7b3b      	ldrb	r3, [r7, #12]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d001      	beq.n	800a9b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e03e      	b.n	800aa30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2202      	movs	r2, #2
 800a9be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2202      	movs	r2, #2
 800a9c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2202      	movs	r2, #2
 800a9ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d003      	beq.n	800a9e0 <HAL_TIM_Encoder_Start+0xc4>
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b04      	cmp	r3, #4
 800a9dc:	d008      	beq.n	800a9f0 <HAL_TIM_Encoder_Start+0xd4>
 800a9de:	e00f      	b.n	800aa00 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 fc67 	bl	800b2bc <TIM_CCxChannelCmd>
      break;
 800a9ee:	e016      	b.n	800aa1e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	2104      	movs	r1, #4
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 fc5f 	bl	800b2bc <TIM_CCxChannelCmd>
      break;
 800a9fe:	e00e      	b.n	800aa1e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2201      	movs	r2, #1
 800aa06:	2100      	movs	r1, #0
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 fc57 	bl	800b2bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2201      	movs	r2, #1
 800aa14:	2104      	movs	r1, #4
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fc50 	bl	800b2bc <TIM_CCxChannelCmd>
      break;
 800aa1c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f042 0201 	orr.w	r2, r2, #1
 800aa2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	f003 0302 	and.w	r3, r3, #2
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d122      	bne.n	800aa94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	f003 0302 	and.w	r3, r3, #2
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d11b      	bne.n	800aa94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f06f 0202 	mvn.w	r2, #2
 800aa64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	f003 0303 	and.w	r3, r3, #3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d003      	beq.n	800aa82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f9b0 	bl	800ade0 <HAL_TIM_IC_CaptureCallback>
 800aa80:	e005      	b.n	800aa8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f9a2 	bl	800adcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f9b3 	bl	800adf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	f003 0304 	and.w	r3, r3, #4
 800aa9e:	2b04      	cmp	r3, #4
 800aaa0:	d122      	bne.n	800aae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	f003 0304 	and.w	r3, r3, #4
 800aaac:	2b04      	cmp	r3, #4
 800aaae:	d11b      	bne.n	800aae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f06f 0204 	mvn.w	r2, #4
 800aab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2202      	movs	r2, #2
 800aabe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f986 	bl	800ade0 <HAL_TIM_IC_CaptureCallback>
 800aad4:	e005      	b.n	800aae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f978 	bl	800adcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f989 	bl	800adf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	f003 0308 	and.w	r3, r3, #8
 800aaf2:	2b08      	cmp	r3, #8
 800aaf4:	d122      	bne.n	800ab3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	f003 0308 	and.w	r3, r3, #8
 800ab00:	2b08      	cmp	r3, #8
 800ab02:	d11b      	bne.n	800ab3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f06f 0208 	mvn.w	r2, #8
 800ab0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2204      	movs	r2, #4
 800ab12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	69db      	ldr	r3, [r3, #28]
 800ab1a:	f003 0303 	and.w	r3, r3, #3
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f95c 	bl	800ade0 <HAL_TIM_IC_CaptureCallback>
 800ab28:	e005      	b.n	800ab36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f94e 	bl	800adcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f95f 	bl	800adf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	f003 0310 	and.w	r3, r3, #16
 800ab46:	2b10      	cmp	r3, #16
 800ab48:	d122      	bne.n	800ab90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	f003 0310 	and.w	r3, r3, #16
 800ab54:	2b10      	cmp	r3, #16
 800ab56:	d11b      	bne.n	800ab90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f06f 0210 	mvn.w	r2, #16
 800ab60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2208      	movs	r2, #8
 800ab66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d003      	beq.n	800ab7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f932 	bl	800ade0 <HAL_TIM_IC_CaptureCallback>
 800ab7c:	e005      	b.n	800ab8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f924 	bl	800adcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f935 	bl	800adf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	f003 0301 	and.w	r3, r3, #1
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d10e      	bne.n	800abbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	f003 0301 	and.w	r3, r3, #1
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d107      	bne.n	800abbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f06f 0201 	mvn.w	r2, #1
 800abb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7f6 faee 	bl	8001198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abc6:	2b80      	cmp	r3, #128	; 0x80
 800abc8:	d10e      	bne.n	800abe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd4:	2b80      	cmp	r3, #128	; 0x80
 800abd6:	d107      	bne.n	800abe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800abe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fc68 	bl	800b4b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf2:	2b40      	cmp	r3, #64	; 0x40
 800abf4:	d10e      	bne.n	800ac14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac00:	2b40      	cmp	r3, #64	; 0x40
 800ac02:	d107      	bne.n	800ac14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f8fa 	bl	800ae08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f003 0320 	and.w	r3, r3, #32
 800ac1e:	2b20      	cmp	r3, #32
 800ac20:	d10e      	bne.n	800ac40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	f003 0320 	and.w	r3, r3, #32
 800ac2c:	2b20      	cmp	r3, #32
 800ac2e:	d107      	bne.n	800ac40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f06f 0220 	mvn.w	r2, #32
 800ac38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fc32 	bl	800b4a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d101      	bne.n	800ac66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac62:	2302      	movs	r3, #2
 800ac64:	e0ae      	b.n	800adc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b0c      	cmp	r3, #12
 800ac72:	f200 809f 	bhi.w	800adb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ac76:	a201      	add	r2, pc, #4	; (adr r2, 800ac7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac7c:	0800acb1 	.word	0x0800acb1
 800ac80:	0800adb5 	.word	0x0800adb5
 800ac84:	0800adb5 	.word	0x0800adb5
 800ac88:	0800adb5 	.word	0x0800adb5
 800ac8c:	0800acf1 	.word	0x0800acf1
 800ac90:	0800adb5 	.word	0x0800adb5
 800ac94:	0800adb5 	.word	0x0800adb5
 800ac98:	0800adb5 	.word	0x0800adb5
 800ac9c:	0800ad33 	.word	0x0800ad33
 800aca0:	0800adb5 	.word	0x0800adb5
 800aca4:	0800adb5 	.word	0x0800adb5
 800aca8:	0800adb5 	.word	0x0800adb5
 800acac:	0800ad73 	.word	0x0800ad73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68b9      	ldr	r1, [r7, #8]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 f950 	bl	800af5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	699a      	ldr	r2, [r3, #24]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f042 0208 	orr.w	r2, r2, #8
 800acca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	699a      	ldr	r2, [r3, #24]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f022 0204 	bic.w	r2, r2, #4
 800acda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	6999      	ldr	r1, [r3, #24]
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	691a      	ldr	r2, [r3, #16]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	619a      	str	r2, [r3, #24]
      break;
 800acee:	e064      	b.n	800adba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68b9      	ldr	r1, [r7, #8]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 f9a0 	bl	800b03c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	699a      	ldr	r2, [r3, #24]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	699a      	ldr	r2, [r3, #24]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	6999      	ldr	r1, [r3, #24]
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	021a      	lsls	r2, r3, #8
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	430a      	orrs	r2, r1
 800ad2e:	619a      	str	r2, [r3, #24]
      break;
 800ad30:	e043      	b.n	800adba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68b9      	ldr	r1, [r7, #8]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f000 f9f5 	bl	800b128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	69da      	ldr	r2, [r3, #28]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f042 0208 	orr.w	r2, r2, #8
 800ad4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	69da      	ldr	r2, [r3, #28]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f022 0204 	bic.w	r2, r2, #4
 800ad5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	69d9      	ldr	r1, [r3, #28]
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	691a      	ldr	r2, [r3, #16]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	430a      	orrs	r2, r1
 800ad6e:	61da      	str	r2, [r3, #28]
      break;
 800ad70:	e023      	b.n	800adba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68b9      	ldr	r1, [r7, #8]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 fa49 	bl	800b210 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	69da      	ldr	r2, [r3, #28]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	69da      	ldr	r2, [r3, #28]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	69d9      	ldr	r1, [r3, #28]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	021a      	lsls	r2, r3, #8
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	430a      	orrs	r2, r1
 800adb0:	61da      	str	r2, [r3, #28]
      break;
 800adb2:	e002      	b.n	800adba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	75fb      	strb	r3, [r7, #23]
      break;
 800adb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800adc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3718      	adds	r7, #24
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a40      	ldr	r2, [pc, #256]	; (800af30 <TIM_Base_SetConfig+0x114>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d013      	beq.n	800ae5c <TIM_Base_SetConfig+0x40>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae3a:	d00f      	beq.n	800ae5c <TIM_Base_SetConfig+0x40>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a3d      	ldr	r2, [pc, #244]	; (800af34 <TIM_Base_SetConfig+0x118>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d00b      	beq.n	800ae5c <TIM_Base_SetConfig+0x40>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a3c      	ldr	r2, [pc, #240]	; (800af38 <TIM_Base_SetConfig+0x11c>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d007      	beq.n	800ae5c <TIM_Base_SetConfig+0x40>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a3b      	ldr	r2, [pc, #236]	; (800af3c <TIM_Base_SetConfig+0x120>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d003      	beq.n	800ae5c <TIM_Base_SetConfig+0x40>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a3a      	ldr	r2, [pc, #232]	; (800af40 <TIM_Base_SetConfig+0x124>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d108      	bne.n	800ae6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a2f      	ldr	r2, [pc, #188]	; (800af30 <TIM_Base_SetConfig+0x114>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d02b      	beq.n	800aece <TIM_Base_SetConfig+0xb2>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae7c:	d027      	beq.n	800aece <TIM_Base_SetConfig+0xb2>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a2c      	ldr	r2, [pc, #176]	; (800af34 <TIM_Base_SetConfig+0x118>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d023      	beq.n	800aece <TIM_Base_SetConfig+0xb2>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a2b      	ldr	r2, [pc, #172]	; (800af38 <TIM_Base_SetConfig+0x11c>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d01f      	beq.n	800aece <TIM_Base_SetConfig+0xb2>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a2a      	ldr	r2, [pc, #168]	; (800af3c <TIM_Base_SetConfig+0x120>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d01b      	beq.n	800aece <TIM_Base_SetConfig+0xb2>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a29      	ldr	r2, [pc, #164]	; (800af40 <TIM_Base_SetConfig+0x124>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d017      	beq.n	800aece <TIM_Base_SetConfig+0xb2>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a28      	ldr	r2, [pc, #160]	; (800af44 <TIM_Base_SetConfig+0x128>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d013      	beq.n	800aece <TIM_Base_SetConfig+0xb2>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a27      	ldr	r2, [pc, #156]	; (800af48 <TIM_Base_SetConfig+0x12c>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d00f      	beq.n	800aece <TIM_Base_SetConfig+0xb2>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a26      	ldr	r2, [pc, #152]	; (800af4c <TIM_Base_SetConfig+0x130>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d00b      	beq.n	800aece <TIM_Base_SetConfig+0xb2>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a25      	ldr	r2, [pc, #148]	; (800af50 <TIM_Base_SetConfig+0x134>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d007      	beq.n	800aece <TIM_Base_SetConfig+0xb2>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a24      	ldr	r2, [pc, #144]	; (800af54 <TIM_Base_SetConfig+0x138>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d003      	beq.n	800aece <TIM_Base_SetConfig+0xb2>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a23      	ldr	r2, [pc, #140]	; (800af58 <TIM_Base_SetConfig+0x13c>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d108      	bne.n	800aee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	4313      	orrs	r3, r2
 800aede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	695b      	ldr	r3, [r3, #20]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	689a      	ldr	r2, [r3, #8]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a0a      	ldr	r2, [pc, #40]	; (800af30 <TIM_Base_SetConfig+0x114>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d003      	beq.n	800af14 <TIM_Base_SetConfig+0xf8>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a0c      	ldr	r2, [pc, #48]	; (800af40 <TIM_Base_SetConfig+0x124>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d103      	bne.n	800af1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	691a      	ldr	r2, [r3, #16]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	615a      	str	r2, [r3, #20]
}
 800af22:	bf00      	nop
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	40010000 	.word	0x40010000
 800af34:	40000400 	.word	0x40000400
 800af38:	40000800 	.word	0x40000800
 800af3c:	40000c00 	.word	0x40000c00
 800af40:	40010400 	.word	0x40010400
 800af44:	40014000 	.word	0x40014000
 800af48:	40014400 	.word	0x40014400
 800af4c:	40014800 	.word	0x40014800
 800af50:	40001800 	.word	0x40001800
 800af54:	40001c00 	.word	0x40001c00
 800af58:	40002000 	.word	0x40002000

0800af5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b087      	sub	sp, #28
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	f023 0201 	bic.w	r2, r3, #1
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f023 0303 	bic.w	r3, r3, #3
 800af92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f023 0302 	bic.w	r3, r3, #2
 800afa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	697a      	ldr	r2, [r7, #20]
 800afac:	4313      	orrs	r3, r2
 800afae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a20      	ldr	r2, [pc, #128]	; (800b034 <TIM_OC1_SetConfig+0xd8>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d003      	beq.n	800afc0 <TIM_OC1_SetConfig+0x64>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a1f      	ldr	r2, [pc, #124]	; (800b038 <TIM_OC1_SetConfig+0xdc>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d10c      	bne.n	800afda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	f023 0308 	bic.w	r3, r3, #8
 800afc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	4313      	orrs	r3, r2
 800afd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	f023 0304 	bic.w	r3, r3, #4
 800afd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a15      	ldr	r2, [pc, #84]	; (800b034 <TIM_OC1_SetConfig+0xd8>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d003      	beq.n	800afea <TIM_OC1_SetConfig+0x8e>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a14      	ldr	r2, [pc, #80]	; (800b038 <TIM_OC1_SetConfig+0xdc>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d111      	bne.n	800b00e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	4313      	orrs	r3, r2
 800b002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	685a      	ldr	r2, [r3, #4]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	621a      	str	r2, [r3, #32]
}
 800b028:	bf00      	nop
 800b02a:	371c      	adds	r7, #28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr
 800b034:	40010000 	.word	0x40010000
 800b038:	40010400 	.word	0x40010400

0800b03c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b087      	sub	sp, #28
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a1b      	ldr	r3, [r3, #32]
 800b04a:	f023 0210 	bic.w	r2, r3, #16
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a1b      	ldr	r3, [r3, #32]
 800b056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	699b      	ldr	r3, [r3, #24]
 800b062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	021b      	lsls	r3, r3, #8
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	f023 0320 	bic.w	r3, r3, #32
 800b086:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	011b      	lsls	r3, r3, #4
 800b08e:	697a      	ldr	r2, [r7, #20]
 800b090:	4313      	orrs	r3, r2
 800b092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a22      	ldr	r2, [pc, #136]	; (800b120 <TIM_OC2_SetConfig+0xe4>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d003      	beq.n	800b0a4 <TIM_OC2_SetConfig+0x68>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a21      	ldr	r2, [pc, #132]	; (800b124 <TIM_OC2_SetConfig+0xe8>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d10d      	bne.n	800b0c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	011b      	lsls	r3, r3, #4
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a17      	ldr	r2, [pc, #92]	; (800b120 <TIM_OC2_SetConfig+0xe4>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d003      	beq.n	800b0d0 <TIM_OC2_SetConfig+0x94>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a16      	ldr	r2, [pc, #88]	; (800b124 <TIM_OC2_SetConfig+0xe8>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d113      	bne.n	800b0f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	695b      	ldr	r3, [r3, #20]
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	699b      	ldr	r3, [r3, #24]
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	685a      	ldr	r2, [r3, #4]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	697a      	ldr	r2, [r7, #20]
 800b110:	621a      	str	r2, [r3, #32]
}
 800b112:	bf00      	nop
 800b114:	371c      	adds	r7, #28
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	40010000 	.word	0x40010000
 800b124:	40010400 	.word	0x40010400

0800b128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b128:	b480      	push	{r7}
 800b12a:	b087      	sub	sp, #28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a1b      	ldr	r3, [r3, #32]
 800b136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a1b      	ldr	r3, [r3, #32]
 800b142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	69db      	ldr	r3, [r3, #28]
 800b14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f023 0303 	bic.w	r3, r3, #3
 800b15e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	4313      	orrs	r3, r2
 800b168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	021b      	lsls	r3, r3, #8
 800b178:	697a      	ldr	r2, [r7, #20]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a21      	ldr	r2, [pc, #132]	; (800b208 <TIM_OC3_SetConfig+0xe0>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d003      	beq.n	800b18e <TIM_OC3_SetConfig+0x66>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a20      	ldr	r2, [pc, #128]	; (800b20c <TIM_OC3_SetConfig+0xe4>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d10d      	bne.n	800b1aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b194:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	021b      	lsls	r3, r3, #8
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a16      	ldr	r2, [pc, #88]	; (800b208 <TIM_OC3_SetConfig+0xe0>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d003      	beq.n	800b1ba <TIM_OC3_SetConfig+0x92>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a15      	ldr	r2, [pc, #84]	; (800b20c <TIM_OC3_SetConfig+0xe4>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d113      	bne.n	800b1e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	695b      	ldr	r3, [r3, #20]
 800b1ce:	011b      	lsls	r3, r3, #4
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	011b      	lsls	r3, r3, #4
 800b1dc:	693a      	ldr	r2, [r7, #16]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	693a      	ldr	r2, [r7, #16]
 800b1e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	685a      	ldr	r2, [r3, #4]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	697a      	ldr	r2, [r7, #20]
 800b1fa:	621a      	str	r2, [r3, #32]
}
 800b1fc:	bf00      	nop
 800b1fe:	371c      	adds	r7, #28
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr
 800b208:	40010000 	.word	0x40010000
 800b20c:	40010400 	.word	0x40010400

0800b210 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b210:	b480      	push	{r7}
 800b212:	b087      	sub	sp, #28
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a1b      	ldr	r3, [r3, #32]
 800b21e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b23e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	021b      	lsls	r3, r3, #8
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	4313      	orrs	r3, r2
 800b252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b25a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	031b      	lsls	r3, r3, #12
 800b262:	693a      	ldr	r2, [r7, #16]
 800b264:	4313      	orrs	r3, r2
 800b266:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a12      	ldr	r2, [pc, #72]	; (800b2b4 <TIM_OC4_SetConfig+0xa4>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d003      	beq.n	800b278 <TIM_OC4_SetConfig+0x68>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a11      	ldr	r2, [pc, #68]	; (800b2b8 <TIM_OC4_SetConfig+0xa8>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d109      	bne.n	800b28c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b27e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	019b      	lsls	r3, r3, #6
 800b286:	697a      	ldr	r2, [r7, #20]
 800b288:	4313      	orrs	r3, r2
 800b28a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	697a      	ldr	r2, [r7, #20]
 800b290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	693a      	ldr	r2, [r7, #16]
 800b2a4:	621a      	str	r2, [r3, #32]
}
 800b2a6:	bf00      	nop
 800b2a8:	371c      	adds	r7, #28
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	40010000 	.word	0x40010000
 800b2b8:	40010400 	.word	0x40010400

0800b2bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b087      	sub	sp, #28
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	f003 031f 	and.w	r3, r3, #31
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6a1a      	ldr	r2, [r3, #32]
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	43db      	mvns	r3, r3
 800b2de:	401a      	ands	r2, r3
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6a1a      	ldr	r2, [r3, #32]
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	f003 031f 	and.w	r3, r3, #31
 800b2ee:	6879      	ldr	r1, [r7, #4]
 800b2f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2f4:	431a      	orrs	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	621a      	str	r2, [r3, #32]
}
 800b2fa:	bf00      	nop
 800b2fc:	371c      	adds	r7, #28
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
	...

0800b308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d101      	bne.n	800b320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b31c:	2302      	movs	r3, #2
 800b31e:	e05a      	b.n	800b3d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2202      	movs	r2, #2
 800b32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	4313      	orrs	r3, r2
 800b350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a21      	ldr	r2, [pc, #132]	; (800b3e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d022      	beq.n	800b3aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b36c:	d01d      	beq.n	800b3aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a1d      	ldr	r2, [pc, #116]	; (800b3e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d018      	beq.n	800b3aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a1b      	ldr	r2, [pc, #108]	; (800b3ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d013      	beq.n	800b3aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a1a      	ldr	r2, [pc, #104]	; (800b3f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d00e      	beq.n	800b3aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a18      	ldr	r2, [pc, #96]	; (800b3f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d009      	beq.n	800b3aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a17      	ldr	r2, [pc, #92]	; (800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d004      	beq.n	800b3aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a15      	ldr	r2, [pc, #84]	; (800b3fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d10c      	bne.n	800b3c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	68ba      	ldr	r2, [r7, #8]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	40010000 	.word	0x40010000
 800b3e8:	40000400 	.word	0x40000400
 800b3ec:	40000800 	.word	0x40000800
 800b3f0:	40000c00 	.word	0x40000c00
 800b3f4:	40010400 	.word	0x40010400
 800b3f8:	40014000 	.word	0x40014000
 800b3fc:	40001800 	.word	0x40001800

0800b400 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b40a:	2300      	movs	r3, #0
 800b40c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b414:	2b01      	cmp	r3, #1
 800b416:	d101      	bne.n	800b41c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b418:	2302      	movs	r3, #2
 800b41a:	e03d      	b.n	800b498 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	4313      	orrs	r3, r2
 800b430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4313      	orrs	r3, r2
 800b45a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	4313      	orrs	r3, r2
 800b468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	695b      	ldr	r3, [r3, #20]
 800b474:	4313      	orrs	r3, r2
 800b476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	69db      	ldr	r3, [r3, #28]
 800b482:	4313      	orrs	r3, r2
 800b484:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <__errno>:
 800b4cc:	4b01      	ldr	r3, [pc, #4]	; (800b4d4 <__errno+0x8>)
 800b4ce:	6818      	ldr	r0, [r3, #0]
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	200000ac 	.word	0x200000ac

0800b4d8 <__libc_init_array>:
 800b4d8:	b570      	push	{r4, r5, r6, lr}
 800b4da:	4d0d      	ldr	r5, [pc, #52]	; (800b510 <__libc_init_array+0x38>)
 800b4dc:	4c0d      	ldr	r4, [pc, #52]	; (800b514 <__libc_init_array+0x3c>)
 800b4de:	1b64      	subs	r4, r4, r5
 800b4e0:	10a4      	asrs	r4, r4, #2
 800b4e2:	2600      	movs	r6, #0
 800b4e4:	42a6      	cmp	r6, r4
 800b4e6:	d109      	bne.n	800b4fc <__libc_init_array+0x24>
 800b4e8:	4d0b      	ldr	r5, [pc, #44]	; (800b518 <__libc_init_array+0x40>)
 800b4ea:	4c0c      	ldr	r4, [pc, #48]	; (800b51c <__libc_init_array+0x44>)
 800b4ec:	f003 fa16 	bl	800e91c <_init>
 800b4f0:	1b64      	subs	r4, r4, r5
 800b4f2:	10a4      	asrs	r4, r4, #2
 800b4f4:	2600      	movs	r6, #0
 800b4f6:	42a6      	cmp	r6, r4
 800b4f8:	d105      	bne.n	800b506 <__libc_init_array+0x2e>
 800b4fa:	bd70      	pop	{r4, r5, r6, pc}
 800b4fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b500:	4798      	blx	r3
 800b502:	3601      	adds	r6, #1
 800b504:	e7ee      	b.n	800b4e4 <__libc_init_array+0xc>
 800b506:	f855 3b04 	ldr.w	r3, [r5], #4
 800b50a:	4798      	blx	r3
 800b50c:	3601      	adds	r6, #1
 800b50e:	e7f2      	b.n	800b4f6 <__libc_init_array+0x1e>
 800b510:	0800f560 	.word	0x0800f560
 800b514:	0800f560 	.word	0x0800f560
 800b518:	0800f560 	.word	0x0800f560
 800b51c:	0800f564 	.word	0x0800f564

0800b520 <memset>:
 800b520:	4402      	add	r2, r0
 800b522:	4603      	mov	r3, r0
 800b524:	4293      	cmp	r3, r2
 800b526:	d100      	bne.n	800b52a <memset+0xa>
 800b528:	4770      	bx	lr
 800b52a:	f803 1b01 	strb.w	r1, [r3], #1
 800b52e:	e7f9      	b.n	800b524 <memset+0x4>

0800b530 <__cvt>:
 800b530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b534:	ec55 4b10 	vmov	r4, r5, d0
 800b538:	2d00      	cmp	r5, #0
 800b53a:	460e      	mov	r6, r1
 800b53c:	4619      	mov	r1, r3
 800b53e:	462b      	mov	r3, r5
 800b540:	bfbb      	ittet	lt
 800b542:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b546:	461d      	movlt	r5, r3
 800b548:	2300      	movge	r3, #0
 800b54a:	232d      	movlt	r3, #45	; 0x2d
 800b54c:	700b      	strb	r3, [r1, #0]
 800b54e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b550:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b554:	4691      	mov	r9, r2
 800b556:	f023 0820 	bic.w	r8, r3, #32
 800b55a:	bfbc      	itt	lt
 800b55c:	4622      	movlt	r2, r4
 800b55e:	4614      	movlt	r4, r2
 800b560:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b564:	d005      	beq.n	800b572 <__cvt+0x42>
 800b566:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b56a:	d100      	bne.n	800b56e <__cvt+0x3e>
 800b56c:	3601      	adds	r6, #1
 800b56e:	2102      	movs	r1, #2
 800b570:	e000      	b.n	800b574 <__cvt+0x44>
 800b572:	2103      	movs	r1, #3
 800b574:	ab03      	add	r3, sp, #12
 800b576:	9301      	str	r3, [sp, #4]
 800b578:	ab02      	add	r3, sp, #8
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	ec45 4b10 	vmov	d0, r4, r5
 800b580:	4653      	mov	r3, sl
 800b582:	4632      	mov	r2, r6
 800b584:	f000 fcec 	bl	800bf60 <_dtoa_r>
 800b588:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b58c:	4607      	mov	r7, r0
 800b58e:	d102      	bne.n	800b596 <__cvt+0x66>
 800b590:	f019 0f01 	tst.w	r9, #1
 800b594:	d022      	beq.n	800b5dc <__cvt+0xac>
 800b596:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b59a:	eb07 0906 	add.w	r9, r7, r6
 800b59e:	d110      	bne.n	800b5c2 <__cvt+0x92>
 800b5a0:	783b      	ldrb	r3, [r7, #0]
 800b5a2:	2b30      	cmp	r3, #48	; 0x30
 800b5a4:	d10a      	bne.n	800b5bc <__cvt+0x8c>
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	f7f5 faab 	bl	8000b08 <__aeabi_dcmpeq>
 800b5b2:	b918      	cbnz	r0, 800b5bc <__cvt+0x8c>
 800b5b4:	f1c6 0601 	rsb	r6, r6, #1
 800b5b8:	f8ca 6000 	str.w	r6, [sl]
 800b5bc:	f8da 3000 	ldr.w	r3, [sl]
 800b5c0:	4499      	add	r9, r3
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	f7f5 fa9d 	bl	8000b08 <__aeabi_dcmpeq>
 800b5ce:	b108      	cbz	r0, 800b5d4 <__cvt+0xa4>
 800b5d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b5d4:	2230      	movs	r2, #48	; 0x30
 800b5d6:	9b03      	ldr	r3, [sp, #12]
 800b5d8:	454b      	cmp	r3, r9
 800b5da:	d307      	bcc.n	800b5ec <__cvt+0xbc>
 800b5dc:	9b03      	ldr	r3, [sp, #12]
 800b5de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5e0:	1bdb      	subs	r3, r3, r7
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	6013      	str	r3, [r2, #0]
 800b5e6:	b004      	add	sp, #16
 800b5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ec:	1c59      	adds	r1, r3, #1
 800b5ee:	9103      	str	r1, [sp, #12]
 800b5f0:	701a      	strb	r2, [r3, #0]
 800b5f2:	e7f0      	b.n	800b5d6 <__cvt+0xa6>

0800b5f4 <__exponent>:
 800b5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2900      	cmp	r1, #0
 800b5fa:	bfb8      	it	lt
 800b5fc:	4249      	neglt	r1, r1
 800b5fe:	f803 2b02 	strb.w	r2, [r3], #2
 800b602:	bfb4      	ite	lt
 800b604:	222d      	movlt	r2, #45	; 0x2d
 800b606:	222b      	movge	r2, #43	; 0x2b
 800b608:	2909      	cmp	r1, #9
 800b60a:	7042      	strb	r2, [r0, #1]
 800b60c:	dd2a      	ble.n	800b664 <__exponent+0x70>
 800b60e:	f10d 0407 	add.w	r4, sp, #7
 800b612:	46a4      	mov	ip, r4
 800b614:	270a      	movs	r7, #10
 800b616:	46a6      	mov	lr, r4
 800b618:	460a      	mov	r2, r1
 800b61a:	fb91 f6f7 	sdiv	r6, r1, r7
 800b61e:	fb07 1516 	mls	r5, r7, r6, r1
 800b622:	3530      	adds	r5, #48	; 0x30
 800b624:	2a63      	cmp	r2, #99	; 0x63
 800b626:	f104 34ff 	add.w	r4, r4, #4294967295
 800b62a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b62e:	4631      	mov	r1, r6
 800b630:	dcf1      	bgt.n	800b616 <__exponent+0x22>
 800b632:	3130      	adds	r1, #48	; 0x30
 800b634:	f1ae 0502 	sub.w	r5, lr, #2
 800b638:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b63c:	1c44      	adds	r4, r0, #1
 800b63e:	4629      	mov	r1, r5
 800b640:	4561      	cmp	r1, ip
 800b642:	d30a      	bcc.n	800b65a <__exponent+0x66>
 800b644:	f10d 0209 	add.w	r2, sp, #9
 800b648:	eba2 020e 	sub.w	r2, r2, lr
 800b64c:	4565      	cmp	r5, ip
 800b64e:	bf88      	it	hi
 800b650:	2200      	movhi	r2, #0
 800b652:	4413      	add	r3, r2
 800b654:	1a18      	subs	r0, r3, r0
 800b656:	b003      	add	sp, #12
 800b658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b65e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b662:	e7ed      	b.n	800b640 <__exponent+0x4c>
 800b664:	2330      	movs	r3, #48	; 0x30
 800b666:	3130      	adds	r1, #48	; 0x30
 800b668:	7083      	strb	r3, [r0, #2]
 800b66a:	70c1      	strb	r1, [r0, #3]
 800b66c:	1d03      	adds	r3, r0, #4
 800b66e:	e7f1      	b.n	800b654 <__exponent+0x60>

0800b670 <_printf_float>:
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	ed2d 8b02 	vpush	{d8}
 800b678:	b08d      	sub	sp, #52	; 0x34
 800b67a:	460c      	mov	r4, r1
 800b67c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b680:	4616      	mov	r6, r2
 800b682:	461f      	mov	r7, r3
 800b684:	4605      	mov	r5, r0
 800b686:	f001 fa57 	bl	800cb38 <_localeconv_r>
 800b68a:	f8d0 a000 	ldr.w	sl, [r0]
 800b68e:	4650      	mov	r0, sl
 800b690:	f7f4 fdbe 	bl	8000210 <strlen>
 800b694:	2300      	movs	r3, #0
 800b696:	930a      	str	r3, [sp, #40]	; 0x28
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	9305      	str	r3, [sp, #20]
 800b69c:	f8d8 3000 	ldr.w	r3, [r8]
 800b6a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b6a4:	3307      	adds	r3, #7
 800b6a6:	f023 0307 	bic.w	r3, r3, #7
 800b6aa:	f103 0208 	add.w	r2, r3, #8
 800b6ae:	f8c8 2000 	str.w	r2, [r8]
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b6ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b6be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b6c2:	9307      	str	r3, [sp, #28]
 800b6c4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b6c8:	ee08 0a10 	vmov	s16, r0
 800b6cc:	4b9f      	ldr	r3, [pc, #636]	; (800b94c <_printf_float+0x2dc>)
 800b6ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d6:	f7f5 fa49 	bl	8000b6c <__aeabi_dcmpun>
 800b6da:	bb88      	cbnz	r0, 800b740 <_printf_float+0xd0>
 800b6dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6e0:	4b9a      	ldr	r3, [pc, #616]	; (800b94c <_printf_float+0x2dc>)
 800b6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e6:	f7f5 fa23 	bl	8000b30 <__aeabi_dcmple>
 800b6ea:	bb48      	cbnz	r0, 800b740 <_printf_float+0xd0>
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	4640      	mov	r0, r8
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	f7f5 fa12 	bl	8000b1c <__aeabi_dcmplt>
 800b6f8:	b110      	cbz	r0, 800b700 <_printf_float+0x90>
 800b6fa:	232d      	movs	r3, #45	; 0x2d
 800b6fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b700:	4b93      	ldr	r3, [pc, #588]	; (800b950 <_printf_float+0x2e0>)
 800b702:	4894      	ldr	r0, [pc, #592]	; (800b954 <_printf_float+0x2e4>)
 800b704:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b708:	bf94      	ite	ls
 800b70a:	4698      	movls	r8, r3
 800b70c:	4680      	movhi	r8, r0
 800b70e:	2303      	movs	r3, #3
 800b710:	6123      	str	r3, [r4, #16]
 800b712:	9b05      	ldr	r3, [sp, #20]
 800b714:	f023 0204 	bic.w	r2, r3, #4
 800b718:	6022      	str	r2, [r4, #0]
 800b71a:	f04f 0900 	mov.w	r9, #0
 800b71e:	9700      	str	r7, [sp, #0]
 800b720:	4633      	mov	r3, r6
 800b722:	aa0b      	add	r2, sp, #44	; 0x2c
 800b724:	4621      	mov	r1, r4
 800b726:	4628      	mov	r0, r5
 800b728:	f000 f9d8 	bl	800badc <_printf_common>
 800b72c:	3001      	adds	r0, #1
 800b72e:	f040 8090 	bne.w	800b852 <_printf_float+0x1e2>
 800b732:	f04f 30ff 	mov.w	r0, #4294967295
 800b736:	b00d      	add	sp, #52	; 0x34
 800b738:	ecbd 8b02 	vpop	{d8}
 800b73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b740:	4642      	mov	r2, r8
 800b742:	464b      	mov	r3, r9
 800b744:	4640      	mov	r0, r8
 800b746:	4649      	mov	r1, r9
 800b748:	f7f5 fa10 	bl	8000b6c <__aeabi_dcmpun>
 800b74c:	b140      	cbz	r0, 800b760 <_printf_float+0xf0>
 800b74e:	464b      	mov	r3, r9
 800b750:	2b00      	cmp	r3, #0
 800b752:	bfbc      	itt	lt
 800b754:	232d      	movlt	r3, #45	; 0x2d
 800b756:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b75a:	487f      	ldr	r0, [pc, #508]	; (800b958 <_printf_float+0x2e8>)
 800b75c:	4b7f      	ldr	r3, [pc, #508]	; (800b95c <_printf_float+0x2ec>)
 800b75e:	e7d1      	b.n	800b704 <_printf_float+0x94>
 800b760:	6863      	ldr	r3, [r4, #4]
 800b762:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b766:	9206      	str	r2, [sp, #24]
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	d13f      	bne.n	800b7ec <_printf_float+0x17c>
 800b76c:	2306      	movs	r3, #6
 800b76e:	6063      	str	r3, [r4, #4]
 800b770:	9b05      	ldr	r3, [sp, #20]
 800b772:	6861      	ldr	r1, [r4, #4]
 800b774:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b778:	2300      	movs	r3, #0
 800b77a:	9303      	str	r3, [sp, #12]
 800b77c:	ab0a      	add	r3, sp, #40	; 0x28
 800b77e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b782:	ab09      	add	r3, sp, #36	; 0x24
 800b784:	ec49 8b10 	vmov	d0, r8, r9
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	6022      	str	r2, [r4, #0]
 800b78c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b790:	4628      	mov	r0, r5
 800b792:	f7ff fecd 	bl	800b530 <__cvt>
 800b796:	9b06      	ldr	r3, [sp, #24]
 800b798:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b79a:	2b47      	cmp	r3, #71	; 0x47
 800b79c:	4680      	mov	r8, r0
 800b79e:	d108      	bne.n	800b7b2 <_printf_float+0x142>
 800b7a0:	1cc8      	adds	r0, r1, #3
 800b7a2:	db02      	blt.n	800b7aa <_printf_float+0x13a>
 800b7a4:	6863      	ldr	r3, [r4, #4]
 800b7a6:	4299      	cmp	r1, r3
 800b7a8:	dd41      	ble.n	800b82e <_printf_float+0x1be>
 800b7aa:	f1ab 0b02 	sub.w	fp, fp, #2
 800b7ae:	fa5f fb8b 	uxtb.w	fp, fp
 800b7b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b7b6:	d820      	bhi.n	800b7fa <_printf_float+0x18a>
 800b7b8:	3901      	subs	r1, #1
 800b7ba:	465a      	mov	r2, fp
 800b7bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b7c0:	9109      	str	r1, [sp, #36]	; 0x24
 800b7c2:	f7ff ff17 	bl	800b5f4 <__exponent>
 800b7c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7c8:	1813      	adds	r3, r2, r0
 800b7ca:	2a01      	cmp	r2, #1
 800b7cc:	4681      	mov	r9, r0
 800b7ce:	6123      	str	r3, [r4, #16]
 800b7d0:	dc02      	bgt.n	800b7d8 <_printf_float+0x168>
 800b7d2:	6822      	ldr	r2, [r4, #0]
 800b7d4:	07d2      	lsls	r2, r2, #31
 800b7d6:	d501      	bpl.n	800b7dc <_printf_float+0x16c>
 800b7d8:	3301      	adds	r3, #1
 800b7da:	6123      	str	r3, [r4, #16]
 800b7dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d09c      	beq.n	800b71e <_printf_float+0xae>
 800b7e4:	232d      	movs	r3, #45	; 0x2d
 800b7e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7ea:	e798      	b.n	800b71e <_printf_float+0xae>
 800b7ec:	9a06      	ldr	r2, [sp, #24]
 800b7ee:	2a47      	cmp	r2, #71	; 0x47
 800b7f0:	d1be      	bne.n	800b770 <_printf_float+0x100>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1bc      	bne.n	800b770 <_printf_float+0x100>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e7b9      	b.n	800b76e <_printf_float+0xfe>
 800b7fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b7fe:	d118      	bne.n	800b832 <_printf_float+0x1c2>
 800b800:	2900      	cmp	r1, #0
 800b802:	6863      	ldr	r3, [r4, #4]
 800b804:	dd0b      	ble.n	800b81e <_printf_float+0x1ae>
 800b806:	6121      	str	r1, [r4, #16]
 800b808:	b913      	cbnz	r3, 800b810 <_printf_float+0x1a0>
 800b80a:	6822      	ldr	r2, [r4, #0]
 800b80c:	07d0      	lsls	r0, r2, #31
 800b80e:	d502      	bpl.n	800b816 <_printf_float+0x1a6>
 800b810:	3301      	adds	r3, #1
 800b812:	440b      	add	r3, r1
 800b814:	6123      	str	r3, [r4, #16]
 800b816:	65a1      	str	r1, [r4, #88]	; 0x58
 800b818:	f04f 0900 	mov.w	r9, #0
 800b81c:	e7de      	b.n	800b7dc <_printf_float+0x16c>
 800b81e:	b913      	cbnz	r3, 800b826 <_printf_float+0x1b6>
 800b820:	6822      	ldr	r2, [r4, #0]
 800b822:	07d2      	lsls	r2, r2, #31
 800b824:	d501      	bpl.n	800b82a <_printf_float+0x1ba>
 800b826:	3302      	adds	r3, #2
 800b828:	e7f4      	b.n	800b814 <_printf_float+0x1a4>
 800b82a:	2301      	movs	r3, #1
 800b82c:	e7f2      	b.n	800b814 <_printf_float+0x1a4>
 800b82e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b834:	4299      	cmp	r1, r3
 800b836:	db05      	blt.n	800b844 <_printf_float+0x1d4>
 800b838:	6823      	ldr	r3, [r4, #0]
 800b83a:	6121      	str	r1, [r4, #16]
 800b83c:	07d8      	lsls	r0, r3, #31
 800b83e:	d5ea      	bpl.n	800b816 <_printf_float+0x1a6>
 800b840:	1c4b      	adds	r3, r1, #1
 800b842:	e7e7      	b.n	800b814 <_printf_float+0x1a4>
 800b844:	2900      	cmp	r1, #0
 800b846:	bfd4      	ite	le
 800b848:	f1c1 0202 	rsble	r2, r1, #2
 800b84c:	2201      	movgt	r2, #1
 800b84e:	4413      	add	r3, r2
 800b850:	e7e0      	b.n	800b814 <_printf_float+0x1a4>
 800b852:	6823      	ldr	r3, [r4, #0]
 800b854:	055a      	lsls	r2, r3, #21
 800b856:	d407      	bmi.n	800b868 <_printf_float+0x1f8>
 800b858:	6923      	ldr	r3, [r4, #16]
 800b85a:	4642      	mov	r2, r8
 800b85c:	4631      	mov	r1, r6
 800b85e:	4628      	mov	r0, r5
 800b860:	47b8      	blx	r7
 800b862:	3001      	adds	r0, #1
 800b864:	d12c      	bne.n	800b8c0 <_printf_float+0x250>
 800b866:	e764      	b.n	800b732 <_printf_float+0xc2>
 800b868:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b86c:	f240 80e0 	bls.w	800ba30 <_printf_float+0x3c0>
 800b870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b874:	2200      	movs	r2, #0
 800b876:	2300      	movs	r3, #0
 800b878:	f7f5 f946 	bl	8000b08 <__aeabi_dcmpeq>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	d034      	beq.n	800b8ea <_printf_float+0x27a>
 800b880:	4a37      	ldr	r2, [pc, #220]	; (800b960 <_printf_float+0x2f0>)
 800b882:	2301      	movs	r3, #1
 800b884:	4631      	mov	r1, r6
 800b886:	4628      	mov	r0, r5
 800b888:	47b8      	blx	r7
 800b88a:	3001      	adds	r0, #1
 800b88c:	f43f af51 	beq.w	800b732 <_printf_float+0xc2>
 800b890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b894:	429a      	cmp	r2, r3
 800b896:	db02      	blt.n	800b89e <_printf_float+0x22e>
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	07d8      	lsls	r0, r3, #31
 800b89c:	d510      	bpl.n	800b8c0 <_printf_float+0x250>
 800b89e:	ee18 3a10 	vmov	r3, s16
 800b8a2:	4652      	mov	r2, sl
 800b8a4:	4631      	mov	r1, r6
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	47b8      	blx	r7
 800b8aa:	3001      	adds	r0, #1
 800b8ac:	f43f af41 	beq.w	800b732 <_printf_float+0xc2>
 800b8b0:	f04f 0800 	mov.w	r8, #0
 800b8b4:	f104 091a 	add.w	r9, r4, #26
 800b8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	4543      	cmp	r3, r8
 800b8be:	dc09      	bgt.n	800b8d4 <_printf_float+0x264>
 800b8c0:	6823      	ldr	r3, [r4, #0]
 800b8c2:	079b      	lsls	r3, r3, #30
 800b8c4:	f100 8105 	bmi.w	800bad2 <_printf_float+0x462>
 800b8c8:	68e0      	ldr	r0, [r4, #12]
 800b8ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8cc:	4298      	cmp	r0, r3
 800b8ce:	bfb8      	it	lt
 800b8d0:	4618      	movlt	r0, r3
 800b8d2:	e730      	b.n	800b736 <_printf_float+0xc6>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	464a      	mov	r2, r9
 800b8d8:	4631      	mov	r1, r6
 800b8da:	4628      	mov	r0, r5
 800b8dc:	47b8      	blx	r7
 800b8de:	3001      	adds	r0, #1
 800b8e0:	f43f af27 	beq.w	800b732 <_printf_float+0xc2>
 800b8e4:	f108 0801 	add.w	r8, r8, #1
 800b8e8:	e7e6      	b.n	800b8b8 <_printf_float+0x248>
 800b8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	dc39      	bgt.n	800b964 <_printf_float+0x2f4>
 800b8f0:	4a1b      	ldr	r2, [pc, #108]	; (800b960 <_printf_float+0x2f0>)
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	4631      	mov	r1, r6
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	47b8      	blx	r7
 800b8fa:	3001      	adds	r0, #1
 800b8fc:	f43f af19 	beq.w	800b732 <_printf_float+0xc2>
 800b900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b904:	4313      	orrs	r3, r2
 800b906:	d102      	bne.n	800b90e <_printf_float+0x29e>
 800b908:	6823      	ldr	r3, [r4, #0]
 800b90a:	07d9      	lsls	r1, r3, #31
 800b90c:	d5d8      	bpl.n	800b8c0 <_printf_float+0x250>
 800b90e:	ee18 3a10 	vmov	r3, s16
 800b912:	4652      	mov	r2, sl
 800b914:	4631      	mov	r1, r6
 800b916:	4628      	mov	r0, r5
 800b918:	47b8      	blx	r7
 800b91a:	3001      	adds	r0, #1
 800b91c:	f43f af09 	beq.w	800b732 <_printf_float+0xc2>
 800b920:	f04f 0900 	mov.w	r9, #0
 800b924:	f104 0a1a 	add.w	sl, r4, #26
 800b928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b92a:	425b      	negs	r3, r3
 800b92c:	454b      	cmp	r3, r9
 800b92e:	dc01      	bgt.n	800b934 <_printf_float+0x2c4>
 800b930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b932:	e792      	b.n	800b85a <_printf_float+0x1ea>
 800b934:	2301      	movs	r3, #1
 800b936:	4652      	mov	r2, sl
 800b938:	4631      	mov	r1, r6
 800b93a:	4628      	mov	r0, r5
 800b93c:	47b8      	blx	r7
 800b93e:	3001      	adds	r0, #1
 800b940:	f43f aef7 	beq.w	800b732 <_printf_float+0xc2>
 800b944:	f109 0901 	add.w	r9, r9, #1
 800b948:	e7ee      	b.n	800b928 <_printf_float+0x2b8>
 800b94a:	bf00      	nop
 800b94c:	7fefffff 	.word	0x7fefffff
 800b950:	0800f104 	.word	0x0800f104
 800b954:	0800f108 	.word	0x0800f108
 800b958:	0800f110 	.word	0x0800f110
 800b95c:	0800f10c 	.word	0x0800f10c
 800b960:	0800f114 	.word	0x0800f114
 800b964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b968:	429a      	cmp	r2, r3
 800b96a:	bfa8      	it	ge
 800b96c:	461a      	movge	r2, r3
 800b96e:	2a00      	cmp	r2, #0
 800b970:	4691      	mov	r9, r2
 800b972:	dc37      	bgt.n	800b9e4 <_printf_float+0x374>
 800b974:	f04f 0b00 	mov.w	fp, #0
 800b978:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b97c:	f104 021a 	add.w	r2, r4, #26
 800b980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b982:	9305      	str	r3, [sp, #20]
 800b984:	eba3 0309 	sub.w	r3, r3, r9
 800b988:	455b      	cmp	r3, fp
 800b98a:	dc33      	bgt.n	800b9f4 <_printf_float+0x384>
 800b98c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b990:	429a      	cmp	r2, r3
 800b992:	db3b      	blt.n	800ba0c <_printf_float+0x39c>
 800b994:	6823      	ldr	r3, [r4, #0]
 800b996:	07da      	lsls	r2, r3, #31
 800b998:	d438      	bmi.n	800ba0c <_printf_float+0x39c>
 800b99a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b99c:	9b05      	ldr	r3, [sp, #20]
 800b99e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	eba2 0901 	sub.w	r9, r2, r1
 800b9a6:	4599      	cmp	r9, r3
 800b9a8:	bfa8      	it	ge
 800b9aa:	4699      	movge	r9, r3
 800b9ac:	f1b9 0f00 	cmp.w	r9, #0
 800b9b0:	dc35      	bgt.n	800ba1e <_printf_float+0x3ae>
 800b9b2:	f04f 0800 	mov.w	r8, #0
 800b9b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9ba:	f104 0a1a 	add.w	sl, r4, #26
 800b9be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9c2:	1a9b      	subs	r3, r3, r2
 800b9c4:	eba3 0309 	sub.w	r3, r3, r9
 800b9c8:	4543      	cmp	r3, r8
 800b9ca:	f77f af79 	ble.w	800b8c0 <_printf_float+0x250>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	4652      	mov	r2, sl
 800b9d2:	4631      	mov	r1, r6
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	47b8      	blx	r7
 800b9d8:	3001      	adds	r0, #1
 800b9da:	f43f aeaa 	beq.w	800b732 <_printf_float+0xc2>
 800b9de:	f108 0801 	add.w	r8, r8, #1
 800b9e2:	e7ec      	b.n	800b9be <_printf_float+0x34e>
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	4631      	mov	r1, r6
 800b9e8:	4642      	mov	r2, r8
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	47b8      	blx	r7
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	d1c0      	bne.n	800b974 <_printf_float+0x304>
 800b9f2:	e69e      	b.n	800b732 <_printf_float+0xc2>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	4631      	mov	r1, r6
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	9205      	str	r2, [sp, #20]
 800b9fc:	47b8      	blx	r7
 800b9fe:	3001      	adds	r0, #1
 800ba00:	f43f ae97 	beq.w	800b732 <_printf_float+0xc2>
 800ba04:	9a05      	ldr	r2, [sp, #20]
 800ba06:	f10b 0b01 	add.w	fp, fp, #1
 800ba0a:	e7b9      	b.n	800b980 <_printf_float+0x310>
 800ba0c:	ee18 3a10 	vmov	r3, s16
 800ba10:	4652      	mov	r2, sl
 800ba12:	4631      	mov	r1, r6
 800ba14:	4628      	mov	r0, r5
 800ba16:	47b8      	blx	r7
 800ba18:	3001      	adds	r0, #1
 800ba1a:	d1be      	bne.n	800b99a <_printf_float+0x32a>
 800ba1c:	e689      	b.n	800b732 <_printf_float+0xc2>
 800ba1e:	9a05      	ldr	r2, [sp, #20]
 800ba20:	464b      	mov	r3, r9
 800ba22:	4442      	add	r2, r8
 800ba24:	4631      	mov	r1, r6
 800ba26:	4628      	mov	r0, r5
 800ba28:	47b8      	blx	r7
 800ba2a:	3001      	adds	r0, #1
 800ba2c:	d1c1      	bne.n	800b9b2 <_printf_float+0x342>
 800ba2e:	e680      	b.n	800b732 <_printf_float+0xc2>
 800ba30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba32:	2a01      	cmp	r2, #1
 800ba34:	dc01      	bgt.n	800ba3a <_printf_float+0x3ca>
 800ba36:	07db      	lsls	r3, r3, #31
 800ba38:	d538      	bpl.n	800baac <_printf_float+0x43c>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	4642      	mov	r2, r8
 800ba3e:	4631      	mov	r1, r6
 800ba40:	4628      	mov	r0, r5
 800ba42:	47b8      	blx	r7
 800ba44:	3001      	adds	r0, #1
 800ba46:	f43f ae74 	beq.w	800b732 <_printf_float+0xc2>
 800ba4a:	ee18 3a10 	vmov	r3, s16
 800ba4e:	4652      	mov	r2, sl
 800ba50:	4631      	mov	r1, r6
 800ba52:	4628      	mov	r0, r5
 800ba54:	47b8      	blx	r7
 800ba56:	3001      	adds	r0, #1
 800ba58:	f43f ae6b 	beq.w	800b732 <_printf_float+0xc2>
 800ba5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba60:	2200      	movs	r2, #0
 800ba62:	2300      	movs	r3, #0
 800ba64:	f7f5 f850 	bl	8000b08 <__aeabi_dcmpeq>
 800ba68:	b9d8      	cbnz	r0, 800baa2 <_printf_float+0x432>
 800ba6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba6c:	f108 0201 	add.w	r2, r8, #1
 800ba70:	3b01      	subs	r3, #1
 800ba72:	4631      	mov	r1, r6
 800ba74:	4628      	mov	r0, r5
 800ba76:	47b8      	blx	r7
 800ba78:	3001      	adds	r0, #1
 800ba7a:	d10e      	bne.n	800ba9a <_printf_float+0x42a>
 800ba7c:	e659      	b.n	800b732 <_printf_float+0xc2>
 800ba7e:	2301      	movs	r3, #1
 800ba80:	4652      	mov	r2, sl
 800ba82:	4631      	mov	r1, r6
 800ba84:	4628      	mov	r0, r5
 800ba86:	47b8      	blx	r7
 800ba88:	3001      	adds	r0, #1
 800ba8a:	f43f ae52 	beq.w	800b732 <_printf_float+0xc2>
 800ba8e:	f108 0801 	add.w	r8, r8, #1
 800ba92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba94:	3b01      	subs	r3, #1
 800ba96:	4543      	cmp	r3, r8
 800ba98:	dcf1      	bgt.n	800ba7e <_printf_float+0x40e>
 800ba9a:	464b      	mov	r3, r9
 800ba9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800baa0:	e6dc      	b.n	800b85c <_printf_float+0x1ec>
 800baa2:	f04f 0800 	mov.w	r8, #0
 800baa6:	f104 0a1a 	add.w	sl, r4, #26
 800baaa:	e7f2      	b.n	800ba92 <_printf_float+0x422>
 800baac:	2301      	movs	r3, #1
 800baae:	4642      	mov	r2, r8
 800bab0:	e7df      	b.n	800ba72 <_printf_float+0x402>
 800bab2:	2301      	movs	r3, #1
 800bab4:	464a      	mov	r2, r9
 800bab6:	4631      	mov	r1, r6
 800bab8:	4628      	mov	r0, r5
 800baba:	47b8      	blx	r7
 800babc:	3001      	adds	r0, #1
 800babe:	f43f ae38 	beq.w	800b732 <_printf_float+0xc2>
 800bac2:	f108 0801 	add.w	r8, r8, #1
 800bac6:	68e3      	ldr	r3, [r4, #12]
 800bac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800baca:	1a5b      	subs	r3, r3, r1
 800bacc:	4543      	cmp	r3, r8
 800bace:	dcf0      	bgt.n	800bab2 <_printf_float+0x442>
 800bad0:	e6fa      	b.n	800b8c8 <_printf_float+0x258>
 800bad2:	f04f 0800 	mov.w	r8, #0
 800bad6:	f104 0919 	add.w	r9, r4, #25
 800bada:	e7f4      	b.n	800bac6 <_printf_float+0x456>

0800badc <_printf_common>:
 800badc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae0:	4616      	mov	r6, r2
 800bae2:	4699      	mov	r9, r3
 800bae4:	688a      	ldr	r2, [r1, #8]
 800bae6:	690b      	ldr	r3, [r1, #16]
 800bae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800baec:	4293      	cmp	r3, r2
 800baee:	bfb8      	it	lt
 800baf0:	4613      	movlt	r3, r2
 800baf2:	6033      	str	r3, [r6, #0]
 800baf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baf8:	4607      	mov	r7, r0
 800bafa:	460c      	mov	r4, r1
 800bafc:	b10a      	cbz	r2, 800bb02 <_printf_common+0x26>
 800bafe:	3301      	adds	r3, #1
 800bb00:	6033      	str	r3, [r6, #0]
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	0699      	lsls	r1, r3, #26
 800bb06:	bf42      	ittt	mi
 800bb08:	6833      	ldrmi	r3, [r6, #0]
 800bb0a:	3302      	addmi	r3, #2
 800bb0c:	6033      	strmi	r3, [r6, #0]
 800bb0e:	6825      	ldr	r5, [r4, #0]
 800bb10:	f015 0506 	ands.w	r5, r5, #6
 800bb14:	d106      	bne.n	800bb24 <_printf_common+0x48>
 800bb16:	f104 0a19 	add.w	sl, r4, #25
 800bb1a:	68e3      	ldr	r3, [r4, #12]
 800bb1c:	6832      	ldr	r2, [r6, #0]
 800bb1e:	1a9b      	subs	r3, r3, r2
 800bb20:	42ab      	cmp	r3, r5
 800bb22:	dc26      	bgt.n	800bb72 <_printf_common+0x96>
 800bb24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb28:	1e13      	subs	r3, r2, #0
 800bb2a:	6822      	ldr	r2, [r4, #0]
 800bb2c:	bf18      	it	ne
 800bb2e:	2301      	movne	r3, #1
 800bb30:	0692      	lsls	r2, r2, #26
 800bb32:	d42b      	bmi.n	800bb8c <_printf_common+0xb0>
 800bb34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb38:	4649      	mov	r1, r9
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	47c0      	blx	r8
 800bb3e:	3001      	adds	r0, #1
 800bb40:	d01e      	beq.n	800bb80 <_printf_common+0xa4>
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	68e5      	ldr	r5, [r4, #12]
 800bb46:	6832      	ldr	r2, [r6, #0]
 800bb48:	f003 0306 	and.w	r3, r3, #6
 800bb4c:	2b04      	cmp	r3, #4
 800bb4e:	bf08      	it	eq
 800bb50:	1aad      	subeq	r5, r5, r2
 800bb52:	68a3      	ldr	r3, [r4, #8]
 800bb54:	6922      	ldr	r2, [r4, #16]
 800bb56:	bf0c      	ite	eq
 800bb58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb5c:	2500      	movne	r5, #0
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	bfc4      	itt	gt
 800bb62:	1a9b      	subgt	r3, r3, r2
 800bb64:	18ed      	addgt	r5, r5, r3
 800bb66:	2600      	movs	r6, #0
 800bb68:	341a      	adds	r4, #26
 800bb6a:	42b5      	cmp	r5, r6
 800bb6c:	d11a      	bne.n	800bba4 <_printf_common+0xc8>
 800bb6e:	2000      	movs	r0, #0
 800bb70:	e008      	b.n	800bb84 <_printf_common+0xa8>
 800bb72:	2301      	movs	r3, #1
 800bb74:	4652      	mov	r2, sl
 800bb76:	4649      	mov	r1, r9
 800bb78:	4638      	mov	r0, r7
 800bb7a:	47c0      	blx	r8
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	d103      	bne.n	800bb88 <_printf_common+0xac>
 800bb80:	f04f 30ff 	mov.w	r0, #4294967295
 800bb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb88:	3501      	adds	r5, #1
 800bb8a:	e7c6      	b.n	800bb1a <_printf_common+0x3e>
 800bb8c:	18e1      	adds	r1, r4, r3
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	2030      	movs	r0, #48	; 0x30
 800bb92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb96:	4422      	add	r2, r4
 800bb98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bba0:	3302      	adds	r3, #2
 800bba2:	e7c7      	b.n	800bb34 <_printf_common+0x58>
 800bba4:	2301      	movs	r3, #1
 800bba6:	4622      	mov	r2, r4
 800bba8:	4649      	mov	r1, r9
 800bbaa:	4638      	mov	r0, r7
 800bbac:	47c0      	blx	r8
 800bbae:	3001      	adds	r0, #1
 800bbb0:	d0e6      	beq.n	800bb80 <_printf_common+0xa4>
 800bbb2:	3601      	adds	r6, #1
 800bbb4:	e7d9      	b.n	800bb6a <_printf_common+0x8e>
	...

0800bbb8 <_printf_i>:
 800bbb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	4691      	mov	r9, r2
 800bbc0:	7e27      	ldrb	r7, [r4, #24]
 800bbc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bbc4:	2f78      	cmp	r7, #120	; 0x78
 800bbc6:	4680      	mov	r8, r0
 800bbc8:	469a      	mov	sl, r3
 800bbca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbce:	d807      	bhi.n	800bbe0 <_printf_i+0x28>
 800bbd0:	2f62      	cmp	r7, #98	; 0x62
 800bbd2:	d80a      	bhi.n	800bbea <_printf_i+0x32>
 800bbd4:	2f00      	cmp	r7, #0
 800bbd6:	f000 80d8 	beq.w	800bd8a <_printf_i+0x1d2>
 800bbda:	2f58      	cmp	r7, #88	; 0x58
 800bbdc:	f000 80a3 	beq.w	800bd26 <_printf_i+0x16e>
 800bbe0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bbe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbe8:	e03a      	b.n	800bc60 <_printf_i+0xa8>
 800bbea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbee:	2b15      	cmp	r3, #21
 800bbf0:	d8f6      	bhi.n	800bbe0 <_printf_i+0x28>
 800bbf2:	a001      	add	r0, pc, #4	; (adr r0, 800bbf8 <_printf_i+0x40>)
 800bbf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bbf8:	0800bc51 	.word	0x0800bc51
 800bbfc:	0800bc65 	.word	0x0800bc65
 800bc00:	0800bbe1 	.word	0x0800bbe1
 800bc04:	0800bbe1 	.word	0x0800bbe1
 800bc08:	0800bbe1 	.word	0x0800bbe1
 800bc0c:	0800bbe1 	.word	0x0800bbe1
 800bc10:	0800bc65 	.word	0x0800bc65
 800bc14:	0800bbe1 	.word	0x0800bbe1
 800bc18:	0800bbe1 	.word	0x0800bbe1
 800bc1c:	0800bbe1 	.word	0x0800bbe1
 800bc20:	0800bbe1 	.word	0x0800bbe1
 800bc24:	0800bd71 	.word	0x0800bd71
 800bc28:	0800bc95 	.word	0x0800bc95
 800bc2c:	0800bd53 	.word	0x0800bd53
 800bc30:	0800bbe1 	.word	0x0800bbe1
 800bc34:	0800bbe1 	.word	0x0800bbe1
 800bc38:	0800bd93 	.word	0x0800bd93
 800bc3c:	0800bbe1 	.word	0x0800bbe1
 800bc40:	0800bc95 	.word	0x0800bc95
 800bc44:	0800bbe1 	.word	0x0800bbe1
 800bc48:	0800bbe1 	.word	0x0800bbe1
 800bc4c:	0800bd5b 	.word	0x0800bd5b
 800bc50:	680b      	ldr	r3, [r1, #0]
 800bc52:	1d1a      	adds	r2, r3, #4
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	600a      	str	r2, [r1, #0]
 800bc58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc60:	2301      	movs	r3, #1
 800bc62:	e0a3      	b.n	800bdac <_printf_i+0x1f4>
 800bc64:	6825      	ldr	r5, [r4, #0]
 800bc66:	6808      	ldr	r0, [r1, #0]
 800bc68:	062e      	lsls	r6, r5, #24
 800bc6a:	f100 0304 	add.w	r3, r0, #4
 800bc6e:	d50a      	bpl.n	800bc86 <_printf_i+0xce>
 800bc70:	6805      	ldr	r5, [r0, #0]
 800bc72:	600b      	str	r3, [r1, #0]
 800bc74:	2d00      	cmp	r5, #0
 800bc76:	da03      	bge.n	800bc80 <_printf_i+0xc8>
 800bc78:	232d      	movs	r3, #45	; 0x2d
 800bc7a:	426d      	negs	r5, r5
 800bc7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc80:	485e      	ldr	r0, [pc, #376]	; (800bdfc <_printf_i+0x244>)
 800bc82:	230a      	movs	r3, #10
 800bc84:	e019      	b.n	800bcba <_printf_i+0x102>
 800bc86:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bc8a:	6805      	ldr	r5, [r0, #0]
 800bc8c:	600b      	str	r3, [r1, #0]
 800bc8e:	bf18      	it	ne
 800bc90:	b22d      	sxthne	r5, r5
 800bc92:	e7ef      	b.n	800bc74 <_printf_i+0xbc>
 800bc94:	680b      	ldr	r3, [r1, #0]
 800bc96:	6825      	ldr	r5, [r4, #0]
 800bc98:	1d18      	adds	r0, r3, #4
 800bc9a:	6008      	str	r0, [r1, #0]
 800bc9c:	0628      	lsls	r0, r5, #24
 800bc9e:	d501      	bpl.n	800bca4 <_printf_i+0xec>
 800bca0:	681d      	ldr	r5, [r3, #0]
 800bca2:	e002      	b.n	800bcaa <_printf_i+0xf2>
 800bca4:	0669      	lsls	r1, r5, #25
 800bca6:	d5fb      	bpl.n	800bca0 <_printf_i+0xe8>
 800bca8:	881d      	ldrh	r5, [r3, #0]
 800bcaa:	4854      	ldr	r0, [pc, #336]	; (800bdfc <_printf_i+0x244>)
 800bcac:	2f6f      	cmp	r7, #111	; 0x6f
 800bcae:	bf0c      	ite	eq
 800bcb0:	2308      	moveq	r3, #8
 800bcb2:	230a      	movne	r3, #10
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcba:	6866      	ldr	r6, [r4, #4]
 800bcbc:	60a6      	str	r6, [r4, #8]
 800bcbe:	2e00      	cmp	r6, #0
 800bcc0:	bfa2      	ittt	ge
 800bcc2:	6821      	ldrge	r1, [r4, #0]
 800bcc4:	f021 0104 	bicge.w	r1, r1, #4
 800bcc8:	6021      	strge	r1, [r4, #0]
 800bcca:	b90d      	cbnz	r5, 800bcd0 <_printf_i+0x118>
 800bccc:	2e00      	cmp	r6, #0
 800bcce:	d04d      	beq.n	800bd6c <_printf_i+0x1b4>
 800bcd0:	4616      	mov	r6, r2
 800bcd2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bcd6:	fb03 5711 	mls	r7, r3, r1, r5
 800bcda:	5dc7      	ldrb	r7, [r0, r7]
 800bcdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bce0:	462f      	mov	r7, r5
 800bce2:	42bb      	cmp	r3, r7
 800bce4:	460d      	mov	r5, r1
 800bce6:	d9f4      	bls.n	800bcd2 <_printf_i+0x11a>
 800bce8:	2b08      	cmp	r3, #8
 800bcea:	d10b      	bne.n	800bd04 <_printf_i+0x14c>
 800bcec:	6823      	ldr	r3, [r4, #0]
 800bcee:	07df      	lsls	r7, r3, #31
 800bcf0:	d508      	bpl.n	800bd04 <_printf_i+0x14c>
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	6861      	ldr	r1, [r4, #4]
 800bcf6:	4299      	cmp	r1, r3
 800bcf8:	bfde      	ittt	le
 800bcfa:	2330      	movle	r3, #48	; 0x30
 800bcfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd00:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd04:	1b92      	subs	r2, r2, r6
 800bd06:	6122      	str	r2, [r4, #16]
 800bd08:	f8cd a000 	str.w	sl, [sp]
 800bd0c:	464b      	mov	r3, r9
 800bd0e:	aa03      	add	r2, sp, #12
 800bd10:	4621      	mov	r1, r4
 800bd12:	4640      	mov	r0, r8
 800bd14:	f7ff fee2 	bl	800badc <_printf_common>
 800bd18:	3001      	adds	r0, #1
 800bd1a:	d14c      	bne.n	800bdb6 <_printf_i+0x1fe>
 800bd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd20:	b004      	add	sp, #16
 800bd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd26:	4835      	ldr	r0, [pc, #212]	; (800bdfc <_printf_i+0x244>)
 800bd28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd2c:	6823      	ldr	r3, [r4, #0]
 800bd2e:	680e      	ldr	r6, [r1, #0]
 800bd30:	061f      	lsls	r7, r3, #24
 800bd32:	f856 5b04 	ldr.w	r5, [r6], #4
 800bd36:	600e      	str	r6, [r1, #0]
 800bd38:	d514      	bpl.n	800bd64 <_printf_i+0x1ac>
 800bd3a:	07d9      	lsls	r1, r3, #31
 800bd3c:	bf44      	itt	mi
 800bd3e:	f043 0320 	orrmi.w	r3, r3, #32
 800bd42:	6023      	strmi	r3, [r4, #0]
 800bd44:	b91d      	cbnz	r5, 800bd4e <_printf_i+0x196>
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	f023 0320 	bic.w	r3, r3, #32
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	2310      	movs	r3, #16
 800bd50:	e7b0      	b.n	800bcb4 <_printf_i+0xfc>
 800bd52:	6823      	ldr	r3, [r4, #0]
 800bd54:	f043 0320 	orr.w	r3, r3, #32
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	2378      	movs	r3, #120	; 0x78
 800bd5c:	4828      	ldr	r0, [pc, #160]	; (800be00 <_printf_i+0x248>)
 800bd5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd62:	e7e3      	b.n	800bd2c <_printf_i+0x174>
 800bd64:	065e      	lsls	r6, r3, #25
 800bd66:	bf48      	it	mi
 800bd68:	b2ad      	uxthmi	r5, r5
 800bd6a:	e7e6      	b.n	800bd3a <_printf_i+0x182>
 800bd6c:	4616      	mov	r6, r2
 800bd6e:	e7bb      	b.n	800bce8 <_printf_i+0x130>
 800bd70:	680b      	ldr	r3, [r1, #0]
 800bd72:	6826      	ldr	r6, [r4, #0]
 800bd74:	6960      	ldr	r0, [r4, #20]
 800bd76:	1d1d      	adds	r5, r3, #4
 800bd78:	600d      	str	r5, [r1, #0]
 800bd7a:	0635      	lsls	r5, r6, #24
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	d501      	bpl.n	800bd84 <_printf_i+0x1cc>
 800bd80:	6018      	str	r0, [r3, #0]
 800bd82:	e002      	b.n	800bd8a <_printf_i+0x1d2>
 800bd84:	0671      	lsls	r1, r6, #25
 800bd86:	d5fb      	bpl.n	800bd80 <_printf_i+0x1c8>
 800bd88:	8018      	strh	r0, [r3, #0]
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	6123      	str	r3, [r4, #16]
 800bd8e:	4616      	mov	r6, r2
 800bd90:	e7ba      	b.n	800bd08 <_printf_i+0x150>
 800bd92:	680b      	ldr	r3, [r1, #0]
 800bd94:	1d1a      	adds	r2, r3, #4
 800bd96:	600a      	str	r2, [r1, #0]
 800bd98:	681e      	ldr	r6, [r3, #0]
 800bd9a:	6862      	ldr	r2, [r4, #4]
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f7f4 fa3e 	bl	8000220 <memchr>
 800bda4:	b108      	cbz	r0, 800bdaa <_printf_i+0x1f2>
 800bda6:	1b80      	subs	r0, r0, r6
 800bda8:	6060      	str	r0, [r4, #4]
 800bdaa:	6863      	ldr	r3, [r4, #4]
 800bdac:	6123      	str	r3, [r4, #16]
 800bdae:	2300      	movs	r3, #0
 800bdb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdb4:	e7a8      	b.n	800bd08 <_printf_i+0x150>
 800bdb6:	6923      	ldr	r3, [r4, #16]
 800bdb8:	4632      	mov	r2, r6
 800bdba:	4649      	mov	r1, r9
 800bdbc:	4640      	mov	r0, r8
 800bdbe:	47d0      	blx	sl
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	d0ab      	beq.n	800bd1c <_printf_i+0x164>
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	079b      	lsls	r3, r3, #30
 800bdc8:	d413      	bmi.n	800bdf2 <_printf_i+0x23a>
 800bdca:	68e0      	ldr	r0, [r4, #12]
 800bdcc:	9b03      	ldr	r3, [sp, #12]
 800bdce:	4298      	cmp	r0, r3
 800bdd0:	bfb8      	it	lt
 800bdd2:	4618      	movlt	r0, r3
 800bdd4:	e7a4      	b.n	800bd20 <_printf_i+0x168>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	4632      	mov	r2, r6
 800bdda:	4649      	mov	r1, r9
 800bddc:	4640      	mov	r0, r8
 800bdde:	47d0      	blx	sl
 800bde0:	3001      	adds	r0, #1
 800bde2:	d09b      	beq.n	800bd1c <_printf_i+0x164>
 800bde4:	3501      	adds	r5, #1
 800bde6:	68e3      	ldr	r3, [r4, #12]
 800bde8:	9903      	ldr	r1, [sp, #12]
 800bdea:	1a5b      	subs	r3, r3, r1
 800bdec:	42ab      	cmp	r3, r5
 800bdee:	dcf2      	bgt.n	800bdd6 <_printf_i+0x21e>
 800bdf0:	e7eb      	b.n	800bdca <_printf_i+0x212>
 800bdf2:	2500      	movs	r5, #0
 800bdf4:	f104 0619 	add.w	r6, r4, #25
 800bdf8:	e7f5      	b.n	800bde6 <_printf_i+0x22e>
 800bdfa:	bf00      	nop
 800bdfc:	0800f116 	.word	0x0800f116
 800be00:	0800f127 	.word	0x0800f127

0800be04 <siprintf>:
 800be04:	b40e      	push	{r1, r2, r3}
 800be06:	b500      	push	{lr}
 800be08:	b09c      	sub	sp, #112	; 0x70
 800be0a:	ab1d      	add	r3, sp, #116	; 0x74
 800be0c:	9002      	str	r0, [sp, #8]
 800be0e:	9006      	str	r0, [sp, #24]
 800be10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be14:	4809      	ldr	r0, [pc, #36]	; (800be3c <siprintf+0x38>)
 800be16:	9107      	str	r1, [sp, #28]
 800be18:	9104      	str	r1, [sp, #16]
 800be1a:	4909      	ldr	r1, [pc, #36]	; (800be40 <siprintf+0x3c>)
 800be1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800be20:	9105      	str	r1, [sp, #20]
 800be22:	6800      	ldr	r0, [r0, #0]
 800be24:	9301      	str	r3, [sp, #4]
 800be26:	a902      	add	r1, sp, #8
 800be28:	f001 fb34 	bl	800d494 <_svfiprintf_r>
 800be2c:	9b02      	ldr	r3, [sp, #8]
 800be2e:	2200      	movs	r2, #0
 800be30:	701a      	strb	r2, [r3, #0]
 800be32:	b01c      	add	sp, #112	; 0x70
 800be34:	f85d eb04 	ldr.w	lr, [sp], #4
 800be38:	b003      	add	sp, #12
 800be3a:	4770      	bx	lr
 800be3c:	200000ac 	.word	0x200000ac
 800be40:	ffff0208 	.word	0xffff0208

0800be44 <quorem>:
 800be44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be48:	6903      	ldr	r3, [r0, #16]
 800be4a:	690c      	ldr	r4, [r1, #16]
 800be4c:	42a3      	cmp	r3, r4
 800be4e:	4607      	mov	r7, r0
 800be50:	f2c0 8081 	blt.w	800bf56 <quorem+0x112>
 800be54:	3c01      	subs	r4, #1
 800be56:	f101 0814 	add.w	r8, r1, #20
 800be5a:	f100 0514 	add.w	r5, r0, #20
 800be5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be62:	9301      	str	r3, [sp, #4]
 800be64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be6c:	3301      	adds	r3, #1
 800be6e:	429a      	cmp	r2, r3
 800be70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800be74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be78:	fbb2 f6f3 	udiv	r6, r2, r3
 800be7c:	d331      	bcc.n	800bee2 <quorem+0x9e>
 800be7e:	f04f 0e00 	mov.w	lr, #0
 800be82:	4640      	mov	r0, r8
 800be84:	46ac      	mov	ip, r5
 800be86:	46f2      	mov	sl, lr
 800be88:	f850 2b04 	ldr.w	r2, [r0], #4
 800be8c:	b293      	uxth	r3, r2
 800be8e:	fb06 e303 	mla	r3, r6, r3, lr
 800be92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800be96:	b29b      	uxth	r3, r3
 800be98:	ebaa 0303 	sub.w	r3, sl, r3
 800be9c:	0c12      	lsrs	r2, r2, #16
 800be9e:	f8dc a000 	ldr.w	sl, [ip]
 800bea2:	fb06 e202 	mla	r2, r6, r2, lr
 800bea6:	fa13 f38a 	uxtah	r3, r3, sl
 800beaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800beae:	fa1f fa82 	uxth.w	sl, r2
 800beb2:	f8dc 2000 	ldr.w	r2, [ip]
 800beb6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800beba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bec4:	4581      	cmp	r9, r0
 800bec6:	f84c 3b04 	str.w	r3, [ip], #4
 800beca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bece:	d2db      	bcs.n	800be88 <quorem+0x44>
 800bed0:	f855 300b 	ldr.w	r3, [r5, fp]
 800bed4:	b92b      	cbnz	r3, 800bee2 <quorem+0x9e>
 800bed6:	9b01      	ldr	r3, [sp, #4]
 800bed8:	3b04      	subs	r3, #4
 800beda:	429d      	cmp	r5, r3
 800bedc:	461a      	mov	r2, r3
 800bede:	d32e      	bcc.n	800bf3e <quorem+0xfa>
 800bee0:	613c      	str	r4, [r7, #16]
 800bee2:	4638      	mov	r0, r7
 800bee4:	f001 f8c0 	bl	800d068 <__mcmp>
 800bee8:	2800      	cmp	r0, #0
 800beea:	db24      	blt.n	800bf36 <quorem+0xf2>
 800beec:	3601      	adds	r6, #1
 800beee:	4628      	mov	r0, r5
 800bef0:	f04f 0c00 	mov.w	ip, #0
 800bef4:	f858 2b04 	ldr.w	r2, [r8], #4
 800bef8:	f8d0 e000 	ldr.w	lr, [r0]
 800befc:	b293      	uxth	r3, r2
 800befe:	ebac 0303 	sub.w	r3, ip, r3
 800bf02:	0c12      	lsrs	r2, r2, #16
 800bf04:	fa13 f38e 	uxtah	r3, r3, lr
 800bf08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bf0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf16:	45c1      	cmp	r9, r8
 800bf18:	f840 3b04 	str.w	r3, [r0], #4
 800bf1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bf20:	d2e8      	bcs.n	800bef4 <quorem+0xb0>
 800bf22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf2a:	b922      	cbnz	r2, 800bf36 <quorem+0xf2>
 800bf2c:	3b04      	subs	r3, #4
 800bf2e:	429d      	cmp	r5, r3
 800bf30:	461a      	mov	r2, r3
 800bf32:	d30a      	bcc.n	800bf4a <quorem+0x106>
 800bf34:	613c      	str	r4, [r7, #16]
 800bf36:	4630      	mov	r0, r6
 800bf38:	b003      	add	sp, #12
 800bf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3e:	6812      	ldr	r2, [r2, #0]
 800bf40:	3b04      	subs	r3, #4
 800bf42:	2a00      	cmp	r2, #0
 800bf44:	d1cc      	bne.n	800bee0 <quorem+0x9c>
 800bf46:	3c01      	subs	r4, #1
 800bf48:	e7c7      	b.n	800beda <quorem+0x96>
 800bf4a:	6812      	ldr	r2, [r2, #0]
 800bf4c:	3b04      	subs	r3, #4
 800bf4e:	2a00      	cmp	r2, #0
 800bf50:	d1f0      	bne.n	800bf34 <quorem+0xf0>
 800bf52:	3c01      	subs	r4, #1
 800bf54:	e7eb      	b.n	800bf2e <quorem+0xea>
 800bf56:	2000      	movs	r0, #0
 800bf58:	e7ee      	b.n	800bf38 <quorem+0xf4>
 800bf5a:	0000      	movs	r0, r0
 800bf5c:	0000      	movs	r0, r0
	...

0800bf60 <_dtoa_r>:
 800bf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf64:	ed2d 8b02 	vpush	{d8}
 800bf68:	ec57 6b10 	vmov	r6, r7, d0
 800bf6c:	b095      	sub	sp, #84	; 0x54
 800bf6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bf74:	9105      	str	r1, [sp, #20]
 800bf76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	9209      	str	r2, [sp, #36]	; 0x24
 800bf7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf80:	b975      	cbnz	r5, 800bfa0 <_dtoa_r+0x40>
 800bf82:	2010      	movs	r0, #16
 800bf84:	f000 fddc 	bl	800cb40 <malloc>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	6260      	str	r0, [r4, #36]	; 0x24
 800bf8c:	b920      	cbnz	r0, 800bf98 <_dtoa_r+0x38>
 800bf8e:	4bb2      	ldr	r3, [pc, #712]	; (800c258 <_dtoa_r+0x2f8>)
 800bf90:	21ea      	movs	r1, #234	; 0xea
 800bf92:	48b2      	ldr	r0, [pc, #712]	; (800c25c <_dtoa_r+0x2fc>)
 800bf94:	f001 fb8e 	bl	800d6b4 <__assert_func>
 800bf98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf9c:	6005      	str	r5, [r0, #0]
 800bf9e:	60c5      	str	r5, [r0, #12]
 800bfa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfa2:	6819      	ldr	r1, [r3, #0]
 800bfa4:	b151      	cbz	r1, 800bfbc <_dtoa_r+0x5c>
 800bfa6:	685a      	ldr	r2, [r3, #4]
 800bfa8:	604a      	str	r2, [r1, #4]
 800bfaa:	2301      	movs	r3, #1
 800bfac:	4093      	lsls	r3, r2
 800bfae:	608b      	str	r3, [r1, #8]
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	f000 fe1b 	bl	800cbec <_Bfree>
 800bfb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfb8:	2200      	movs	r2, #0
 800bfba:	601a      	str	r2, [r3, #0]
 800bfbc:	1e3b      	subs	r3, r7, #0
 800bfbe:	bfb9      	ittee	lt
 800bfc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bfc4:	9303      	strlt	r3, [sp, #12]
 800bfc6:	2300      	movge	r3, #0
 800bfc8:	f8c8 3000 	strge.w	r3, [r8]
 800bfcc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bfd0:	4ba3      	ldr	r3, [pc, #652]	; (800c260 <_dtoa_r+0x300>)
 800bfd2:	bfbc      	itt	lt
 800bfd4:	2201      	movlt	r2, #1
 800bfd6:	f8c8 2000 	strlt.w	r2, [r8]
 800bfda:	ea33 0309 	bics.w	r3, r3, r9
 800bfde:	d11b      	bne.n	800c018 <_dtoa_r+0xb8>
 800bfe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bfe2:	f242 730f 	movw	r3, #9999	; 0x270f
 800bfe6:	6013      	str	r3, [r2, #0]
 800bfe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfec:	4333      	orrs	r3, r6
 800bfee:	f000 857a 	beq.w	800cae6 <_dtoa_r+0xb86>
 800bff2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bff4:	b963      	cbnz	r3, 800c010 <_dtoa_r+0xb0>
 800bff6:	4b9b      	ldr	r3, [pc, #620]	; (800c264 <_dtoa_r+0x304>)
 800bff8:	e024      	b.n	800c044 <_dtoa_r+0xe4>
 800bffa:	4b9b      	ldr	r3, [pc, #620]	; (800c268 <_dtoa_r+0x308>)
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	3308      	adds	r3, #8
 800c000:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c002:	6013      	str	r3, [r2, #0]
 800c004:	9800      	ldr	r0, [sp, #0]
 800c006:	b015      	add	sp, #84	; 0x54
 800c008:	ecbd 8b02 	vpop	{d8}
 800c00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c010:	4b94      	ldr	r3, [pc, #592]	; (800c264 <_dtoa_r+0x304>)
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	3303      	adds	r3, #3
 800c016:	e7f3      	b.n	800c000 <_dtoa_r+0xa0>
 800c018:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c01c:	2200      	movs	r2, #0
 800c01e:	ec51 0b17 	vmov	r0, r1, d7
 800c022:	2300      	movs	r3, #0
 800c024:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c028:	f7f4 fd6e 	bl	8000b08 <__aeabi_dcmpeq>
 800c02c:	4680      	mov	r8, r0
 800c02e:	b158      	cbz	r0, 800c048 <_dtoa_r+0xe8>
 800c030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c032:	2301      	movs	r3, #1
 800c034:	6013      	str	r3, [r2, #0]
 800c036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c038:	2b00      	cmp	r3, #0
 800c03a:	f000 8551 	beq.w	800cae0 <_dtoa_r+0xb80>
 800c03e:	488b      	ldr	r0, [pc, #556]	; (800c26c <_dtoa_r+0x30c>)
 800c040:	6018      	str	r0, [r3, #0]
 800c042:	1e43      	subs	r3, r0, #1
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	e7dd      	b.n	800c004 <_dtoa_r+0xa4>
 800c048:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c04c:	aa12      	add	r2, sp, #72	; 0x48
 800c04e:	a913      	add	r1, sp, #76	; 0x4c
 800c050:	4620      	mov	r0, r4
 800c052:	f001 f8ad 	bl	800d1b0 <__d2b>
 800c056:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c05a:	4683      	mov	fp, r0
 800c05c:	2d00      	cmp	r5, #0
 800c05e:	d07c      	beq.n	800c15a <_dtoa_r+0x1fa>
 800c060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c062:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c06a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c06e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c072:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c076:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c07a:	4b7d      	ldr	r3, [pc, #500]	; (800c270 <_dtoa_r+0x310>)
 800c07c:	2200      	movs	r2, #0
 800c07e:	4630      	mov	r0, r6
 800c080:	4639      	mov	r1, r7
 800c082:	f7f4 f921 	bl	80002c8 <__aeabi_dsub>
 800c086:	a36e      	add	r3, pc, #440	; (adr r3, 800c240 <_dtoa_r+0x2e0>)
 800c088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08c:	f7f4 fad4 	bl	8000638 <__aeabi_dmul>
 800c090:	a36d      	add	r3, pc, #436	; (adr r3, 800c248 <_dtoa_r+0x2e8>)
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	f7f4 f919 	bl	80002cc <__adddf3>
 800c09a:	4606      	mov	r6, r0
 800c09c:	4628      	mov	r0, r5
 800c09e:	460f      	mov	r7, r1
 800c0a0:	f7f4 fa60 	bl	8000564 <__aeabi_i2d>
 800c0a4:	a36a      	add	r3, pc, #424	; (adr r3, 800c250 <_dtoa_r+0x2f0>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	f7f4 fac5 	bl	8000638 <__aeabi_dmul>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	4639      	mov	r1, r7
 800c0b6:	f7f4 f909 	bl	80002cc <__adddf3>
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	460f      	mov	r7, r1
 800c0be:	f7f4 fd6b 	bl	8000b98 <__aeabi_d2iz>
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	4682      	mov	sl, r0
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	4639      	mov	r1, r7
 800c0cc:	f7f4 fd26 	bl	8000b1c <__aeabi_dcmplt>
 800c0d0:	b148      	cbz	r0, 800c0e6 <_dtoa_r+0x186>
 800c0d2:	4650      	mov	r0, sl
 800c0d4:	f7f4 fa46 	bl	8000564 <__aeabi_i2d>
 800c0d8:	4632      	mov	r2, r6
 800c0da:	463b      	mov	r3, r7
 800c0dc:	f7f4 fd14 	bl	8000b08 <__aeabi_dcmpeq>
 800c0e0:	b908      	cbnz	r0, 800c0e6 <_dtoa_r+0x186>
 800c0e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0e6:	f1ba 0f16 	cmp.w	sl, #22
 800c0ea:	d854      	bhi.n	800c196 <_dtoa_r+0x236>
 800c0ec:	4b61      	ldr	r3, [pc, #388]	; (800c274 <_dtoa_r+0x314>)
 800c0ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c0fa:	f7f4 fd0f 	bl	8000b1c <__aeabi_dcmplt>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d04b      	beq.n	800c19a <_dtoa_r+0x23a>
 800c102:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c106:	2300      	movs	r3, #0
 800c108:	930e      	str	r3, [sp, #56]	; 0x38
 800c10a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c10c:	1b5d      	subs	r5, r3, r5
 800c10e:	1e6b      	subs	r3, r5, #1
 800c110:	9304      	str	r3, [sp, #16]
 800c112:	bf43      	ittte	mi
 800c114:	2300      	movmi	r3, #0
 800c116:	f1c5 0801 	rsbmi	r8, r5, #1
 800c11a:	9304      	strmi	r3, [sp, #16]
 800c11c:	f04f 0800 	movpl.w	r8, #0
 800c120:	f1ba 0f00 	cmp.w	sl, #0
 800c124:	db3b      	blt.n	800c19e <_dtoa_r+0x23e>
 800c126:	9b04      	ldr	r3, [sp, #16]
 800c128:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c12c:	4453      	add	r3, sl
 800c12e:	9304      	str	r3, [sp, #16]
 800c130:	2300      	movs	r3, #0
 800c132:	9306      	str	r3, [sp, #24]
 800c134:	9b05      	ldr	r3, [sp, #20]
 800c136:	2b09      	cmp	r3, #9
 800c138:	d869      	bhi.n	800c20e <_dtoa_r+0x2ae>
 800c13a:	2b05      	cmp	r3, #5
 800c13c:	bfc4      	itt	gt
 800c13e:	3b04      	subgt	r3, #4
 800c140:	9305      	strgt	r3, [sp, #20]
 800c142:	9b05      	ldr	r3, [sp, #20]
 800c144:	f1a3 0302 	sub.w	r3, r3, #2
 800c148:	bfcc      	ite	gt
 800c14a:	2500      	movgt	r5, #0
 800c14c:	2501      	movle	r5, #1
 800c14e:	2b03      	cmp	r3, #3
 800c150:	d869      	bhi.n	800c226 <_dtoa_r+0x2c6>
 800c152:	e8df f003 	tbb	[pc, r3]
 800c156:	4e2c      	.short	0x4e2c
 800c158:	5a4c      	.short	0x5a4c
 800c15a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c15e:	441d      	add	r5, r3
 800c160:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c164:	2b20      	cmp	r3, #32
 800c166:	bfc1      	itttt	gt
 800c168:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c16c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c170:	fa09 f303 	lslgt.w	r3, r9, r3
 800c174:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c178:	bfda      	itte	le
 800c17a:	f1c3 0320 	rsble	r3, r3, #32
 800c17e:	fa06 f003 	lslle.w	r0, r6, r3
 800c182:	4318      	orrgt	r0, r3
 800c184:	f7f4 f9de 	bl	8000544 <__aeabi_ui2d>
 800c188:	2301      	movs	r3, #1
 800c18a:	4606      	mov	r6, r0
 800c18c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c190:	3d01      	subs	r5, #1
 800c192:	9310      	str	r3, [sp, #64]	; 0x40
 800c194:	e771      	b.n	800c07a <_dtoa_r+0x11a>
 800c196:	2301      	movs	r3, #1
 800c198:	e7b6      	b.n	800c108 <_dtoa_r+0x1a8>
 800c19a:	900e      	str	r0, [sp, #56]	; 0x38
 800c19c:	e7b5      	b.n	800c10a <_dtoa_r+0x1aa>
 800c19e:	f1ca 0300 	rsb	r3, sl, #0
 800c1a2:	9306      	str	r3, [sp, #24]
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	eba8 080a 	sub.w	r8, r8, sl
 800c1aa:	930d      	str	r3, [sp, #52]	; 0x34
 800c1ac:	e7c2      	b.n	800c134 <_dtoa_r+0x1d4>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	9308      	str	r3, [sp, #32]
 800c1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dc39      	bgt.n	800c22c <_dtoa_r+0x2cc>
 800c1b8:	f04f 0901 	mov.w	r9, #1
 800c1bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800c1c0:	464b      	mov	r3, r9
 800c1c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c1c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	6042      	str	r2, [r0, #4]
 800c1cc:	2204      	movs	r2, #4
 800c1ce:	f102 0614 	add.w	r6, r2, #20
 800c1d2:	429e      	cmp	r6, r3
 800c1d4:	6841      	ldr	r1, [r0, #4]
 800c1d6:	d92f      	bls.n	800c238 <_dtoa_r+0x2d8>
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f000 fcc7 	bl	800cb6c <_Balloc>
 800c1de:	9000      	str	r0, [sp, #0]
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	d14b      	bne.n	800c27c <_dtoa_r+0x31c>
 800c1e4:	4b24      	ldr	r3, [pc, #144]	; (800c278 <_dtoa_r+0x318>)
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c1ec:	e6d1      	b.n	800bf92 <_dtoa_r+0x32>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e7de      	b.n	800c1b0 <_dtoa_r+0x250>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	9308      	str	r3, [sp, #32]
 800c1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1f8:	eb0a 0903 	add.w	r9, sl, r3
 800c1fc:	f109 0301 	add.w	r3, r9, #1
 800c200:	2b01      	cmp	r3, #1
 800c202:	9301      	str	r3, [sp, #4]
 800c204:	bfb8      	it	lt
 800c206:	2301      	movlt	r3, #1
 800c208:	e7dd      	b.n	800c1c6 <_dtoa_r+0x266>
 800c20a:	2301      	movs	r3, #1
 800c20c:	e7f2      	b.n	800c1f4 <_dtoa_r+0x294>
 800c20e:	2501      	movs	r5, #1
 800c210:	2300      	movs	r3, #0
 800c212:	9305      	str	r3, [sp, #20]
 800c214:	9508      	str	r5, [sp, #32]
 800c216:	f04f 39ff 	mov.w	r9, #4294967295
 800c21a:	2200      	movs	r2, #0
 800c21c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c220:	2312      	movs	r3, #18
 800c222:	9209      	str	r2, [sp, #36]	; 0x24
 800c224:	e7cf      	b.n	800c1c6 <_dtoa_r+0x266>
 800c226:	2301      	movs	r3, #1
 800c228:	9308      	str	r3, [sp, #32]
 800c22a:	e7f4      	b.n	800c216 <_dtoa_r+0x2b6>
 800c22c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c230:	f8cd 9004 	str.w	r9, [sp, #4]
 800c234:	464b      	mov	r3, r9
 800c236:	e7c6      	b.n	800c1c6 <_dtoa_r+0x266>
 800c238:	3101      	adds	r1, #1
 800c23a:	6041      	str	r1, [r0, #4]
 800c23c:	0052      	lsls	r2, r2, #1
 800c23e:	e7c6      	b.n	800c1ce <_dtoa_r+0x26e>
 800c240:	636f4361 	.word	0x636f4361
 800c244:	3fd287a7 	.word	0x3fd287a7
 800c248:	8b60c8b3 	.word	0x8b60c8b3
 800c24c:	3fc68a28 	.word	0x3fc68a28
 800c250:	509f79fb 	.word	0x509f79fb
 800c254:	3fd34413 	.word	0x3fd34413
 800c258:	0800f145 	.word	0x0800f145
 800c25c:	0800f15c 	.word	0x0800f15c
 800c260:	7ff00000 	.word	0x7ff00000
 800c264:	0800f141 	.word	0x0800f141
 800c268:	0800f138 	.word	0x0800f138
 800c26c:	0800f115 	.word	0x0800f115
 800c270:	3ff80000 	.word	0x3ff80000
 800c274:	0800f258 	.word	0x0800f258
 800c278:	0800f1bb 	.word	0x0800f1bb
 800c27c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c27e:	9a00      	ldr	r2, [sp, #0]
 800c280:	601a      	str	r2, [r3, #0]
 800c282:	9b01      	ldr	r3, [sp, #4]
 800c284:	2b0e      	cmp	r3, #14
 800c286:	f200 80ad 	bhi.w	800c3e4 <_dtoa_r+0x484>
 800c28a:	2d00      	cmp	r5, #0
 800c28c:	f000 80aa 	beq.w	800c3e4 <_dtoa_r+0x484>
 800c290:	f1ba 0f00 	cmp.w	sl, #0
 800c294:	dd36      	ble.n	800c304 <_dtoa_r+0x3a4>
 800c296:	4ac3      	ldr	r2, [pc, #780]	; (800c5a4 <_dtoa_r+0x644>)
 800c298:	f00a 030f 	and.w	r3, sl, #15
 800c29c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c2a0:	ed93 7b00 	vldr	d7, [r3]
 800c2a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c2a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c2ac:	eeb0 8a47 	vmov.f32	s16, s14
 800c2b0:	eef0 8a67 	vmov.f32	s17, s15
 800c2b4:	d016      	beq.n	800c2e4 <_dtoa_r+0x384>
 800c2b6:	4bbc      	ldr	r3, [pc, #752]	; (800c5a8 <_dtoa_r+0x648>)
 800c2b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c2bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2c0:	f7f4 fae4 	bl	800088c <__aeabi_ddiv>
 800c2c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2c8:	f007 070f 	and.w	r7, r7, #15
 800c2cc:	2503      	movs	r5, #3
 800c2ce:	4eb6      	ldr	r6, [pc, #728]	; (800c5a8 <_dtoa_r+0x648>)
 800c2d0:	b957      	cbnz	r7, 800c2e8 <_dtoa_r+0x388>
 800c2d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2d6:	ec53 2b18 	vmov	r2, r3, d8
 800c2da:	f7f4 fad7 	bl	800088c <__aeabi_ddiv>
 800c2de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2e2:	e029      	b.n	800c338 <_dtoa_r+0x3d8>
 800c2e4:	2502      	movs	r5, #2
 800c2e6:	e7f2      	b.n	800c2ce <_dtoa_r+0x36e>
 800c2e8:	07f9      	lsls	r1, r7, #31
 800c2ea:	d508      	bpl.n	800c2fe <_dtoa_r+0x39e>
 800c2ec:	ec51 0b18 	vmov	r0, r1, d8
 800c2f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c2f4:	f7f4 f9a0 	bl	8000638 <__aeabi_dmul>
 800c2f8:	ec41 0b18 	vmov	d8, r0, r1
 800c2fc:	3501      	adds	r5, #1
 800c2fe:	107f      	asrs	r7, r7, #1
 800c300:	3608      	adds	r6, #8
 800c302:	e7e5      	b.n	800c2d0 <_dtoa_r+0x370>
 800c304:	f000 80a6 	beq.w	800c454 <_dtoa_r+0x4f4>
 800c308:	f1ca 0600 	rsb	r6, sl, #0
 800c30c:	4ba5      	ldr	r3, [pc, #660]	; (800c5a4 <_dtoa_r+0x644>)
 800c30e:	4fa6      	ldr	r7, [pc, #664]	; (800c5a8 <_dtoa_r+0x648>)
 800c310:	f006 020f 	and.w	r2, r6, #15
 800c314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c320:	f7f4 f98a 	bl	8000638 <__aeabi_dmul>
 800c324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c328:	1136      	asrs	r6, r6, #4
 800c32a:	2300      	movs	r3, #0
 800c32c:	2502      	movs	r5, #2
 800c32e:	2e00      	cmp	r6, #0
 800c330:	f040 8085 	bne.w	800c43e <_dtoa_r+0x4de>
 800c334:	2b00      	cmp	r3, #0
 800c336:	d1d2      	bne.n	800c2de <_dtoa_r+0x37e>
 800c338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f000 808c 	beq.w	800c458 <_dtoa_r+0x4f8>
 800c340:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c344:	4b99      	ldr	r3, [pc, #612]	; (800c5ac <_dtoa_r+0x64c>)
 800c346:	2200      	movs	r2, #0
 800c348:	4630      	mov	r0, r6
 800c34a:	4639      	mov	r1, r7
 800c34c:	f7f4 fbe6 	bl	8000b1c <__aeabi_dcmplt>
 800c350:	2800      	cmp	r0, #0
 800c352:	f000 8081 	beq.w	800c458 <_dtoa_r+0x4f8>
 800c356:	9b01      	ldr	r3, [sp, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d07d      	beq.n	800c458 <_dtoa_r+0x4f8>
 800c35c:	f1b9 0f00 	cmp.w	r9, #0
 800c360:	dd3c      	ble.n	800c3dc <_dtoa_r+0x47c>
 800c362:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c366:	9307      	str	r3, [sp, #28]
 800c368:	2200      	movs	r2, #0
 800c36a:	4b91      	ldr	r3, [pc, #580]	; (800c5b0 <_dtoa_r+0x650>)
 800c36c:	4630      	mov	r0, r6
 800c36e:	4639      	mov	r1, r7
 800c370:	f7f4 f962 	bl	8000638 <__aeabi_dmul>
 800c374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c378:	3501      	adds	r5, #1
 800c37a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c37e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c382:	4628      	mov	r0, r5
 800c384:	f7f4 f8ee 	bl	8000564 <__aeabi_i2d>
 800c388:	4632      	mov	r2, r6
 800c38a:	463b      	mov	r3, r7
 800c38c:	f7f4 f954 	bl	8000638 <__aeabi_dmul>
 800c390:	4b88      	ldr	r3, [pc, #544]	; (800c5b4 <_dtoa_r+0x654>)
 800c392:	2200      	movs	r2, #0
 800c394:	f7f3 ff9a 	bl	80002cc <__adddf3>
 800c398:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c39c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3a0:	9303      	str	r3, [sp, #12]
 800c3a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d15c      	bne.n	800c462 <_dtoa_r+0x502>
 800c3a8:	4b83      	ldr	r3, [pc, #524]	; (800c5b8 <_dtoa_r+0x658>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	4639      	mov	r1, r7
 800c3b0:	f7f3 ff8a 	bl	80002c8 <__aeabi_dsub>
 800c3b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3b8:	4606      	mov	r6, r0
 800c3ba:	460f      	mov	r7, r1
 800c3bc:	f7f4 fbcc 	bl	8000b58 <__aeabi_dcmpgt>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	f040 8296 	bne.w	800c8f2 <_dtoa_r+0x992>
 800c3c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3d0:	4639      	mov	r1, r7
 800c3d2:	f7f4 fba3 	bl	8000b1c <__aeabi_dcmplt>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	f040 8288 	bne.w	800c8ec <_dtoa_r+0x98c>
 800c3dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c3e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f2c0 8158 	blt.w	800c69c <_dtoa_r+0x73c>
 800c3ec:	f1ba 0f0e 	cmp.w	sl, #14
 800c3f0:	f300 8154 	bgt.w	800c69c <_dtoa_r+0x73c>
 800c3f4:	4b6b      	ldr	r3, [pc, #428]	; (800c5a4 <_dtoa_r+0x644>)
 800c3f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c3fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c400:	2b00      	cmp	r3, #0
 800c402:	f280 80e3 	bge.w	800c5cc <_dtoa_r+0x66c>
 800c406:	9b01      	ldr	r3, [sp, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f300 80df 	bgt.w	800c5cc <_dtoa_r+0x66c>
 800c40e:	f040 826d 	bne.w	800c8ec <_dtoa_r+0x98c>
 800c412:	4b69      	ldr	r3, [pc, #420]	; (800c5b8 <_dtoa_r+0x658>)
 800c414:	2200      	movs	r2, #0
 800c416:	4640      	mov	r0, r8
 800c418:	4649      	mov	r1, r9
 800c41a:	f7f4 f90d 	bl	8000638 <__aeabi_dmul>
 800c41e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c422:	f7f4 fb8f 	bl	8000b44 <__aeabi_dcmpge>
 800c426:	9e01      	ldr	r6, [sp, #4]
 800c428:	4637      	mov	r7, r6
 800c42a:	2800      	cmp	r0, #0
 800c42c:	f040 8243 	bne.w	800c8b6 <_dtoa_r+0x956>
 800c430:	9d00      	ldr	r5, [sp, #0]
 800c432:	2331      	movs	r3, #49	; 0x31
 800c434:	f805 3b01 	strb.w	r3, [r5], #1
 800c438:	f10a 0a01 	add.w	sl, sl, #1
 800c43c:	e23f      	b.n	800c8be <_dtoa_r+0x95e>
 800c43e:	07f2      	lsls	r2, r6, #31
 800c440:	d505      	bpl.n	800c44e <_dtoa_r+0x4ee>
 800c442:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c446:	f7f4 f8f7 	bl	8000638 <__aeabi_dmul>
 800c44a:	3501      	adds	r5, #1
 800c44c:	2301      	movs	r3, #1
 800c44e:	1076      	asrs	r6, r6, #1
 800c450:	3708      	adds	r7, #8
 800c452:	e76c      	b.n	800c32e <_dtoa_r+0x3ce>
 800c454:	2502      	movs	r5, #2
 800c456:	e76f      	b.n	800c338 <_dtoa_r+0x3d8>
 800c458:	9b01      	ldr	r3, [sp, #4]
 800c45a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c45e:	930c      	str	r3, [sp, #48]	; 0x30
 800c460:	e78d      	b.n	800c37e <_dtoa_r+0x41e>
 800c462:	9900      	ldr	r1, [sp, #0]
 800c464:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c468:	4b4e      	ldr	r3, [pc, #312]	; (800c5a4 <_dtoa_r+0x644>)
 800c46a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c46e:	4401      	add	r1, r0
 800c470:	9102      	str	r1, [sp, #8]
 800c472:	9908      	ldr	r1, [sp, #32]
 800c474:	eeb0 8a47 	vmov.f32	s16, s14
 800c478:	eef0 8a67 	vmov.f32	s17, s15
 800c47c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c480:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c484:	2900      	cmp	r1, #0
 800c486:	d045      	beq.n	800c514 <_dtoa_r+0x5b4>
 800c488:	494c      	ldr	r1, [pc, #304]	; (800c5bc <_dtoa_r+0x65c>)
 800c48a:	2000      	movs	r0, #0
 800c48c:	f7f4 f9fe 	bl	800088c <__aeabi_ddiv>
 800c490:	ec53 2b18 	vmov	r2, r3, d8
 800c494:	f7f3 ff18 	bl	80002c8 <__aeabi_dsub>
 800c498:	9d00      	ldr	r5, [sp, #0]
 800c49a:	ec41 0b18 	vmov	d8, r0, r1
 800c49e:	4639      	mov	r1, r7
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	f7f4 fb79 	bl	8000b98 <__aeabi_d2iz>
 800c4a6:	900c      	str	r0, [sp, #48]	; 0x30
 800c4a8:	f7f4 f85c 	bl	8000564 <__aeabi_i2d>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	4639      	mov	r1, r7
 800c4b4:	f7f3 ff08 	bl	80002c8 <__aeabi_dsub>
 800c4b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4ba:	3330      	adds	r3, #48	; 0x30
 800c4bc:	f805 3b01 	strb.w	r3, [r5], #1
 800c4c0:	ec53 2b18 	vmov	r2, r3, d8
 800c4c4:	4606      	mov	r6, r0
 800c4c6:	460f      	mov	r7, r1
 800c4c8:	f7f4 fb28 	bl	8000b1c <__aeabi_dcmplt>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d165      	bne.n	800c59c <_dtoa_r+0x63c>
 800c4d0:	4632      	mov	r2, r6
 800c4d2:	463b      	mov	r3, r7
 800c4d4:	4935      	ldr	r1, [pc, #212]	; (800c5ac <_dtoa_r+0x64c>)
 800c4d6:	2000      	movs	r0, #0
 800c4d8:	f7f3 fef6 	bl	80002c8 <__aeabi_dsub>
 800c4dc:	ec53 2b18 	vmov	r2, r3, d8
 800c4e0:	f7f4 fb1c 	bl	8000b1c <__aeabi_dcmplt>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	f040 80b9 	bne.w	800c65c <_dtoa_r+0x6fc>
 800c4ea:	9b02      	ldr	r3, [sp, #8]
 800c4ec:	429d      	cmp	r5, r3
 800c4ee:	f43f af75 	beq.w	800c3dc <_dtoa_r+0x47c>
 800c4f2:	4b2f      	ldr	r3, [pc, #188]	; (800c5b0 <_dtoa_r+0x650>)
 800c4f4:	ec51 0b18 	vmov	r0, r1, d8
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f7f4 f89d 	bl	8000638 <__aeabi_dmul>
 800c4fe:	4b2c      	ldr	r3, [pc, #176]	; (800c5b0 <_dtoa_r+0x650>)
 800c500:	ec41 0b18 	vmov	d8, r0, r1
 800c504:	2200      	movs	r2, #0
 800c506:	4630      	mov	r0, r6
 800c508:	4639      	mov	r1, r7
 800c50a:	f7f4 f895 	bl	8000638 <__aeabi_dmul>
 800c50e:	4606      	mov	r6, r0
 800c510:	460f      	mov	r7, r1
 800c512:	e7c4      	b.n	800c49e <_dtoa_r+0x53e>
 800c514:	ec51 0b17 	vmov	r0, r1, d7
 800c518:	f7f4 f88e 	bl	8000638 <__aeabi_dmul>
 800c51c:	9b02      	ldr	r3, [sp, #8]
 800c51e:	9d00      	ldr	r5, [sp, #0]
 800c520:	930c      	str	r3, [sp, #48]	; 0x30
 800c522:	ec41 0b18 	vmov	d8, r0, r1
 800c526:	4639      	mov	r1, r7
 800c528:	4630      	mov	r0, r6
 800c52a:	f7f4 fb35 	bl	8000b98 <__aeabi_d2iz>
 800c52e:	9011      	str	r0, [sp, #68]	; 0x44
 800c530:	f7f4 f818 	bl	8000564 <__aeabi_i2d>
 800c534:	4602      	mov	r2, r0
 800c536:	460b      	mov	r3, r1
 800c538:	4630      	mov	r0, r6
 800c53a:	4639      	mov	r1, r7
 800c53c:	f7f3 fec4 	bl	80002c8 <__aeabi_dsub>
 800c540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c542:	3330      	adds	r3, #48	; 0x30
 800c544:	f805 3b01 	strb.w	r3, [r5], #1
 800c548:	9b02      	ldr	r3, [sp, #8]
 800c54a:	429d      	cmp	r5, r3
 800c54c:	4606      	mov	r6, r0
 800c54e:	460f      	mov	r7, r1
 800c550:	f04f 0200 	mov.w	r2, #0
 800c554:	d134      	bne.n	800c5c0 <_dtoa_r+0x660>
 800c556:	4b19      	ldr	r3, [pc, #100]	; (800c5bc <_dtoa_r+0x65c>)
 800c558:	ec51 0b18 	vmov	r0, r1, d8
 800c55c:	f7f3 feb6 	bl	80002cc <__adddf3>
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	4630      	mov	r0, r6
 800c566:	4639      	mov	r1, r7
 800c568:	f7f4 faf6 	bl	8000b58 <__aeabi_dcmpgt>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	d175      	bne.n	800c65c <_dtoa_r+0x6fc>
 800c570:	ec53 2b18 	vmov	r2, r3, d8
 800c574:	4911      	ldr	r1, [pc, #68]	; (800c5bc <_dtoa_r+0x65c>)
 800c576:	2000      	movs	r0, #0
 800c578:	f7f3 fea6 	bl	80002c8 <__aeabi_dsub>
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	4630      	mov	r0, r6
 800c582:	4639      	mov	r1, r7
 800c584:	f7f4 faca 	bl	8000b1c <__aeabi_dcmplt>
 800c588:	2800      	cmp	r0, #0
 800c58a:	f43f af27 	beq.w	800c3dc <_dtoa_r+0x47c>
 800c58e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c590:	1e6b      	subs	r3, r5, #1
 800c592:	930c      	str	r3, [sp, #48]	; 0x30
 800c594:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c598:	2b30      	cmp	r3, #48	; 0x30
 800c59a:	d0f8      	beq.n	800c58e <_dtoa_r+0x62e>
 800c59c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c5a0:	e04a      	b.n	800c638 <_dtoa_r+0x6d8>
 800c5a2:	bf00      	nop
 800c5a4:	0800f258 	.word	0x0800f258
 800c5a8:	0800f230 	.word	0x0800f230
 800c5ac:	3ff00000 	.word	0x3ff00000
 800c5b0:	40240000 	.word	0x40240000
 800c5b4:	401c0000 	.word	0x401c0000
 800c5b8:	40140000 	.word	0x40140000
 800c5bc:	3fe00000 	.word	0x3fe00000
 800c5c0:	4baf      	ldr	r3, [pc, #700]	; (800c880 <_dtoa_r+0x920>)
 800c5c2:	f7f4 f839 	bl	8000638 <__aeabi_dmul>
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	460f      	mov	r7, r1
 800c5ca:	e7ac      	b.n	800c526 <_dtoa_r+0x5c6>
 800c5cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c5d0:	9d00      	ldr	r5, [sp, #0]
 800c5d2:	4642      	mov	r2, r8
 800c5d4:	464b      	mov	r3, r9
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	4639      	mov	r1, r7
 800c5da:	f7f4 f957 	bl	800088c <__aeabi_ddiv>
 800c5de:	f7f4 fadb 	bl	8000b98 <__aeabi_d2iz>
 800c5e2:	9002      	str	r0, [sp, #8]
 800c5e4:	f7f3 ffbe 	bl	8000564 <__aeabi_i2d>
 800c5e8:	4642      	mov	r2, r8
 800c5ea:	464b      	mov	r3, r9
 800c5ec:	f7f4 f824 	bl	8000638 <__aeabi_dmul>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	f7f3 fe66 	bl	80002c8 <__aeabi_dsub>
 800c5fc:	9e02      	ldr	r6, [sp, #8]
 800c5fe:	9f01      	ldr	r7, [sp, #4]
 800c600:	3630      	adds	r6, #48	; 0x30
 800c602:	f805 6b01 	strb.w	r6, [r5], #1
 800c606:	9e00      	ldr	r6, [sp, #0]
 800c608:	1bae      	subs	r6, r5, r6
 800c60a:	42b7      	cmp	r7, r6
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	d137      	bne.n	800c682 <_dtoa_r+0x722>
 800c612:	f7f3 fe5b 	bl	80002cc <__adddf3>
 800c616:	4642      	mov	r2, r8
 800c618:	464b      	mov	r3, r9
 800c61a:	4606      	mov	r6, r0
 800c61c:	460f      	mov	r7, r1
 800c61e:	f7f4 fa9b 	bl	8000b58 <__aeabi_dcmpgt>
 800c622:	b9c8      	cbnz	r0, 800c658 <_dtoa_r+0x6f8>
 800c624:	4642      	mov	r2, r8
 800c626:	464b      	mov	r3, r9
 800c628:	4630      	mov	r0, r6
 800c62a:	4639      	mov	r1, r7
 800c62c:	f7f4 fa6c 	bl	8000b08 <__aeabi_dcmpeq>
 800c630:	b110      	cbz	r0, 800c638 <_dtoa_r+0x6d8>
 800c632:	9b02      	ldr	r3, [sp, #8]
 800c634:	07d9      	lsls	r1, r3, #31
 800c636:	d40f      	bmi.n	800c658 <_dtoa_r+0x6f8>
 800c638:	4620      	mov	r0, r4
 800c63a:	4659      	mov	r1, fp
 800c63c:	f000 fad6 	bl	800cbec <_Bfree>
 800c640:	2300      	movs	r3, #0
 800c642:	702b      	strb	r3, [r5, #0]
 800c644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c646:	f10a 0001 	add.w	r0, sl, #1
 800c64a:	6018      	str	r0, [r3, #0]
 800c64c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f43f acd8 	beq.w	800c004 <_dtoa_r+0xa4>
 800c654:	601d      	str	r5, [r3, #0]
 800c656:	e4d5      	b.n	800c004 <_dtoa_r+0xa4>
 800c658:	f8cd a01c 	str.w	sl, [sp, #28]
 800c65c:	462b      	mov	r3, r5
 800c65e:	461d      	mov	r5, r3
 800c660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c664:	2a39      	cmp	r2, #57	; 0x39
 800c666:	d108      	bne.n	800c67a <_dtoa_r+0x71a>
 800c668:	9a00      	ldr	r2, [sp, #0]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d1f7      	bne.n	800c65e <_dtoa_r+0x6fe>
 800c66e:	9a07      	ldr	r2, [sp, #28]
 800c670:	9900      	ldr	r1, [sp, #0]
 800c672:	3201      	adds	r2, #1
 800c674:	9207      	str	r2, [sp, #28]
 800c676:	2230      	movs	r2, #48	; 0x30
 800c678:	700a      	strb	r2, [r1, #0]
 800c67a:	781a      	ldrb	r2, [r3, #0]
 800c67c:	3201      	adds	r2, #1
 800c67e:	701a      	strb	r2, [r3, #0]
 800c680:	e78c      	b.n	800c59c <_dtoa_r+0x63c>
 800c682:	4b7f      	ldr	r3, [pc, #508]	; (800c880 <_dtoa_r+0x920>)
 800c684:	2200      	movs	r2, #0
 800c686:	f7f3 ffd7 	bl	8000638 <__aeabi_dmul>
 800c68a:	2200      	movs	r2, #0
 800c68c:	2300      	movs	r3, #0
 800c68e:	4606      	mov	r6, r0
 800c690:	460f      	mov	r7, r1
 800c692:	f7f4 fa39 	bl	8000b08 <__aeabi_dcmpeq>
 800c696:	2800      	cmp	r0, #0
 800c698:	d09b      	beq.n	800c5d2 <_dtoa_r+0x672>
 800c69a:	e7cd      	b.n	800c638 <_dtoa_r+0x6d8>
 800c69c:	9a08      	ldr	r2, [sp, #32]
 800c69e:	2a00      	cmp	r2, #0
 800c6a0:	f000 80c4 	beq.w	800c82c <_dtoa_r+0x8cc>
 800c6a4:	9a05      	ldr	r2, [sp, #20]
 800c6a6:	2a01      	cmp	r2, #1
 800c6a8:	f300 80a8 	bgt.w	800c7fc <_dtoa_r+0x89c>
 800c6ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c6ae:	2a00      	cmp	r2, #0
 800c6b0:	f000 80a0 	beq.w	800c7f4 <_dtoa_r+0x894>
 800c6b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c6b8:	9e06      	ldr	r6, [sp, #24]
 800c6ba:	4645      	mov	r5, r8
 800c6bc:	9a04      	ldr	r2, [sp, #16]
 800c6be:	2101      	movs	r1, #1
 800c6c0:	441a      	add	r2, r3
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	4498      	add	r8, r3
 800c6c6:	9204      	str	r2, [sp, #16]
 800c6c8:	f000 fb4c 	bl	800cd64 <__i2b>
 800c6cc:	4607      	mov	r7, r0
 800c6ce:	2d00      	cmp	r5, #0
 800c6d0:	dd0b      	ble.n	800c6ea <_dtoa_r+0x78a>
 800c6d2:	9b04      	ldr	r3, [sp, #16]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	dd08      	ble.n	800c6ea <_dtoa_r+0x78a>
 800c6d8:	42ab      	cmp	r3, r5
 800c6da:	9a04      	ldr	r2, [sp, #16]
 800c6dc:	bfa8      	it	ge
 800c6de:	462b      	movge	r3, r5
 800c6e0:	eba8 0803 	sub.w	r8, r8, r3
 800c6e4:	1aed      	subs	r5, r5, r3
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	9304      	str	r3, [sp, #16]
 800c6ea:	9b06      	ldr	r3, [sp, #24]
 800c6ec:	b1fb      	cbz	r3, 800c72e <_dtoa_r+0x7ce>
 800c6ee:	9b08      	ldr	r3, [sp, #32]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f000 809f 	beq.w	800c834 <_dtoa_r+0x8d4>
 800c6f6:	2e00      	cmp	r6, #0
 800c6f8:	dd11      	ble.n	800c71e <_dtoa_r+0x7be>
 800c6fa:	4639      	mov	r1, r7
 800c6fc:	4632      	mov	r2, r6
 800c6fe:	4620      	mov	r0, r4
 800c700:	f000 fbec 	bl	800cedc <__pow5mult>
 800c704:	465a      	mov	r2, fp
 800c706:	4601      	mov	r1, r0
 800c708:	4607      	mov	r7, r0
 800c70a:	4620      	mov	r0, r4
 800c70c:	f000 fb40 	bl	800cd90 <__multiply>
 800c710:	4659      	mov	r1, fp
 800c712:	9007      	str	r0, [sp, #28]
 800c714:	4620      	mov	r0, r4
 800c716:	f000 fa69 	bl	800cbec <_Bfree>
 800c71a:	9b07      	ldr	r3, [sp, #28]
 800c71c:	469b      	mov	fp, r3
 800c71e:	9b06      	ldr	r3, [sp, #24]
 800c720:	1b9a      	subs	r2, r3, r6
 800c722:	d004      	beq.n	800c72e <_dtoa_r+0x7ce>
 800c724:	4659      	mov	r1, fp
 800c726:	4620      	mov	r0, r4
 800c728:	f000 fbd8 	bl	800cedc <__pow5mult>
 800c72c:	4683      	mov	fp, r0
 800c72e:	2101      	movs	r1, #1
 800c730:	4620      	mov	r0, r4
 800c732:	f000 fb17 	bl	800cd64 <__i2b>
 800c736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c738:	2b00      	cmp	r3, #0
 800c73a:	4606      	mov	r6, r0
 800c73c:	dd7c      	ble.n	800c838 <_dtoa_r+0x8d8>
 800c73e:	461a      	mov	r2, r3
 800c740:	4601      	mov	r1, r0
 800c742:	4620      	mov	r0, r4
 800c744:	f000 fbca 	bl	800cedc <__pow5mult>
 800c748:	9b05      	ldr	r3, [sp, #20]
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	4606      	mov	r6, r0
 800c74e:	dd76      	ble.n	800c83e <_dtoa_r+0x8de>
 800c750:	2300      	movs	r3, #0
 800c752:	9306      	str	r3, [sp, #24]
 800c754:	6933      	ldr	r3, [r6, #16]
 800c756:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c75a:	6918      	ldr	r0, [r3, #16]
 800c75c:	f000 fab2 	bl	800ccc4 <__hi0bits>
 800c760:	f1c0 0020 	rsb	r0, r0, #32
 800c764:	9b04      	ldr	r3, [sp, #16]
 800c766:	4418      	add	r0, r3
 800c768:	f010 001f 	ands.w	r0, r0, #31
 800c76c:	f000 8086 	beq.w	800c87c <_dtoa_r+0x91c>
 800c770:	f1c0 0320 	rsb	r3, r0, #32
 800c774:	2b04      	cmp	r3, #4
 800c776:	dd7f      	ble.n	800c878 <_dtoa_r+0x918>
 800c778:	f1c0 001c 	rsb	r0, r0, #28
 800c77c:	9b04      	ldr	r3, [sp, #16]
 800c77e:	4403      	add	r3, r0
 800c780:	4480      	add	r8, r0
 800c782:	4405      	add	r5, r0
 800c784:	9304      	str	r3, [sp, #16]
 800c786:	f1b8 0f00 	cmp.w	r8, #0
 800c78a:	dd05      	ble.n	800c798 <_dtoa_r+0x838>
 800c78c:	4659      	mov	r1, fp
 800c78e:	4642      	mov	r2, r8
 800c790:	4620      	mov	r0, r4
 800c792:	f000 fbfd 	bl	800cf90 <__lshift>
 800c796:	4683      	mov	fp, r0
 800c798:	9b04      	ldr	r3, [sp, #16]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	dd05      	ble.n	800c7aa <_dtoa_r+0x84a>
 800c79e:	4631      	mov	r1, r6
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f000 fbf4 	bl	800cf90 <__lshift>
 800c7a8:	4606      	mov	r6, r0
 800c7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d069      	beq.n	800c884 <_dtoa_r+0x924>
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	4658      	mov	r0, fp
 800c7b4:	f000 fc58 	bl	800d068 <__mcmp>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	da63      	bge.n	800c884 <_dtoa_r+0x924>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	4659      	mov	r1, fp
 800c7c0:	220a      	movs	r2, #10
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f000 fa34 	bl	800cc30 <__multadd>
 800c7c8:	9b08      	ldr	r3, [sp, #32]
 800c7ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7ce:	4683      	mov	fp, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	f000 818f 	beq.w	800caf4 <_dtoa_r+0xb94>
 800c7d6:	4639      	mov	r1, r7
 800c7d8:	2300      	movs	r3, #0
 800c7da:	220a      	movs	r2, #10
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f000 fa27 	bl	800cc30 <__multadd>
 800c7e2:	f1b9 0f00 	cmp.w	r9, #0
 800c7e6:	4607      	mov	r7, r0
 800c7e8:	f300 808e 	bgt.w	800c908 <_dtoa_r+0x9a8>
 800c7ec:	9b05      	ldr	r3, [sp, #20]
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	dc50      	bgt.n	800c894 <_dtoa_r+0x934>
 800c7f2:	e089      	b.n	800c908 <_dtoa_r+0x9a8>
 800c7f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c7fa:	e75d      	b.n	800c6b8 <_dtoa_r+0x758>
 800c7fc:	9b01      	ldr	r3, [sp, #4]
 800c7fe:	1e5e      	subs	r6, r3, #1
 800c800:	9b06      	ldr	r3, [sp, #24]
 800c802:	42b3      	cmp	r3, r6
 800c804:	bfbf      	itttt	lt
 800c806:	9b06      	ldrlt	r3, [sp, #24]
 800c808:	9606      	strlt	r6, [sp, #24]
 800c80a:	1af2      	sublt	r2, r6, r3
 800c80c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c80e:	bfb6      	itet	lt
 800c810:	189b      	addlt	r3, r3, r2
 800c812:	1b9e      	subge	r6, r3, r6
 800c814:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c816:	9b01      	ldr	r3, [sp, #4]
 800c818:	bfb8      	it	lt
 800c81a:	2600      	movlt	r6, #0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	bfb5      	itete	lt
 800c820:	eba8 0503 	sublt.w	r5, r8, r3
 800c824:	9b01      	ldrge	r3, [sp, #4]
 800c826:	2300      	movlt	r3, #0
 800c828:	4645      	movge	r5, r8
 800c82a:	e747      	b.n	800c6bc <_dtoa_r+0x75c>
 800c82c:	9e06      	ldr	r6, [sp, #24]
 800c82e:	9f08      	ldr	r7, [sp, #32]
 800c830:	4645      	mov	r5, r8
 800c832:	e74c      	b.n	800c6ce <_dtoa_r+0x76e>
 800c834:	9a06      	ldr	r2, [sp, #24]
 800c836:	e775      	b.n	800c724 <_dtoa_r+0x7c4>
 800c838:	9b05      	ldr	r3, [sp, #20]
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	dc18      	bgt.n	800c870 <_dtoa_r+0x910>
 800c83e:	9b02      	ldr	r3, [sp, #8]
 800c840:	b9b3      	cbnz	r3, 800c870 <_dtoa_r+0x910>
 800c842:	9b03      	ldr	r3, [sp, #12]
 800c844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c848:	b9a3      	cbnz	r3, 800c874 <_dtoa_r+0x914>
 800c84a:	9b03      	ldr	r3, [sp, #12]
 800c84c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c850:	0d1b      	lsrs	r3, r3, #20
 800c852:	051b      	lsls	r3, r3, #20
 800c854:	b12b      	cbz	r3, 800c862 <_dtoa_r+0x902>
 800c856:	9b04      	ldr	r3, [sp, #16]
 800c858:	3301      	adds	r3, #1
 800c85a:	9304      	str	r3, [sp, #16]
 800c85c:	f108 0801 	add.w	r8, r8, #1
 800c860:	2301      	movs	r3, #1
 800c862:	9306      	str	r3, [sp, #24]
 800c864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c866:	2b00      	cmp	r3, #0
 800c868:	f47f af74 	bne.w	800c754 <_dtoa_r+0x7f4>
 800c86c:	2001      	movs	r0, #1
 800c86e:	e779      	b.n	800c764 <_dtoa_r+0x804>
 800c870:	2300      	movs	r3, #0
 800c872:	e7f6      	b.n	800c862 <_dtoa_r+0x902>
 800c874:	9b02      	ldr	r3, [sp, #8]
 800c876:	e7f4      	b.n	800c862 <_dtoa_r+0x902>
 800c878:	d085      	beq.n	800c786 <_dtoa_r+0x826>
 800c87a:	4618      	mov	r0, r3
 800c87c:	301c      	adds	r0, #28
 800c87e:	e77d      	b.n	800c77c <_dtoa_r+0x81c>
 800c880:	40240000 	.word	0x40240000
 800c884:	9b01      	ldr	r3, [sp, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	dc38      	bgt.n	800c8fc <_dtoa_r+0x99c>
 800c88a:	9b05      	ldr	r3, [sp, #20]
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	dd35      	ble.n	800c8fc <_dtoa_r+0x99c>
 800c890:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c894:	f1b9 0f00 	cmp.w	r9, #0
 800c898:	d10d      	bne.n	800c8b6 <_dtoa_r+0x956>
 800c89a:	4631      	mov	r1, r6
 800c89c:	464b      	mov	r3, r9
 800c89e:	2205      	movs	r2, #5
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f000 f9c5 	bl	800cc30 <__multadd>
 800c8a6:	4601      	mov	r1, r0
 800c8a8:	4606      	mov	r6, r0
 800c8aa:	4658      	mov	r0, fp
 800c8ac:	f000 fbdc 	bl	800d068 <__mcmp>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	f73f adbd 	bgt.w	800c430 <_dtoa_r+0x4d0>
 800c8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8b8:	9d00      	ldr	r5, [sp, #0]
 800c8ba:	ea6f 0a03 	mvn.w	sl, r3
 800c8be:	f04f 0800 	mov.w	r8, #0
 800c8c2:	4631      	mov	r1, r6
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f000 f991 	bl	800cbec <_Bfree>
 800c8ca:	2f00      	cmp	r7, #0
 800c8cc:	f43f aeb4 	beq.w	800c638 <_dtoa_r+0x6d8>
 800c8d0:	f1b8 0f00 	cmp.w	r8, #0
 800c8d4:	d005      	beq.n	800c8e2 <_dtoa_r+0x982>
 800c8d6:	45b8      	cmp	r8, r7
 800c8d8:	d003      	beq.n	800c8e2 <_dtoa_r+0x982>
 800c8da:	4641      	mov	r1, r8
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f000 f985 	bl	800cbec <_Bfree>
 800c8e2:	4639      	mov	r1, r7
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f000 f981 	bl	800cbec <_Bfree>
 800c8ea:	e6a5      	b.n	800c638 <_dtoa_r+0x6d8>
 800c8ec:	2600      	movs	r6, #0
 800c8ee:	4637      	mov	r7, r6
 800c8f0:	e7e1      	b.n	800c8b6 <_dtoa_r+0x956>
 800c8f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c8f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c8f8:	4637      	mov	r7, r6
 800c8fa:	e599      	b.n	800c430 <_dtoa_r+0x4d0>
 800c8fc:	9b08      	ldr	r3, [sp, #32]
 800c8fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 80fd 	beq.w	800cb02 <_dtoa_r+0xba2>
 800c908:	2d00      	cmp	r5, #0
 800c90a:	dd05      	ble.n	800c918 <_dtoa_r+0x9b8>
 800c90c:	4639      	mov	r1, r7
 800c90e:	462a      	mov	r2, r5
 800c910:	4620      	mov	r0, r4
 800c912:	f000 fb3d 	bl	800cf90 <__lshift>
 800c916:	4607      	mov	r7, r0
 800c918:	9b06      	ldr	r3, [sp, #24]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d05c      	beq.n	800c9d8 <_dtoa_r+0xa78>
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	4620      	mov	r0, r4
 800c922:	f000 f923 	bl	800cb6c <_Balloc>
 800c926:	4605      	mov	r5, r0
 800c928:	b928      	cbnz	r0, 800c936 <_dtoa_r+0x9d6>
 800c92a:	4b80      	ldr	r3, [pc, #512]	; (800cb2c <_dtoa_r+0xbcc>)
 800c92c:	4602      	mov	r2, r0
 800c92e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c932:	f7ff bb2e 	b.w	800bf92 <_dtoa_r+0x32>
 800c936:	693a      	ldr	r2, [r7, #16]
 800c938:	3202      	adds	r2, #2
 800c93a:	0092      	lsls	r2, r2, #2
 800c93c:	f107 010c 	add.w	r1, r7, #12
 800c940:	300c      	adds	r0, #12
 800c942:	f000 f905 	bl	800cb50 <memcpy>
 800c946:	2201      	movs	r2, #1
 800c948:	4629      	mov	r1, r5
 800c94a:	4620      	mov	r0, r4
 800c94c:	f000 fb20 	bl	800cf90 <__lshift>
 800c950:	9b00      	ldr	r3, [sp, #0]
 800c952:	3301      	adds	r3, #1
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	9b00      	ldr	r3, [sp, #0]
 800c958:	444b      	add	r3, r9
 800c95a:	9307      	str	r3, [sp, #28]
 800c95c:	9b02      	ldr	r3, [sp, #8]
 800c95e:	f003 0301 	and.w	r3, r3, #1
 800c962:	46b8      	mov	r8, r7
 800c964:	9306      	str	r3, [sp, #24]
 800c966:	4607      	mov	r7, r0
 800c968:	9b01      	ldr	r3, [sp, #4]
 800c96a:	4631      	mov	r1, r6
 800c96c:	3b01      	subs	r3, #1
 800c96e:	4658      	mov	r0, fp
 800c970:	9302      	str	r3, [sp, #8]
 800c972:	f7ff fa67 	bl	800be44 <quorem>
 800c976:	4603      	mov	r3, r0
 800c978:	3330      	adds	r3, #48	; 0x30
 800c97a:	9004      	str	r0, [sp, #16]
 800c97c:	4641      	mov	r1, r8
 800c97e:	4658      	mov	r0, fp
 800c980:	9308      	str	r3, [sp, #32]
 800c982:	f000 fb71 	bl	800d068 <__mcmp>
 800c986:	463a      	mov	r2, r7
 800c988:	4681      	mov	r9, r0
 800c98a:	4631      	mov	r1, r6
 800c98c:	4620      	mov	r0, r4
 800c98e:	f000 fb87 	bl	800d0a0 <__mdiff>
 800c992:	68c2      	ldr	r2, [r0, #12]
 800c994:	9b08      	ldr	r3, [sp, #32]
 800c996:	4605      	mov	r5, r0
 800c998:	bb02      	cbnz	r2, 800c9dc <_dtoa_r+0xa7c>
 800c99a:	4601      	mov	r1, r0
 800c99c:	4658      	mov	r0, fp
 800c99e:	f000 fb63 	bl	800d068 <__mcmp>
 800c9a2:	9b08      	ldr	r3, [sp, #32]
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	4629      	mov	r1, r5
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c9ae:	f000 f91d 	bl	800cbec <_Bfree>
 800c9b2:	9b05      	ldr	r3, [sp, #20]
 800c9b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9b6:	9d01      	ldr	r5, [sp, #4]
 800c9b8:	ea43 0102 	orr.w	r1, r3, r2
 800c9bc:	9b06      	ldr	r3, [sp, #24]
 800c9be:	430b      	orrs	r3, r1
 800c9c0:	9b08      	ldr	r3, [sp, #32]
 800c9c2:	d10d      	bne.n	800c9e0 <_dtoa_r+0xa80>
 800c9c4:	2b39      	cmp	r3, #57	; 0x39
 800c9c6:	d029      	beq.n	800ca1c <_dtoa_r+0xabc>
 800c9c8:	f1b9 0f00 	cmp.w	r9, #0
 800c9cc:	dd01      	ble.n	800c9d2 <_dtoa_r+0xa72>
 800c9ce:	9b04      	ldr	r3, [sp, #16]
 800c9d0:	3331      	adds	r3, #49	; 0x31
 800c9d2:	9a02      	ldr	r2, [sp, #8]
 800c9d4:	7013      	strb	r3, [r2, #0]
 800c9d6:	e774      	b.n	800c8c2 <_dtoa_r+0x962>
 800c9d8:	4638      	mov	r0, r7
 800c9da:	e7b9      	b.n	800c950 <_dtoa_r+0x9f0>
 800c9dc:	2201      	movs	r2, #1
 800c9de:	e7e2      	b.n	800c9a6 <_dtoa_r+0xa46>
 800c9e0:	f1b9 0f00 	cmp.w	r9, #0
 800c9e4:	db06      	blt.n	800c9f4 <_dtoa_r+0xa94>
 800c9e6:	9905      	ldr	r1, [sp, #20]
 800c9e8:	ea41 0909 	orr.w	r9, r1, r9
 800c9ec:	9906      	ldr	r1, [sp, #24]
 800c9ee:	ea59 0101 	orrs.w	r1, r9, r1
 800c9f2:	d120      	bne.n	800ca36 <_dtoa_r+0xad6>
 800c9f4:	2a00      	cmp	r2, #0
 800c9f6:	ddec      	ble.n	800c9d2 <_dtoa_r+0xa72>
 800c9f8:	4659      	mov	r1, fp
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	9301      	str	r3, [sp, #4]
 800ca00:	f000 fac6 	bl	800cf90 <__lshift>
 800ca04:	4631      	mov	r1, r6
 800ca06:	4683      	mov	fp, r0
 800ca08:	f000 fb2e 	bl	800d068 <__mcmp>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	9b01      	ldr	r3, [sp, #4]
 800ca10:	dc02      	bgt.n	800ca18 <_dtoa_r+0xab8>
 800ca12:	d1de      	bne.n	800c9d2 <_dtoa_r+0xa72>
 800ca14:	07da      	lsls	r2, r3, #31
 800ca16:	d5dc      	bpl.n	800c9d2 <_dtoa_r+0xa72>
 800ca18:	2b39      	cmp	r3, #57	; 0x39
 800ca1a:	d1d8      	bne.n	800c9ce <_dtoa_r+0xa6e>
 800ca1c:	9a02      	ldr	r2, [sp, #8]
 800ca1e:	2339      	movs	r3, #57	; 0x39
 800ca20:	7013      	strb	r3, [r2, #0]
 800ca22:	462b      	mov	r3, r5
 800ca24:	461d      	mov	r5, r3
 800ca26:	3b01      	subs	r3, #1
 800ca28:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ca2c:	2a39      	cmp	r2, #57	; 0x39
 800ca2e:	d050      	beq.n	800cad2 <_dtoa_r+0xb72>
 800ca30:	3201      	adds	r2, #1
 800ca32:	701a      	strb	r2, [r3, #0]
 800ca34:	e745      	b.n	800c8c2 <_dtoa_r+0x962>
 800ca36:	2a00      	cmp	r2, #0
 800ca38:	dd03      	ble.n	800ca42 <_dtoa_r+0xae2>
 800ca3a:	2b39      	cmp	r3, #57	; 0x39
 800ca3c:	d0ee      	beq.n	800ca1c <_dtoa_r+0xabc>
 800ca3e:	3301      	adds	r3, #1
 800ca40:	e7c7      	b.n	800c9d2 <_dtoa_r+0xa72>
 800ca42:	9a01      	ldr	r2, [sp, #4]
 800ca44:	9907      	ldr	r1, [sp, #28]
 800ca46:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ca4a:	428a      	cmp	r2, r1
 800ca4c:	d02a      	beq.n	800caa4 <_dtoa_r+0xb44>
 800ca4e:	4659      	mov	r1, fp
 800ca50:	2300      	movs	r3, #0
 800ca52:	220a      	movs	r2, #10
 800ca54:	4620      	mov	r0, r4
 800ca56:	f000 f8eb 	bl	800cc30 <__multadd>
 800ca5a:	45b8      	cmp	r8, r7
 800ca5c:	4683      	mov	fp, r0
 800ca5e:	f04f 0300 	mov.w	r3, #0
 800ca62:	f04f 020a 	mov.w	r2, #10
 800ca66:	4641      	mov	r1, r8
 800ca68:	4620      	mov	r0, r4
 800ca6a:	d107      	bne.n	800ca7c <_dtoa_r+0xb1c>
 800ca6c:	f000 f8e0 	bl	800cc30 <__multadd>
 800ca70:	4680      	mov	r8, r0
 800ca72:	4607      	mov	r7, r0
 800ca74:	9b01      	ldr	r3, [sp, #4]
 800ca76:	3301      	adds	r3, #1
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	e775      	b.n	800c968 <_dtoa_r+0xa08>
 800ca7c:	f000 f8d8 	bl	800cc30 <__multadd>
 800ca80:	4639      	mov	r1, r7
 800ca82:	4680      	mov	r8, r0
 800ca84:	2300      	movs	r3, #0
 800ca86:	220a      	movs	r2, #10
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f000 f8d1 	bl	800cc30 <__multadd>
 800ca8e:	4607      	mov	r7, r0
 800ca90:	e7f0      	b.n	800ca74 <_dtoa_r+0xb14>
 800ca92:	f1b9 0f00 	cmp.w	r9, #0
 800ca96:	9a00      	ldr	r2, [sp, #0]
 800ca98:	bfcc      	ite	gt
 800ca9a:	464d      	movgt	r5, r9
 800ca9c:	2501      	movle	r5, #1
 800ca9e:	4415      	add	r5, r2
 800caa0:	f04f 0800 	mov.w	r8, #0
 800caa4:	4659      	mov	r1, fp
 800caa6:	2201      	movs	r2, #1
 800caa8:	4620      	mov	r0, r4
 800caaa:	9301      	str	r3, [sp, #4]
 800caac:	f000 fa70 	bl	800cf90 <__lshift>
 800cab0:	4631      	mov	r1, r6
 800cab2:	4683      	mov	fp, r0
 800cab4:	f000 fad8 	bl	800d068 <__mcmp>
 800cab8:	2800      	cmp	r0, #0
 800caba:	dcb2      	bgt.n	800ca22 <_dtoa_r+0xac2>
 800cabc:	d102      	bne.n	800cac4 <_dtoa_r+0xb64>
 800cabe:	9b01      	ldr	r3, [sp, #4]
 800cac0:	07db      	lsls	r3, r3, #31
 800cac2:	d4ae      	bmi.n	800ca22 <_dtoa_r+0xac2>
 800cac4:	462b      	mov	r3, r5
 800cac6:	461d      	mov	r5, r3
 800cac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cacc:	2a30      	cmp	r2, #48	; 0x30
 800cace:	d0fa      	beq.n	800cac6 <_dtoa_r+0xb66>
 800cad0:	e6f7      	b.n	800c8c2 <_dtoa_r+0x962>
 800cad2:	9a00      	ldr	r2, [sp, #0]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d1a5      	bne.n	800ca24 <_dtoa_r+0xac4>
 800cad8:	f10a 0a01 	add.w	sl, sl, #1
 800cadc:	2331      	movs	r3, #49	; 0x31
 800cade:	e779      	b.n	800c9d4 <_dtoa_r+0xa74>
 800cae0:	4b13      	ldr	r3, [pc, #76]	; (800cb30 <_dtoa_r+0xbd0>)
 800cae2:	f7ff baaf 	b.w	800c044 <_dtoa_r+0xe4>
 800cae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f47f aa86 	bne.w	800bffa <_dtoa_r+0x9a>
 800caee:	4b11      	ldr	r3, [pc, #68]	; (800cb34 <_dtoa_r+0xbd4>)
 800caf0:	f7ff baa8 	b.w	800c044 <_dtoa_r+0xe4>
 800caf4:	f1b9 0f00 	cmp.w	r9, #0
 800caf8:	dc03      	bgt.n	800cb02 <_dtoa_r+0xba2>
 800cafa:	9b05      	ldr	r3, [sp, #20]
 800cafc:	2b02      	cmp	r3, #2
 800cafe:	f73f aec9 	bgt.w	800c894 <_dtoa_r+0x934>
 800cb02:	9d00      	ldr	r5, [sp, #0]
 800cb04:	4631      	mov	r1, r6
 800cb06:	4658      	mov	r0, fp
 800cb08:	f7ff f99c 	bl	800be44 <quorem>
 800cb0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cb10:	f805 3b01 	strb.w	r3, [r5], #1
 800cb14:	9a00      	ldr	r2, [sp, #0]
 800cb16:	1aaa      	subs	r2, r5, r2
 800cb18:	4591      	cmp	r9, r2
 800cb1a:	ddba      	ble.n	800ca92 <_dtoa_r+0xb32>
 800cb1c:	4659      	mov	r1, fp
 800cb1e:	2300      	movs	r3, #0
 800cb20:	220a      	movs	r2, #10
 800cb22:	4620      	mov	r0, r4
 800cb24:	f000 f884 	bl	800cc30 <__multadd>
 800cb28:	4683      	mov	fp, r0
 800cb2a:	e7eb      	b.n	800cb04 <_dtoa_r+0xba4>
 800cb2c:	0800f1bb 	.word	0x0800f1bb
 800cb30:	0800f114 	.word	0x0800f114
 800cb34:	0800f138 	.word	0x0800f138

0800cb38 <_localeconv_r>:
 800cb38:	4800      	ldr	r0, [pc, #0]	; (800cb3c <_localeconv_r+0x4>)
 800cb3a:	4770      	bx	lr
 800cb3c:	20000200 	.word	0x20000200

0800cb40 <malloc>:
 800cb40:	4b02      	ldr	r3, [pc, #8]	; (800cb4c <malloc+0xc>)
 800cb42:	4601      	mov	r1, r0
 800cb44:	6818      	ldr	r0, [r3, #0]
 800cb46:	f000 bbef 	b.w	800d328 <_malloc_r>
 800cb4a:	bf00      	nop
 800cb4c:	200000ac 	.word	0x200000ac

0800cb50 <memcpy>:
 800cb50:	440a      	add	r2, r1
 800cb52:	4291      	cmp	r1, r2
 800cb54:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb58:	d100      	bne.n	800cb5c <memcpy+0xc>
 800cb5a:	4770      	bx	lr
 800cb5c:	b510      	push	{r4, lr}
 800cb5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb66:	4291      	cmp	r1, r2
 800cb68:	d1f9      	bne.n	800cb5e <memcpy+0xe>
 800cb6a:	bd10      	pop	{r4, pc}

0800cb6c <_Balloc>:
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb70:	4604      	mov	r4, r0
 800cb72:	460d      	mov	r5, r1
 800cb74:	b976      	cbnz	r6, 800cb94 <_Balloc+0x28>
 800cb76:	2010      	movs	r0, #16
 800cb78:	f7ff ffe2 	bl	800cb40 <malloc>
 800cb7c:	4602      	mov	r2, r0
 800cb7e:	6260      	str	r0, [r4, #36]	; 0x24
 800cb80:	b920      	cbnz	r0, 800cb8c <_Balloc+0x20>
 800cb82:	4b18      	ldr	r3, [pc, #96]	; (800cbe4 <_Balloc+0x78>)
 800cb84:	4818      	ldr	r0, [pc, #96]	; (800cbe8 <_Balloc+0x7c>)
 800cb86:	2166      	movs	r1, #102	; 0x66
 800cb88:	f000 fd94 	bl	800d6b4 <__assert_func>
 800cb8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb90:	6006      	str	r6, [r0, #0]
 800cb92:	60c6      	str	r6, [r0, #12]
 800cb94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb96:	68f3      	ldr	r3, [r6, #12]
 800cb98:	b183      	cbz	r3, 800cbbc <_Balloc+0x50>
 800cb9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cba2:	b9b8      	cbnz	r0, 800cbd4 <_Balloc+0x68>
 800cba4:	2101      	movs	r1, #1
 800cba6:	fa01 f605 	lsl.w	r6, r1, r5
 800cbaa:	1d72      	adds	r2, r6, #5
 800cbac:	0092      	lsls	r2, r2, #2
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f000 fb5a 	bl	800d268 <_calloc_r>
 800cbb4:	b160      	cbz	r0, 800cbd0 <_Balloc+0x64>
 800cbb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbba:	e00e      	b.n	800cbda <_Balloc+0x6e>
 800cbbc:	2221      	movs	r2, #33	; 0x21
 800cbbe:	2104      	movs	r1, #4
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f000 fb51 	bl	800d268 <_calloc_r>
 800cbc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbc8:	60f0      	str	r0, [r6, #12]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1e4      	bne.n	800cb9a <_Balloc+0x2e>
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	bd70      	pop	{r4, r5, r6, pc}
 800cbd4:	6802      	ldr	r2, [r0, #0]
 800cbd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbe0:	e7f7      	b.n	800cbd2 <_Balloc+0x66>
 800cbe2:	bf00      	nop
 800cbe4:	0800f145 	.word	0x0800f145
 800cbe8:	0800f1cc 	.word	0x0800f1cc

0800cbec <_Bfree>:
 800cbec:	b570      	push	{r4, r5, r6, lr}
 800cbee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cbf0:	4605      	mov	r5, r0
 800cbf2:	460c      	mov	r4, r1
 800cbf4:	b976      	cbnz	r6, 800cc14 <_Bfree+0x28>
 800cbf6:	2010      	movs	r0, #16
 800cbf8:	f7ff ffa2 	bl	800cb40 <malloc>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	6268      	str	r0, [r5, #36]	; 0x24
 800cc00:	b920      	cbnz	r0, 800cc0c <_Bfree+0x20>
 800cc02:	4b09      	ldr	r3, [pc, #36]	; (800cc28 <_Bfree+0x3c>)
 800cc04:	4809      	ldr	r0, [pc, #36]	; (800cc2c <_Bfree+0x40>)
 800cc06:	218a      	movs	r1, #138	; 0x8a
 800cc08:	f000 fd54 	bl	800d6b4 <__assert_func>
 800cc0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc10:	6006      	str	r6, [r0, #0]
 800cc12:	60c6      	str	r6, [r0, #12]
 800cc14:	b13c      	cbz	r4, 800cc26 <_Bfree+0x3a>
 800cc16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cc18:	6862      	ldr	r2, [r4, #4]
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc20:	6021      	str	r1, [r4, #0]
 800cc22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc26:	bd70      	pop	{r4, r5, r6, pc}
 800cc28:	0800f145 	.word	0x0800f145
 800cc2c:	0800f1cc 	.word	0x0800f1cc

0800cc30 <__multadd>:
 800cc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc34:	690e      	ldr	r6, [r1, #16]
 800cc36:	4607      	mov	r7, r0
 800cc38:	4698      	mov	r8, r3
 800cc3a:	460c      	mov	r4, r1
 800cc3c:	f101 0014 	add.w	r0, r1, #20
 800cc40:	2300      	movs	r3, #0
 800cc42:	6805      	ldr	r5, [r0, #0]
 800cc44:	b2a9      	uxth	r1, r5
 800cc46:	fb02 8101 	mla	r1, r2, r1, r8
 800cc4a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cc4e:	0c2d      	lsrs	r5, r5, #16
 800cc50:	fb02 c505 	mla	r5, r2, r5, ip
 800cc54:	b289      	uxth	r1, r1
 800cc56:	3301      	adds	r3, #1
 800cc58:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cc5c:	429e      	cmp	r6, r3
 800cc5e:	f840 1b04 	str.w	r1, [r0], #4
 800cc62:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cc66:	dcec      	bgt.n	800cc42 <__multadd+0x12>
 800cc68:	f1b8 0f00 	cmp.w	r8, #0
 800cc6c:	d022      	beq.n	800ccb4 <__multadd+0x84>
 800cc6e:	68a3      	ldr	r3, [r4, #8]
 800cc70:	42b3      	cmp	r3, r6
 800cc72:	dc19      	bgt.n	800cca8 <__multadd+0x78>
 800cc74:	6861      	ldr	r1, [r4, #4]
 800cc76:	4638      	mov	r0, r7
 800cc78:	3101      	adds	r1, #1
 800cc7a:	f7ff ff77 	bl	800cb6c <_Balloc>
 800cc7e:	4605      	mov	r5, r0
 800cc80:	b928      	cbnz	r0, 800cc8e <__multadd+0x5e>
 800cc82:	4602      	mov	r2, r0
 800cc84:	4b0d      	ldr	r3, [pc, #52]	; (800ccbc <__multadd+0x8c>)
 800cc86:	480e      	ldr	r0, [pc, #56]	; (800ccc0 <__multadd+0x90>)
 800cc88:	21b5      	movs	r1, #181	; 0xb5
 800cc8a:	f000 fd13 	bl	800d6b4 <__assert_func>
 800cc8e:	6922      	ldr	r2, [r4, #16]
 800cc90:	3202      	adds	r2, #2
 800cc92:	f104 010c 	add.w	r1, r4, #12
 800cc96:	0092      	lsls	r2, r2, #2
 800cc98:	300c      	adds	r0, #12
 800cc9a:	f7ff ff59 	bl	800cb50 <memcpy>
 800cc9e:	4621      	mov	r1, r4
 800cca0:	4638      	mov	r0, r7
 800cca2:	f7ff ffa3 	bl	800cbec <_Bfree>
 800cca6:	462c      	mov	r4, r5
 800cca8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ccac:	3601      	adds	r6, #1
 800ccae:	f8c3 8014 	str.w	r8, [r3, #20]
 800ccb2:	6126      	str	r6, [r4, #16]
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccba:	bf00      	nop
 800ccbc:	0800f1bb 	.word	0x0800f1bb
 800ccc0:	0800f1cc 	.word	0x0800f1cc

0800ccc4 <__hi0bits>:
 800ccc4:	0c03      	lsrs	r3, r0, #16
 800ccc6:	041b      	lsls	r3, r3, #16
 800ccc8:	b9d3      	cbnz	r3, 800cd00 <__hi0bits+0x3c>
 800ccca:	0400      	lsls	r0, r0, #16
 800cccc:	2310      	movs	r3, #16
 800ccce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ccd2:	bf04      	itt	eq
 800ccd4:	0200      	lsleq	r0, r0, #8
 800ccd6:	3308      	addeq	r3, #8
 800ccd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ccdc:	bf04      	itt	eq
 800ccde:	0100      	lsleq	r0, r0, #4
 800cce0:	3304      	addeq	r3, #4
 800cce2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cce6:	bf04      	itt	eq
 800cce8:	0080      	lsleq	r0, r0, #2
 800ccea:	3302      	addeq	r3, #2
 800ccec:	2800      	cmp	r0, #0
 800ccee:	db05      	blt.n	800ccfc <__hi0bits+0x38>
 800ccf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ccf4:	f103 0301 	add.w	r3, r3, #1
 800ccf8:	bf08      	it	eq
 800ccfa:	2320      	moveq	r3, #32
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	4770      	bx	lr
 800cd00:	2300      	movs	r3, #0
 800cd02:	e7e4      	b.n	800ccce <__hi0bits+0xa>

0800cd04 <__lo0bits>:
 800cd04:	6803      	ldr	r3, [r0, #0]
 800cd06:	f013 0207 	ands.w	r2, r3, #7
 800cd0a:	4601      	mov	r1, r0
 800cd0c:	d00b      	beq.n	800cd26 <__lo0bits+0x22>
 800cd0e:	07da      	lsls	r2, r3, #31
 800cd10:	d424      	bmi.n	800cd5c <__lo0bits+0x58>
 800cd12:	0798      	lsls	r0, r3, #30
 800cd14:	bf49      	itett	mi
 800cd16:	085b      	lsrmi	r3, r3, #1
 800cd18:	089b      	lsrpl	r3, r3, #2
 800cd1a:	2001      	movmi	r0, #1
 800cd1c:	600b      	strmi	r3, [r1, #0]
 800cd1e:	bf5c      	itt	pl
 800cd20:	600b      	strpl	r3, [r1, #0]
 800cd22:	2002      	movpl	r0, #2
 800cd24:	4770      	bx	lr
 800cd26:	b298      	uxth	r0, r3
 800cd28:	b9b0      	cbnz	r0, 800cd58 <__lo0bits+0x54>
 800cd2a:	0c1b      	lsrs	r3, r3, #16
 800cd2c:	2010      	movs	r0, #16
 800cd2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cd32:	bf04      	itt	eq
 800cd34:	0a1b      	lsreq	r3, r3, #8
 800cd36:	3008      	addeq	r0, #8
 800cd38:	071a      	lsls	r2, r3, #28
 800cd3a:	bf04      	itt	eq
 800cd3c:	091b      	lsreq	r3, r3, #4
 800cd3e:	3004      	addeq	r0, #4
 800cd40:	079a      	lsls	r2, r3, #30
 800cd42:	bf04      	itt	eq
 800cd44:	089b      	lsreq	r3, r3, #2
 800cd46:	3002      	addeq	r0, #2
 800cd48:	07da      	lsls	r2, r3, #31
 800cd4a:	d403      	bmi.n	800cd54 <__lo0bits+0x50>
 800cd4c:	085b      	lsrs	r3, r3, #1
 800cd4e:	f100 0001 	add.w	r0, r0, #1
 800cd52:	d005      	beq.n	800cd60 <__lo0bits+0x5c>
 800cd54:	600b      	str	r3, [r1, #0]
 800cd56:	4770      	bx	lr
 800cd58:	4610      	mov	r0, r2
 800cd5a:	e7e8      	b.n	800cd2e <__lo0bits+0x2a>
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	4770      	bx	lr
 800cd60:	2020      	movs	r0, #32
 800cd62:	4770      	bx	lr

0800cd64 <__i2b>:
 800cd64:	b510      	push	{r4, lr}
 800cd66:	460c      	mov	r4, r1
 800cd68:	2101      	movs	r1, #1
 800cd6a:	f7ff feff 	bl	800cb6c <_Balloc>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	b928      	cbnz	r0, 800cd7e <__i2b+0x1a>
 800cd72:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <__i2b+0x24>)
 800cd74:	4805      	ldr	r0, [pc, #20]	; (800cd8c <__i2b+0x28>)
 800cd76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cd7a:	f000 fc9b 	bl	800d6b4 <__assert_func>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	6144      	str	r4, [r0, #20]
 800cd82:	6103      	str	r3, [r0, #16]
 800cd84:	bd10      	pop	{r4, pc}
 800cd86:	bf00      	nop
 800cd88:	0800f1bb 	.word	0x0800f1bb
 800cd8c:	0800f1cc 	.word	0x0800f1cc

0800cd90 <__multiply>:
 800cd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd94:	4614      	mov	r4, r2
 800cd96:	690a      	ldr	r2, [r1, #16]
 800cd98:	6923      	ldr	r3, [r4, #16]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	bfb8      	it	lt
 800cd9e:	460b      	movlt	r3, r1
 800cda0:	460d      	mov	r5, r1
 800cda2:	bfbc      	itt	lt
 800cda4:	4625      	movlt	r5, r4
 800cda6:	461c      	movlt	r4, r3
 800cda8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cdac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cdb0:	68ab      	ldr	r3, [r5, #8]
 800cdb2:	6869      	ldr	r1, [r5, #4]
 800cdb4:	eb0a 0709 	add.w	r7, sl, r9
 800cdb8:	42bb      	cmp	r3, r7
 800cdba:	b085      	sub	sp, #20
 800cdbc:	bfb8      	it	lt
 800cdbe:	3101      	addlt	r1, #1
 800cdc0:	f7ff fed4 	bl	800cb6c <_Balloc>
 800cdc4:	b930      	cbnz	r0, 800cdd4 <__multiply+0x44>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	4b42      	ldr	r3, [pc, #264]	; (800ced4 <__multiply+0x144>)
 800cdca:	4843      	ldr	r0, [pc, #268]	; (800ced8 <__multiply+0x148>)
 800cdcc:	f240 115d 	movw	r1, #349	; 0x15d
 800cdd0:	f000 fc70 	bl	800d6b4 <__assert_func>
 800cdd4:	f100 0614 	add.w	r6, r0, #20
 800cdd8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cddc:	4633      	mov	r3, r6
 800cdde:	2200      	movs	r2, #0
 800cde0:	4543      	cmp	r3, r8
 800cde2:	d31e      	bcc.n	800ce22 <__multiply+0x92>
 800cde4:	f105 0c14 	add.w	ip, r5, #20
 800cde8:	f104 0314 	add.w	r3, r4, #20
 800cdec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cdf0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cdf4:	9202      	str	r2, [sp, #8]
 800cdf6:	ebac 0205 	sub.w	r2, ip, r5
 800cdfa:	3a15      	subs	r2, #21
 800cdfc:	f022 0203 	bic.w	r2, r2, #3
 800ce00:	3204      	adds	r2, #4
 800ce02:	f105 0115 	add.w	r1, r5, #21
 800ce06:	458c      	cmp	ip, r1
 800ce08:	bf38      	it	cc
 800ce0a:	2204      	movcc	r2, #4
 800ce0c:	9201      	str	r2, [sp, #4]
 800ce0e:	9a02      	ldr	r2, [sp, #8]
 800ce10:	9303      	str	r3, [sp, #12]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d808      	bhi.n	800ce28 <__multiply+0x98>
 800ce16:	2f00      	cmp	r7, #0
 800ce18:	dc55      	bgt.n	800cec6 <__multiply+0x136>
 800ce1a:	6107      	str	r7, [r0, #16]
 800ce1c:	b005      	add	sp, #20
 800ce1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce22:	f843 2b04 	str.w	r2, [r3], #4
 800ce26:	e7db      	b.n	800cde0 <__multiply+0x50>
 800ce28:	f8b3 a000 	ldrh.w	sl, [r3]
 800ce2c:	f1ba 0f00 	cmp.w	sl, #0
 800ce30:	d020      	beq.n	800ce74 <__multiply+0xe4>
 800ce32:	f105 0e14 	add.w	lr, r5, #20
 800ce36:	46b1      	mov	r9, r6
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ce3e:	f8d9 b000 	ldr.w	fp, [r9]
 800ce42:	b2a1      	uxth	r1, r4
 800ce44:	fa1f fb8b 	uxth.w	fp, fp
 800ce48:	fb0a b101 	mla	r1, sl, r1, fp
 800ce4c:	4411      	add	r1, r2
 800ce4e:	f8d9 2000 	ldr.w	r2, [r9]
 800ce52:	0c24      	lsrs	r4, r4, #16
 800ce54:	0c12      	lsrs	r2, r2, #16
 800ce56:	fb0a 2404 	mla	r4, sl, r4, r2
 800ce5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ce5e:	b289      	uxth	r1, r1
 800ce60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ce64:	45f4      	cmp	ip, lr
 800ce66:	f849 1b04 	str.w	r1, [r9], #4
 800ce6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ce6e:	d8e4      	bhi.n	800ce3a <__multiply+0xaa>
 800ce70:	9901      	ldr	r1, [sp, #4]
 800ce72:	5072      	str	r2, [r6, r1]
 800ce74:	9a03      	ldr	r2, [sp, #12]
 800ce76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce7a:	3304      	adds	r3, #4
 800ce7c:	f1b9 0f00 	cmp.w	r9, #0
 800ce80:	d01f      	beq.n	800cec2 <__multiply+0x132>
 800ce82:	6834      	ldr	r4, [r6, #0]
 800ce84:	f105 0114 	add.w	r1, r5, #20
 800ce88:	46b6      	mov	lr, r6
 800ce8a:	f04f 0a00 	mov.w	sl, #0
 800ce8e:	880a      	ldrh	r2, [r1, #0]
 800ce90:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ce94:	fb09 b202 	mla	r2, r9, r2, fp
 800ce98:	4492      	add	sl, r2
 800ce9a:	b2a4      	uxth	r4, r4
 800ce9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cea0:	f84e 4b04 	str.w	r4, [lr], #4
 800cea4:	f851 4b04 	ldr.w	r4, [r1], #4
 800cea8:	f8be 2000 	ldrh.w	r2, [lr]
 800ceac:	0c24      	lsrs	r4, r4, #16
 800ceae:	fb09 2404 	mla	r4, r9, r4, r2
 800ceb2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ceb6:	458c      	cmp	ip, r1
 800ceb8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cebc:	d8e7      	bhi.n	800ce8e <__multiply+0xfe>
 800cebe:	9a01      	ldr	r2, [sp, #4]
 800cec0:	50b4      	str	r4, [r6, r2]
 800cec2:	3604      	adds	r6, #4
 800cec4:	e7a3      	b.n	800ce0e <__multiply+0x7e>
 800cec6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d1a5      	bne.n	800ce1a <__multiply+0x8a>
 800cece:	3f01      	subs	r7, #1
 800ced0:	e7a1      	b.n	800ce16 <__multiply+0x86>
 800ced2:	bf00      	nop
 800ced4:	0800f1bb 	.word	0x0800f1bb
 800ced8:	0800f1cc 	.word	0x0800f1cc

0800cedc <__pow5mult>:
 800cedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cee0:	4615      	mov	r5, r2
 800cee2:	f012 0203 	ands.w	r2, r2, #3
 800cee6:	4606      	mov	r6, r0
 800cee8:	460f      	mov	r7, r1
 800ceea:	d007      	beq.n	800cefc <__pow5mult+0x20>
 800ceec:	4c25      	ldr	r4, [pc, #148]	; (800cf84 <__pow5mult+0xa8>)
 800ceee:	3a01      	subs	r2, #1
 800cef0:	2300      	movs	r3, #0
 800cef2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cef6:	f7ff fe9b 	bl	800cc30 <__multadd>
 800cefa:	4607      	mov	r7, r0
 800cefc:	10ad      	asrs	r5, r5, #2
 800cefe:	d03d      	beq.n	800cf7c <__pow5mult+0xa0>
 800cf00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf02:	b97c      	cbnz	r4, 800cf24 <__pow5mult+0x48>
 800cf04:	2010      	movs	r0, #16
 800cf06:	f7ff fe1b 	bl	800cb40 <malloc>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	6270      	str	r0, [r6, #36]	; 0x24
 800cf0e:	b928      	cbnz	r0, 800cf1c <__pow5mult+0x40>
 800cf10:	4b1d      	ldr	r3, [pc, #116]	; (800cf88 <__pow5mult+0xac>)
 800cf12:	481e      	ldr	r0, [pc, #120]	; (800cf8c <__pow5mult+0xb0>)
 800cf14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cf18:	f000 fbcc 	bl	800d6b4 <__assert_func>
 800cf1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf20:	6004      	str	r4, [r0, #0]
 800cf22:	60c4      	str	r4, [r0, #12]
 800cf24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cf28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf2c:	b94c      	cbnz	r4, 800cf42 <__pow5mult+0x66>
 800cf2e:	f240 2171 	movw	r1, #625	; 0x271
 800cf32:	4630      	mov	r0, r6
 800cf34:	f7ff ff16 	bl	800cd64 <__i2b>
 800cf38:	2300      	movs	r3, #0
 800cf3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf3e:	4604      	mov	r4, r0
 800cf40:	6003      	str	r3, [r0, #0]
 800cf42:	f04f 0900 	mov.w	r9, #0
 800cf46:	07eb      	lsls	r3, r5, #31
 800cf48:	d50a      	bpl.n	800cf60 <__pow5mult+0x84>
 800cf4a:	4639      	mov	r1, r7
 800cf4c:	4622      	mov	r2, r4
 800cf4e:	4630      	mov	r0, r6
 800cf50:	f7ff ff1e 	bl	800cd90 <__multiply>
 800cf54:	4639      	mov	r1, r7
 800cf56:	4680      	mov	r8, r0
 800cf58:	4630      	mov	r0, r6
 800cf5a:	f7ff fe47 	bl	800cbec <_Bfree>
 800cf5e:	4647      	mov	r7, r8
 800cf60:	106d      	asrs	r5, r5, #1
 800cf62:	d00b      	beq.n	800cf7c <__pow5mult+0xa0>
 800cf64:	6820      	ldr	r0, [r4, #0]
 800cf66:	b938      	cbnz	r0, 800cf78 <__pow5mult+0x9c>
 800cf68:	4622      	mov	r2, r4
 800cf6a:	4621      	mov	r1, r4
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	f7ff ff0f 	bl	800cd90 <__multiply>
 800cf72:	6020      	str	r0, [r4, #0]
 800cf74:	f8c0 9000 	str.w	r9, [r0]
 800cf78:	4604      	mov	r4, r0
 800cf7a:	e7e4      	b.n	800cf46 <__pow5mult+0x6a>
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf82:	bf00      	nop
 800cf84:	0800f320 	.word	0x0800f320
 800cf88:	0800f145 	.word	0x0800f145
 800cf8c:	0800f1cc 	.word	0x0800f1cc

0800cf90 <__lshift>:
 800cf90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf94:	460c      	mov	r4, r1
 800cf96:	6849      	ldr	r1, [r1, #4]
 800cf98:	6923      	ldr	r3, [r4, #16]
 800cf9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf9e:	68a3      	ldr	r3, [r4, #8]
 800cfa0:	4607      	mov	r7, r0
 800cfa2:	4691      	mov	r9, r2
 800cfa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfa8:	f108 0601 	add.w	r6, r8, #1
 800cfac:	42b3      	cmp	r3, r6
 800cfae:	db0b      	blt.n	800cfc8 <__lshift+0x38>
 800cfb0:	4638      	mov	r0, r7
 800cfb2:	f7ff fddb 	bl	800cb6c <_Balloc>
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	b948      	cbnz	r0, 800cfce <__lshift+0x3e>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	4b28      	ldr	r3, [pc, #160]	; (800d060 <__lshift+0xd0>)
 800cfbe:	4829      	ldr	r0, [pc, #164]	; (800d064 <__lshift+0xd4>)
 800cfc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cfc4:	f000 fb76 	bl	800d6b4 <__assert_func>
 800cfc8:	3101      	adds	r1, #1
 800cfca:	005b      	lsls	r3, r3, #1
 800cfcc:	e7ee      	b.n	800cfac <__lshift+0x1c>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	f100 0114 	add.w	r1, r0, #20
 800cfd4:	f100 0210 	add.w	r2, r0, #16
 800cfd8:	4618      	mov	r0, r3
 800cfda:	4553      	cmp	r3, sl
 800cfdc:	db33      	blt.n	800d046 <__lshift+0xb6>
 800cfde:	6920      	ldr	r0, [r4, #16]
 800cfe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfe4:	f104 0314 	add.w	r3, r4, #20
 800cfe8:	f019 091f 	ands.w	r9, r9, #31
 800cfec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cff0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cff4:	d02b      	beq.n	800d04e <__lshift+0xbe>
 800cff6:	f1c9 0e20 	rsb	lr, r9, #32
 800cffa:	468a      	mov	sl, r1
 800cffc:	2200      	movs	r2, #0
 800cffe:	6818      	ldr	r0, [r3, #0]
 800d000:	fa00 f009 	lsl.w	r0, r0, r9
 800d004:	4302      	orrs	r2, r0
 800d006:	f84a 2b04 	str.w	r2, [sl], #4
 800d00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d00e:	459c      	cmp	ip, r3
 800d010:	fa22 f20e 	lsr.w	r2, r2, lr
 800d014:	d8f3      	bhi.n	800cffe <__lshift+0x6e>
 800d016:	ebac 0304 	sub.w	r3, ip, r4
 800d01a:	3b15      	subs	r3, #21
 800d01c:	f023 0303 	bic.w	r3, r3, #3
 800d020:	3304      	adds	r3, #4
 800d022:	f104 0015 	add.w	r0, r4, #21
 800d026:	4584      	cmp	ip, r0
 800d028:	bf38      	it	cc
 800d02a:	2304      	movcc	r3, #4
 800d02c:	50ca      	str	r2, [r1, r3]
 800d02e:	b10a      	cbz	r2, 800d034 <__lshift+0xa4>
 800d030:	f108 0602 	add.w	r6, r8, #2
 800d034:	3e01      	subs	r6, #1
 800d036:	4638      	mov	r0, r7
 800d038:	612e      	str	r6, [r5, #16]
 800d03a:	4621      	mov	r1, r4
 800d03c:	f7ff fdd6 	bl	800cbec <_Bfree>
 800d040:	4628      	mov	r0, r5
 800d042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d046:	f842 0f04 	str.w	r0, [r2, #4]!
 800d04a:	3301      	adds	r3, #1
 800d04c:	e7c5      	b.n	800cfda <__lshift+0x4a>
 800d04e:	3904      	subs	r1, #4
 800d050:	f853 2b04 	ldr.w	r2, [r3], #4
 800d054:	f841 2f04 	str.w	r2, [r1, #4]!
 800d058:	459c      	cmp	ip, r3
 800d05a:	d8f9      	bhi.n	800d050 <__lshift+0xc0>
 800d05c:	e7ea      	b.n	800d034 <__lshift+0xa4>
 800d05e:	bf00      	nop
 800d060:	0800f1bb 	.word	0x0800f1bb
 800d064:	0800f1cc 	.word	0x0800f1cc

0800d068 <__mcmp>:
 800d068:	b530      	push	{r4, r5, lr}
 800d06a:	6902      	ldr	r2, [r0, #16]
 800d06c:	690c      	ldr	r4, [r1, #16]
 800d06e:	1b12      	subs	r2, r2, r4
 800d070:	d10e      	bne.n	800d090 <__mcmp+0x28>
 800d072:	f100 0314 	add.w	r3, r0, #20
 800d076:	3114      	adds	r1, #20
 800d078:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d07c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d080:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d084:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d088:	42a5      	cmp	r5, r4
 800d08a:	d003      	beq.n	800d094 <__mcmp+0x2c>
 800d08c:	d305      	bcc.n	800d09a <__mcmp+0x32>
 800d08e:	2201      	movs	r2, #1
 800d090:	4610      	mov	r0, r2
 800d092:	bd30      	pop	{r4, r5, pc}
 800d094:	4283      	cmp	r3, r0
 800d096:	d3f3      	bcc.n	800d080 <__mcmp+0x18>
 800d098:	e7fa      	b.n	800d090 <__mcmp+0x28>
 800d09a:	f04f 32ff 	mov.w	r2, #4294967295
 800d09e:	e7f7      	b.n	800d090 <__mcmp+0x28>

0800d0a0 <__mdiff>:
 800d0a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a4:	460c      	mov	r4, r1
 800d0a6:	4606      	mov	r6, r0
 800d0a8:	4611      	mov	r1, r2
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	4617      	mov	r7, r2
 800d0ae:	f7ff ffdb 	bl	800d068 <__mcmp>
 800d0b2:	1e05      	subs	r5, r0, #0
 800d0b4:	d110      	bne.n	800d0d8 <__mdiff+0x38>
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	f7ff fd57 	bl	800cb6c <_Balloc>
 800d0be:	b930      	cbnz	r0, 800d0ce <__mdiff+0x2e>
 800d0c0:	4b39      	ldr	r3, [pc, #228]	; (800d1a8 <__mdiff+0x108>)
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	f240 2132 	movw	r1, #562	; 0x232
 800d0c8:	4838      	ldr	r0, [pc, #224]	; (800d1ac <__mdiff+0x10c>)
 800d0ca:	f000 faf3 	bl	800d6b4 <__assert_func>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d8:	bfa4      	itt	ge
 800d0da:	463b      	movge	r3, r7
 800d0dc:	4627      	movge	r7, r4
 800d0de:	4630      	mov	r0, r6
 800d0e0:	6879      	ldr	r1, [r7, #4]
 800d0e2:	bfa6      	itte	ge
 800d0e4:	461c      	movge	r4, r3
 800d0e6:	2500      	movge	r5, #0
 800d0e8:	2501      	movlt	r5, #1
 800d0ea:	f7ff fd3f 	bl	800cb6c <_Balloc>
 800d0ee:	b920      	cbnz	r0, 800d0fa <__mdiff+0x5a>
 800d0f0:	4b2d      	ldr	r3, [pc, #180]	; (800d1a8 <__mdiff+0x108>)
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d0f8:	e7e6      	b.n	800d0c8 <__mdiff+0x28>
 800d0fa:	693e      	ldr	r6, [r7, #16]
 800d0fc:	60c5      	str	r5, [r0, #12]
 800d0fe:	6925      	ldr	r5, [r4, #16]
 800d100:	f107 0114 	add.w	r1, r7, #20
 800d104:	f104 0914 	add.w	r9, r4, #20
 800d108:	f100 0e14 	add.w	lr, r0, #20
 800d10c:	f107 0210 	add.w	r2, r7, #16
 800d110:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d114:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d118:	46f2      	mov	sl, lr
 800d11a:	2700      	movs	r7, #0
 800d11c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d120:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d124:	fa1f f883 	uxth.w	r8, r3
 800d128:	fa17 f78b 	uxtah	r7, r7, fp
 800d12c:	0c1b      	lsrs	r3, r3, #16
 800d12e:	eba7 0808 	sub.w	r8, r7, r8
 800d132:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d136:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d13a:	fa1f f888 	uxth.w	r8, r8
 800d13e:	141f      	asrs	r7, r3, #16
 800d140:	454d      	cmp	r5, r9
 800d142:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d146:	f84a 3b04 	str.w	r3, [sl], #4
 800d14a:	d8e7      	bhi.n	800d11c <__mdiff+0x7c>
 800d14c:	1b2b      	subs	r3, r5, r4
 800d14e:	3b15      	subs	r3, #21
 800d150:	f023 0303 	bic.w	r3, r3, #3
 800d154:	3304      	adds	r3, #4
 800d156:	3415      	adds	r4, #21
 800d158:	42a5      	cmp	r5, r4
 800d15a:	bf38      	it	cc
 800d15c:	2304      	movcc	r3, #4
 800d15e:	4419      	add	r1, r3
 800d160:	4473      	add	r3, lr
 800d162:	469e      	mov	lr, r3
 800d164:	460d      	mov	r5, r1
 800d166:	4565      	cmp	r5, ip
 800d168:	d30e      	bcc.n	800d188 <__mdiff+0xe8>
 800d16a:	f10c 0203 	add.w	r2, ip, #3
 800d16e:	1a52      	subs	r2, r2, r1
 800d170:	f022 0203 	bic.w	r2, r2, #3
 800d174:	3903      	subs	r1, #3
 800d176:	458c      	cmp	ip, r1
 800d178:	bf38      	it	cc
 800d17a:	2200      	movcc	r2, #0
 800d17c:	441a      	add	r2, r3
 800d17e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d182:	b17b      	cbz	r3, 800d1a4 <__mdiff+0x104>
 800d184:	6106      	str	r6, [r0, #16]
 800d186:	e7a5      	b.n	800d0d4 <__mdiff+0x34>
 800d188:	f855 8b04 	ldr.w	r8, [r5], #4
 800d18c:	fa17 f488 	uxtah	r4, r7, r8
 800d190:	1422      	asrs	r2, r4, #16
 800d192:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d196:	b2a4      	uxth	r4, r4
 800d198:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d19c:	f84e 4b04 	str.w	r4, [lr], #4
 800d1a0:	1417      	asrs	r7, r2, #16
 800d1a2:	e7e0      	b.n	800d166 <__mdiff+0xc6>
 800d1a4:	3e01      	subs	r6, #1
 800d1a6:	e7ea      	b.n	800d17e <__mdiff+0xde>
 800d1a8:	0800f1bb 	.word	0x0800f1bb
 800d1ac:	0800f1cc 	.word	0x0800f1cc

0800d1b0 <__d2b>:
 800d1b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1b4:	4689      	mov	r9, r1
 800d1b6:	2101      	movs	r1, #1
 800d1b8:	ec57 6b10 	vmov	r6, r7, d0
 800d1bc:	4690      	mov	r8, r2
 800d1be:	f7ff fcd5 	bl	800cb6c <_Balloc>
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	b930      	cbnz	r0, 800d1d4 <__d2b+0x24>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	4b25      	ldr	r3, [pc, #148]	; (800d260 <__d2b+0xb0>)
 800d1ca:	4826      	ldr	r0, [pc, #152]	; (800d264 <__d2b+0xb4>)
 800d1cc:	f240 310a 	movw	r1, #778	; 0x30a
 800d1d0:	f000 fa70 	bl	800d6b4 <__assert_func>
 800d1d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d1d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d1dc:	bb35      	cbnz	r5, 800d22c <__d2b+0x7c>
 800d1de:	2e00      	cmp	r6, #0
 800d1e0:	9301      	str	r3, [sp, #4]
 800d1e2:	d028      	beq.n	800d236 <__d2b+0x86>
 800d1e4:	4668      	mov	r0, sp
 800d1e6:	9600      	str	r6, [sp, #0]
 800d1e8:	f7ff fd8c 	bl	800cd04 <__lo0bits>
 800d1ec:	9900      	ldr	r1, [sp, #0]
 800d1ee:	b300      	cbz	r0, 800d232 <__d2b+0x82>
 800d1f0:	9a01      	ldr	r2, [sp, #4]
 800d1f2:	f1c0 0320 	rsb	r3, r0, #32
 800d1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1fa:	430b      	orrs	r3, r1
 800d1fc:	40c2      	lsrs	r2, r0
 800d1fe:	6163      	str	r3, [r4, #20]
 800d200:	9201      	str	r2, [sp, #4]
 800d202:	9b01      	ldr	r3, [sp, #4]
 800d204:	61a3      	str	r3, [r4, #24]
 800d206:	2b00      	cmp	r3, #0
 800d208:	bf14      	ite	ne
 800d20a:	2202      	movne	r2, #2
 800d20c:	2201      	moveq	r2, #1
 800d20e:	6122      	str	r2, [r4, #16]
 800d210:	b1d5      	cbz	r5, 800d248 <__d2b+0x98>
 800d212:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d216:	4405      	add	r5, r0
 800d218:	f8c9 5000 	str.w	r5, [r9]
 800d21c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d220:	f8c8 0000 	str.w	r0, [r8]
 800d224:	4620      	mov	r0, r4
 800d226:	b003      	add	sp, #12
 800d228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d22c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d230:	e7d5      	b.n	800d1de <__d2b+0x2e>
 800d232:	6161      	str	r1, [r4, #20]
 800d234:	e7e5      	b.n	800d202 <__d2b+0x52>
 800d236:	a801      	add	r0, sp, #4
 800d238:	f7ff fd64 	bl	800cd04 <__lo0bits>
 800d23c:	9b01      	ldr	r3, [sp, #4]
 800d23e:	6163      	str	r3, [r4, #20]
 800d240:	2201      	movs	r2, #1
 800d242:	6122      	str	r2, [r4, #16]
 800d244:	3020      	adds	r0, #32
 800d246:	e7e3      	b.n	800d210 <__d2b+0x60>
 800d248:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d24c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d250:	f8c9 0000 	str.w	r0, [r9]
 800d254:	6918      	ldr	r0, [r3, #16]
 800d256:	f7ff fd35 	bl	800ccc4 <__hi0bits>
 800d25a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d25e:	e7df      	b.n	800d220 <__d2b+0x70>
 800d260:	0800f1bb 	.word	0x0800f1bb
 800d264:	0800f1cc 	.word	0x0800f1cc

0800d268 <_calloc_r>:
 800d268:	b513      	push	{r0, r1, r4, lr}
 800d26a:	434a      	muls	r2, r1
 800d26c:	4611      	mov	r1, r2
 800d26e:	9201      	str	r2, [sp, #4]
 800d270:	f000 f85a 	bl	800d328 <_malloc_r>
 800d274:	4604      	mov	r4, r0
 800d276:	b118      	cbz	r0, 800d280 <_calloc_r+0x18>
 800d278:	9a01      	ldr	r2, [sp, #4]
 800d27a:	2100      	movs	r1, #0
 800d27c:	f7fe f950 	bl	800b520 <memset>
 800d280:	4620      	mov	r0, r4
 800d282:	b002      	add	sp, #8
 800d284:	bd10      	pop	{r4, pc}
	...

0800d288 <_free_r>:
 800d288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d28a:	2900      	cmp	r1, #0
 800d28c:	d048      	beq.n	800d320 <_free_r+0x98>
 800d28e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d292:	9001      	str	r0, [sp, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	f1a1 0404 	sub.w	r4, r1, #4
 800d29a:	bfb8      	it	lt
 800d29c:	18e4      	addlt	r4, r4, r3
 800d29e:	f000 fa65 	bl	800d76c <__malloc_lock>
 800d2a2:	4a20      	ldr	r2, [pc, #128]	; (800d324 <_free_r+0x9c>)
 800d2a4:	9801      	ldr	r0, [sp, #4]
 800d2a6:	6813      	ldr	r3, [r2, #0]
 800d2a8:	4615      	mov	r5, r2
 800d2aa:	b933      	cbnz	r3, 800d2ba <_free_r+0x32>
 800d2ac:	6063      	str	r3, [r4, #4]
 800d2ae:	6014      	str	r4, [r2, #0]
 800d2b0:	b003      	add	sp, #12
 800d2b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2b6:	f000 ba5f 	b.w	800d778 <__malloc_unlock>
 800d2ba:	42a3      	cmp	r3, r4
 800d2bc:	d90b      	bls.n	800d2d6 <_free_r+0x4e>
 800d2be:	6821      	ldr	r1, [r4, #0]
 800d2c0:	1862      	adds	r2, r4, r1
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	bf04      	itt	eq
 800d2c6:	681a      	ldreq	r2, [r3, #0]
 800d2c8:	685b      	ldreq	r3, [r3, #4]
 800d2ca:	6063      	str	r3, [r4, #4]
 800d2cc:	bf04      	itt	eq
 800d2ce:	1852      	addeq	r2, r2, r1
 800d2d0:	6022      	streq	r2, [r4, #0]
 800d2d2:	602c      	str	r4, [r5, #0]
 800d2d4:	e7ec      	b.n	800d2b0 <_free_r+0x28>
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	b10b      	cbz	r3, 800d2e0 <_free_r+0x58>
 800d2dc:	42a3      	cmp	r3, r4
 800d2de:	d9fa      	bls.n	800d2d6 <_free_r+0x4e>
 800d2e0:	6811      	ldr	r1, [r2, #0]
 800d2e2:	1855      	adds	r5, r2, r1
 800d2e4:	42a5      	cmp	r5, r4
 800d2e6:	d10b      	bne.n	800d300 <_free_r+0x78>
 800d2e8:	6824      	ldr	r4, [r4, #0]
 800d2ea:	4421      	add	r1, r4
 800d2ec:	1854      	adds	r4, r2, r1
 800d2ee:	42a3      	cmp	r3, r4
 800d2f0:	6011      	str	r1, [r2, #0]
 800d2f2:	d1dd      	bne.n	800d2b0 <_free_r+0x28>
 800d2f4:	681c      	ldr	r4, [r3, #0]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	6053      	str	r3, [r2, #4]
 800d2fa:	4421      	add	r1, r4
 800d2fc:	6011      	str	r1, [r2, #0]
 800d2fe:	e7d7      	b.n	800d2b0 <_free_r+0x28>
 800d300:	d902      	bls.n	800d308 <_free_r+0x80>
 800d302:	230c      	movs	r3, #12
 800d304:	6003      	str	r3, [r0, #0]
 800d306:	e7d3      	b.n	800d2b0 <_free_r+0x28>
 800d308:	6825      	ldr	r5, [r4, #0]
 800d30a:	1961      	adds	r1, r4, r5
 800d30c:	428b      	cmp	r3, r1
 800d30e:	bf04      	itt	eq
 800d310:	6819      	ldreq	r1, [r3, #0]
 800d312:	685b      	ldreq	r3, [r3, #4]
 800d314:	6063      	str	r3, [r4, #4]
 800d316:	bf04      	itt	eq
 800d318:	1949      	addeq	r1, r1, r5
 800d31a:	6021      	streq	r1, [r4, #0]
 800d31c:	6054      	str	r4, [r2, #4]
 800d31e:	e7c7      	b.n	800d2b0 <_free_r+0x28>
 800d320:	b003      	add	sp, #12
 800d322:	bd30      	pop	{r4, r5, pc}
 800d324:	200006dc 	.word	0x200006dc

0800d328 <_malloc_r>:
 800d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32a:	1ccd      	adds	r5, r1, #3
 800d32c:	f025 0503 	bic.w	r5, r5, #3
 800d330:	3508      	adds	r5, #8
 800d332:	2d0c      	cmp	r5, #12
 800d334:	bf38      	it	cc
 800d336:	250c      	movcc	r5, #12
 800d338:	2d00      	cmp	r5, #0
 800d33a:	4606      	mov	r6, r0
 800d33c:	db01      	blt.n	800d342 <_malloc_r+0x1a>
 800d33e:	42a9      	cmp	r1, r5
 800d340:	d903      	bls.n	800d34a <_malloc_r+0x22>
 800d342:	230c      	movs	r3, #12
 800d344:	6033      	str	r3, [r6, #0]
 800d346:	2000      	movs	r0, #0
 800d348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d34a:	f000 fa0f 	bl	800d76c <__malloc_lock>
 800d34e:	4921      	ldr	r1, [pc, #132]	; (800d3d4 <_malloc_r+0xac>)
 800d350:	680a      	ldr	r2, [r1, #0]
 800d352:	4614      	mov	r4, r2
 800d354:	b99c      	cbnz	r4, 800d37e <_malloc_r+0x56>
 800d356:	4f20      	ldr	r7, [pc, #128]	; (800d3d8 <_malloc_r+0xb0>)
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	b923      	cbnz	r3, 800d366 <_malloc_r+0x3e>
 800d35c:	4621      	mov	r1, r4
 800d35e:	4630      	mov	r0, r6
 800d360:	f000 f998 	bl	800d694 <_sbrk_r>
 800d364:	6038      	str	r0, [r7, #0]
 800d366:	4629      	mov	r1, r5
 800d368:	4630      	mov	r0, r6
 800d36a:	f000 f993 	bl	800d694 <_sbrk_r>
 800d36e:	1c43      	adds	r3, r0, #1
 800d370:	d123      	bne.n	800d3ba <_malloc_r+0x92>
 800d372:	230c      	movs	r3, #12
 800d374:	6033      	str	r3, [r6, #0]
 800d376:	4630      	mov	r0, r6
 800d378:	f000 f9fe 	bl	800d778 <__malloc_unlock>
 800d37c:	e7e3      	b.n	800d346 <_malloc_r+0x1e>
 800d37e:	6823      	ldr	r3, [r4, #0]
 800d380:	1b5b      	subs	r3, r3, r5
 800d382:	d417      	bmi.n	800d3b4 <_malloc_r+0x8c>
 800d384:	2b0b      	cmp	r3, #11
 800d386:	d903      	bls.n	800d390 <_malloc_r+0x68>
 800d388:	6023      	str	r3, [r4, #0]
 800d38a:	441c      	add	r4, r3
 800d38c:	6025      	str	r5, [r4, #0]
 800d38e:	e004      	b.n	800d39a <_malloc_r+0x72>
 800d390:	6863      	ldr	r3, [r4, #4]
 800d392:	42a2      	cmp	r2, r4
 800d394:	bf0c      	ite	eq
 800d396:	600b      	streq	r3, [r1, #0]
 800d398:	6053      	strne	r3, [r2, #4]
 800d39a:	4630      	mov	r0, r6
 800d39c:	f000 f9ec 	bl	800d778 <__malloc_unlock>
 800d3a0:	f104 000b 	add.w	r0, r4, #11
 800d3a4:	1d23      	adds	r3, r4, #4
 800d3a6:	f020 0007 	bic.w	r0, r0, #7
 800d3aa:	1ac2      	subs	r2, r0, r3
 800d3ac:	d0cc      	beq.n	800d348 <_malloc_r+0x20>
 800d3ae:	1a1b      	subs	r3, r3, r0
 800d3b0:	50a3      	str	r3, [r4, r2]
 800d3b2:	e7c9      	b.n	800d348 <_malloc_r+0x20>
 800d3b4:	4622      	mov	r2, r4
 800d3b6:	6864      	ldr	r4, [r4, #4]
 800d3b8:	e7cc      	b.n	800d354 <_malloc_r+0x2c>
 800d3ba:	1cc4      	adds	r4, r0, #3
 800d3bc:	f024 0403 	bic.w	r4, r4, #3
 800d3c0:	42a0      	cmp	r0, r4
 800d3c2:	d0e3      	beq.n	800d38c <_malloc_r+0x64>
 800d3c4:	1a21      	subs	r1, r4, r0
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	f000 f964 	bl	800d694 <_sbrk_r>
 800d3cc:	3001      	adds	r0, #1
 800d3ce:	d1dd      	bne.n	800d38c <_malloc_r+0x64>
 800d3d0:	e7cf      	b.n	800d372 <_malloc_r+0x4a>
 800d3d2:	bf00      	nop
 800d3d4:	200006dc 	.word	0x200006dc
 800d3d8:	200006e0 	.word	0x200006e0

0800d3dc <__ssputs_r>:
 800d3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3e0:	688e      	ldr	r6, [r1, #8]
 800d3e2:	429e      	cmp	r6, r3
 800d3e4:	4682      	mov	sl, r0
 800d3e6:	460c      	mov	r4, r1
 800d3e8:	4690      	mov	r8, r2
 800d3ea:	461f      	mov	r7, r3
 800d3ec:	d838      	bhi.n	800d460 <__ssputs_r+0x84>
 800d3ee:	898a      	ldrh	r2, [r1, #12]
 800d3f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3f4:	d032      	beq.n	800d45c <__ssputs_r+0x80>
 800d3f6:	6825      	ldr	r5, [r4, #0]
 800d3f8:	6909      	ldr	r1, [r1, #16]
 800d3fa:	eba5 0901 	sub.w	r9, r5, r1
 800d3fe:	6965      	ldr	r5, [r4, #20]
 800d400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d404:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d408:	3301      	adds	r3, #1
 800d40a:	444b      	add	r3, r9
 800d40c:	106d      	asrs	r5, r5, #1
 800d40e:	429d      	cmp	r5, r3
 800d410:	bf38      	it	cc
 800d412:	461d      	movcc	r5, r3
 800d414:	0553      	lsls	r3, r2, #21
 800d416:	d531      	bpl.n	800d47c <__ssputs_r+0xa0>
 800d418:	4629      	mov	r1, r5
 800d41a:	f7ff ff85 	bl	800d328 <_malloc_r>
 800d41e:	4606      	mov	r6, r0
 800d420:	b950      	cbnz	r0, 800d438 <__ssputs_r+0x5c>
 800d422:	230c      	movs	r3, #12
 800d424:	f8ca 3000 	str.w	r3, [sl]
 800d428:	89a3      	ldrh	r3, [r4, #12]
 800d42a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d42e:	81a3      	strh	r3, [r4, #12]
 800d430:	f04f 30ff 	mov.w	r0, #4294967295
 800d434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d438:	6921      	ldr	r1, [r4, #16]
 800d43a:	464a      	mov	r2, r9
 800d43c:	f7ff fb88 	bl	800cb50 <memcpy>
 800d440:	89a3      	ldrh	r3, [r4, #12]
 800d442:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d44a:	81a3      	strh	r3, [r4, #12]
 800d44c:	6126      	str	r6, [r4, #16]
 800d44e:	6165      	str	r5, [r4, #20]
 800d450:	444e      	add	r6, r9
 800d452:	eba5 0509 	sub.w	r5, r5, r9
 800d456:	6026      	str	r6, [r4, #0]
 800d458:	60a5      	str	r5, [r4, #8]
 800d45a:	463e      	mov	r6, r7
 800d45c:	42be      	cmp	r6, r7
 800d45e:	d900      	bls.n	800d462 <__ssputs_r+0x86>
 800d460:	463e      	mov	r6, r7
 800d462:	4632      	mov	r2, r6
 800d464:	6820      	ldr	r0, [r4, #0]
 800d466:	4641      	mov	r1, r8
 800d468:	f000 f966 	bl	800d738 <memmove>
 800d46c:	68a3      	ldr	r3, [r4, #8]
 800d46e:	6822      	ldr	r2, [r4, #0]
 800d470:	1b9b      	subs	r3, r3, r6
 800d472:	4432      	add	r2, r6
 800d474:	60a3      	str	r3, [r4, #8]
 800d476:	6022      	str	r2, [r4, #0]
 800d478:	2000      	movs	r0, #0
 800d47a:	e7db      	b.n	800d434 <__ssputs_r+0x58>
 800d47c:	462a      	mov	r2, r5
 800d47e:	f000 f981 	bl	800d784 <_realloc_r>
 800d482:	4606      	mov	r6, r0
 800d484:	2800      	cmp	r0, #0
 800d486:	d1e1      	bne.n	800d44c <__ssputs_r+0x70>
 800d488:	6921      	ldr	r1, [r4, #16]
 800d48a:	4650      	mov	r0, sl
 800d48c:	f7ff fefc 	bl	800d288 <_free_r>
 800d490:	e7c7      	b.n	800d422 <__ssputs_r+0x46>
	...

0800d494 <_svfiprintf_r>:
 800d494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d498:	4698      	mov	r8, r3
 800d49a:	898b      	ldrh	r3, [r1, #12]
 800d49c:	061b      	lsls	r3, r3, #24
 800d49e:	b09d      	sub	sp, #116	; 0x74
 800d4a0:	4607      	mov	r7, r0
 800d4a2:	460d      	mov	r5, r1
 800d4a4:	4614      	mov	r4, r2
 800d4a6:	d50e      	bpl.n	800d4c6 <_svfiprintf_r+0x32>
 800d4a8:	690b      	ldr	r3, [r1, #16]
 800d4aa:	b963      	cbnz	r3, 800d4c6 <_svfiprintf_r+0x32>
 800d4ac:	2140      	movs	r1, #64	; 0x40
 800d4ae:	f7ff ff3b 	bl	800d328 <_malloc_r>
 800d4b2:	6028      	str	r0, [r5, #0]
 800d4b4:	6128      	str	r0, [r5, #16]
 800d4b6:	b920      	cbnz	r0, 800d4c2 <_svfiprintf_r+0x2e>
 800d4b8:	230c      	movs	r3, #12
 800d4ba:	603b      	str	r3, [r7, #0]
 800d4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c0:	e0d1      	b.n	800d666 <_svfiprintf_r+0x1d2>
 800d4c2:	2340      	movs	r3, #64	; 0x40
 800d4c4:	616b      	str	r3, [r5, #20]
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ca:	2320      	movs	r3, #32
 800d4cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4d4:	2330      	movs	r3, #48	; 0x30
 800d4d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d680 <_svfiprintf_r+0x1ec>
 800d4da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4de:	f04f 0901 	mov.w	r9, #1
 800d4e2:	4623      	mov	r3, r4
 800d4e4:	469a      	mov	sl, r3
 800d4e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4ea:	b10a      	cbz	r2, 800d4f0 <_svfiprintf_r+0x5c>
 800d4ec:	2a25      	cmp	r2, #37	; 0x25
 800d4ee:	d1f9      	bne.n	800d4e4 <_svfiprintf_r+0x50>
 800d4f0:	ebba 0b04 	subs.w	fp, sl, r4
 800d4f4:	d00b      	beq.n	800d50e <_svfiprintf_r+0x7a>
 800d4f6:	465b      	mov	r3, fp
 800d4f8:	4622      	mov	r2, r4
 800d4fa:	4629      	mov	r1, r5
 800d4fc:	4638      	mov	r0, r7
 800d4fe:	f7ff ff6d 	bl	800d3dc <__ssputs_r>
 800d502:	3001      	adds	r0, #1
 800d504:	f000 80aa 	beq.w	800d65c <_svfiprintf_r+0x1c8>
 800d508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d50a:	445a      	add	r2, fp
 800d50c:	9209      	str	r2, [sp, #36]	; 0x24
 800d50e:	f89a 3000 	ldrb.w	r3, [sl]
 800d512:	2b00      	cmp	r3, #0
 800d514:	f000 80a2 	beq.w	800d65c <_svfiprintf_r+0x1c8>
 800d518:	2300      	movs	r3, #0
 800d51a:	f04f 32ff 	mov.w	r2, #4294967295
 800d51e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d522:	f10a 0a01 	add.w	sl, sl, #1
 800d526:	9304      	str	r3, [sp, #16]
 800d528:	9307      	str	r3, [sp, #28]
 800d52a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d52e:	931a      	str	r3, [sp, #104]	; 0x68
 800d530:	4654      	mov	r4, sl
 800d532:	2205      	movs	r2, #5
 800d534:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d538:	4851      	ldr	r0, [pc, #324]	; (800d680 <_svfiprintf_r+0x1ec>)
 800d53a:	f7f2 fe71 	bl	8000220 <memchr>
 800d53e:	9a04      	ldr	r2, [sp, #16]
 800d540:	b9d8      	cbnz	r0, 800d57a <_svfiprintf_r+0xe6>
 800d542:	06d0      	lsls	r0, r2, #27
 800d544:	bf44      	itt	mi
 800d546:	2320      	movmi	r3, #32
 800d548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d54c:	0711      	lsls	r1, r2, #28
 800d54e:	bf44      	itt	mi
 800d550:	232b      	movmi	r3, #43	; 0x2b
 800d552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d556:	f89a 3000 	ldrb.w	r3, [sl]
 800d55a:	2b2a      	cmp	r3, #42	; 0x2a
 800d55c:	d015      	beq.n	800d58a <_svfiprintf_r+0xf6>
 800d55e:	9a07      	ldr	r2, [sp, #28]
 800d560:	4654      	mov	r4, sl
 800d562:	2000      	movs	r0, #0
 800d564:	f04f 0c0a 	mov.w	ip, #10
 800d568:	4621      	mov	r1, r4
 800d56a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d56e:	3b30      	subs	r3, #48	; 0x30
 800d570:	2b09      	cmp	r3, #9
 800d572:	d94e      	bls.n	800d612 <_svfiprintf_r+0x17e>
 800d574:	b1b0      	cbz	r0, 800d5a4 <_svfiprintf_r+0x110>
 800d576:	9207      	str	r2, [sp, #28]
 800d578:	e014      	b.n	800d5a4 <_svfiprintf_r+0x110>
 800d57a:	eba0 0308 	sub.w	r3, r0, r8
 800d57e:	fa09 f303 	lsl.w	r3, r9, r3
 800d582:	4313      	orrs	r3, r2
 800d584:	9304      	str	r3, [sp, #16]
 800d586:	46a2      	mov	sl, r4
 800d588:	e7d2      	b.n	800d530 <_svfiprintf_r+0x9c>
 800d58a:	9b03      	ldr	r3, [sp, #12]
 800d58c:	1d19      	adds	r1, r3, #4
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	9103      	str	r1, [sp, #12]
 800d592:	2b00      	cmp	r3, #0
 800d594:	bfbb      	ittet	lt
 800d596:	425b      	neglt	r3, r3
 800d598:	f042 0202 	orrlt.w	r2, r2, #2
 800d59c:	9307      	strge	r3, [sp, #28]
 800d59e:	9307      	strlt	r3, [sp, #28]
 800d5a0:	bfb8      	it	lt
 800d5a2:	9204      	strlt	r2, [sp, #16]
 800d5a4:	7823      	ldrb	r3, [r4, #0]
 800d5a6:	2b2e      	cmp	r3, #46	; 0x2e
 800d5a8:	d10c      	bne.n	800d5c4 <_svfiprintf_r+0x130>
 800d5aa:	7863      	ldrb	r3, [r4, #1]
 800d5ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d5ae:	d135      	bne.n	800d61c <_svfiprintf_r+0x188>
 800d5b0:	9b03      	ldr	r3, [sp, #12]
 800d5b2:	1d1a      	adds	r2, r3, #4
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	9203      	str	r2, [sp, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	bfb8      	it	lt
 800d5bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5c0:	3402      	adds	r4, #2
 800d5c2:	9305      	str	r3, [sp, #20]
 800d5c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d690 <_svfiprintf_r+0x1fc>
 800d5c8:	7821      	ldrb	r1, [r4, #0]
 800d5ca:	2203      	movs	r2, #3
 800d5cc:	4650      	mov	r0, sl
 800d5ce:	f7f2 fe27 	bl	8000220 <memchr>
 800d5d2:	b140      	cbz	r0, 800d5e6 <_svfiprintf_r+0x152>
 800d5d4:	2340      	movs	r3, #64	; 0x40
 800d5d6:	eba0 000a 	sub.w	r0, r0, sl
 800d5da:	fa03 f000 	lsl.w	r0, r3, r0
 800d5de:	9b04      	ldr	r3, [sp, #16]
 800d5e0:	4303      	orrs	r3, r0
 800d5e2:	3401      	adds	r4, #1
 800d5e4:	9304      	str	r3, [sp, #16]
 800d5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ea:	4826      	ldr	r0, [pc, #152]	; (800d684 <_svfiprintf_r+0x1f0>)
 800d5ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5f0:	2206      	movs	r2, #6
 800d5f2:	f7f2 fe15 	bl	8000220 <memchr>
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	d038      	beq.n	800d66c <_svfiprintf_r+0x1d8>
 800d5fa:	4b23      	ldr	r3, [pc, #140]	; (800d688 <_svfiprintf_r+0x1f4>)
 800d5fc:	bb1b      	cbnz	r3, 800d646 <_svfiprintf_r+0x1b2>
 800d5fe:	9b03      	ldr	r3, [sp, #12]
 800d600:	3307      	adds	r3, #7
 800d602:	f023 0307 	bic.w	r3, r3, #7
 800d606:	3308      	adds	r3, #8
 800d608:	9303      	str	r3, [sp, #12]
 800d60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d60c:	4433      	add	r3, r6
 800d60e:	9309      	str	r3, [sp, #36]	; 0x24
 800d610:	e767      	b.n	800d4e2 <_svfiprintf_r+0x4e>
 800d612:	fb0c 3202 	mla	r2, ip, r2, r3
 800d616:	460c      	mov	r4, r1
 800d618:	2001      	movs	r0, #1
 800d61a:	e7a5      	b.n	800d568 <_svfiprintf_r+0xd4>
 800d61c:	2300      	movs	r3, #0
 800d61e:	3401      	adds	r4, #1
 800d620:	9305      	str	r3, [sp, #20]
 800d622:	4619      	mov	r1, r3
 800d624:	f04f 0c0a 	mov.w	ip, #10
 800d628:	4620      	mov	r0, r4
 800d62a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d62e:	3a30      	subs	r2, #48	; 0x30
 800d630:	2a09      	cmp	r2, #9
 800d632:	d903      	bls.n	800d63c <_svfiprintf_r+0x1a8>
 800d634:	2b00      	cmp	r3, #0
 800d636:	d0c5      	beq.n	800d5c4 <_svfiprintf_r+0x130>
 800d638:	9105      	str	r1, [sp, #20]
 800d63a:	e7c3      	b.n	800d5c4 <_svfiprintf_r+0x130>
 800d63c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d640:	4604      	mov	r4, r0
 800d642:	2301      	movs	r3, #1
 800d644:	e7f0      	b.n	800d628 <_svfiprintf_r+0x194>
 800d646:	ab03      	add	r3, sp, #12
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	462a      	mov	r2, r5
 800d64c:	4b0f      	ldr	r3, [pc, #60]	; (800d68c <_svfiprintf_r+0x1f8>)
 800d64e:	a904      	add	r1, sp, #16
 800d650:	4638      	mov	r0, r7
 800d652:	f7fe f80d 	bl	800b670 <_printf_float>
 800d656:	1c42      	adds	r2, r0, #1
 800d658:	4606      	mov	r6, r0
 800d65a:	d1d6      	bne.n	800d60a <_svfiprintf_r+0x176>
 800d65c:	89ab      	ldrh	r3, [r5, #12]
 800d65e:	065b      	lsls	r3, r3, #25
 800d660:	f53f af2c 	bmi.w	800d4bc <_svfiprintf_r+0x28>
 800d664:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d666:	b01d      	add	sp, #116	; 0x74
 800d668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d66c:	ab03      	add	r3, sp, #12
 800d66e:	9300      	str	r3, [sp, #0]
 800d670:	462a      	mov	r2, r5
 800d672:	4b06      	ldr	r3, [pc, #24]	; (800d68c <_svfiprintf_r+0x1f8>)
 800d674:	a904      	add	r1, sp, #16
 800d676:	4638      	mov	r0, r7
 800d678:	f7fe fa9e 	bl	800bbb8 <_printf_i>
 800d67c:	e7eb      	b.n	800d656 <_svfiprintf_r+0x1c2>
 800d67e:	bf00      	nop
 800d680:	0800f32c 	.word	0x0800f32c
 800d684:	0800f336 	.word	0x0800f336
 800d688:	0800b671 	.word	0x0800b671
 800d68c:	0800d3dd 	.word	0x0800d3dd
 800d690:	0800f332 	.word	0x0800f332

0800d694 <_sbrk_r>:
 800d694:	b538      	push	{r3, r4, r5, lr}
 800d696:	4d06      	ldr	r5, [pc, #24]	; (800d6b0 <_sbrk_r+0x1c>)
 800d698:	2300      	movs	r3, #0
 800d69a:	4604      	mov	r4, r0
 800d69c:	4608      	mov	r0, r1
 800d69e:	602b      	str	r3, [r5, #0]
 800d6a0:	f7f7 fcb4 	bl	800500c <_sbrk>
 800d6a4:	1c43      	adds	r3, r0, #1
 800d6a6:	d102      	bne.n	800d6ae <_sbrk_r+0x1a>
 800d6a8:	682b      	ldr	r3, [r5, #0]
 800d6aa:	b103      	cbz	r3, 800d6ae <_sbrk_r+0x1a>
 800d6ac:	6023      	str	r3, [r4, #0]
 800d6ae:	bd38      	pop	{r3, r4, r5, pc}
 800d6b0:	20000ef8 	.word	0x20000ef8

0800d6b4 <__assert_func>:
 800d6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6b6:	4614      	mov	r4, r2
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	4b09      	ldr	r3, [pc, #36]	; (800d6e0 <__assert_func+0x2c>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	4605      	mov	r5, r0
 800d6c0:	68d8      	ldr	r0, [r3, #12]
 800d6c2:	b14c      	cbz	r4, 800d6d8 <__assert_func+0x24>
 800d6c4:	4b07      	ldr	r3, [pc, #28]	; (800d6e4 <__assert_func+0x30>)
 800d6c6:	9100      	str	r1, [sp, #0]
 800d6c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6cc:	4906      	ldr	r1, [pc, #24]	; (800d6e8 <__assert_func+0x34>)
 800d6ce:	462b      	mov	r3, r5
 800d6d0:	f000 f80e 	bl	800d6f0 <fiprintf>
 800d6d4:	f000 faa4 	bl	800dc20 <abort>
 800d6d8:	4b04      	ldr	r3, [pc, #16]	; (800d6ec <__assert_func+0x38>)
 800d6da:	461c      	mov	r4, r3
 800d6dc:	e7f3      	b.n	800d6c6 <__assert_func+0x12>
 800d6de:	bf00      	nop
 800d6e0:	200000ac 	.word	0x200000ac
 800d6e4:	0800f33d 	.word	0x0800f33d
 800d6e8:	0800f34a 	.word	0x0800f34a
 800d6ec:	0800f378 	.word	0x0800f378

0800d6f0 <fiprintf>:
 800d6f0:	b40e      	push	{r1, r2, r3}
 800d6f2:	b503      	push	{r0, r1, lr}
 800d6f4:	4601      	mov	r1, r0
 800d6f6:	ab03      	add	r3, sp, #12
 800d6f8:	4805      	ldr	r0, [pc, #20]	; (800d710 <fiprintf+0x20>)
 800d6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6fe:	6800      	ldr	r0, [r0, #0]
 800d700:	9301      	str	r3, [sp, #4]
 800d702:	f000 f88f 	bl	800d824 <_vfiprintf_r>
 800d706:	b002      	add	sp, #8
 800d708:	f85d eb04 	ldr.w	lr, [sp], #4
 800d70c:	b003      	add	sp, #12
 800d70e:	4770      	bx	lr
 800d710:	200000ac 	.word	0x200000ac

0800d714 <__ascii_mbtowc>:
 800d714:	b082      	sub	sp, #8
 800d716:	b901      	cbnz	r1, 800d71a <__ascii_mbtowc+0x6>
 800d718:	a901      	add	r1, sp, #4
 800d71a:	b142      	cbz	r2, 800d72e <__ascii_mbtowc+0x1a>
 800d71c:	b14b      	cbz	r3, 800d732 <__ascii_mbtowc+0x1e>
 800d71e:	7813      	ldrb	r3, [r2, #0]
 800d720:	600b      	str	r3, [r1, #0]
 800d722:	7812      	ldrb	r2, [r2, #0]
 800d724:	1e10      	subs	r0, r2, #0
 800d726:	bf18      	it	ne
 800d728:	2001      	movne	r0, #1
 800d72a:	b002      	add	sp, #8
 800d72c:	4770      	bx	lr
 800d72e:	4610      	mov	r0, r2
 800d730:	e7fb      	b.n	800d72a <__ascii_mbtowc+0x16>
 800d732:	f06f 0001 	mvn.w	r0, #1
 800d736:	e7f8      	b.n	800d72a <__ascii_mbtowc+0x16>

0800d738 <memmove>:
 800d738:	4288      	cmp	r0, r1
 800d73a:	b510      	push	{r4, lr}
 800d73c:	eb01 0402 	add.w	r4, r1, r2
 800d740:	d902      	bls.n	800d748 <memmove+0x10>
 800d742:	4284      	cmp	r4, r0
 800d744:	4623      	mov	r3, r4
 800d746:	d807      	bhi.n	800d758 <memmove+0x20>
 800d748:	1e43      	subs	r3, r0, #1
 800d74a:	42a1      	cmp	r1, r4
 800d74c:	d008      	beq.n	800d760 <memmove+0x28>
 800d74e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d752:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d756:	e7f8      	b.n	800d74a <memmove+0x12>
 800d758:	4402      	add	r2, r0
 800d75a:	4601      	mov	r1, r0
 800d75c:	428a      	cmp	r2, r1
 800d75e:	d100      	bne.n	800d762 <memmove+0x2a>
 800d760:	bd10      	pop	{r4, pc}
 800d762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d76a:	e7f7      	b.n	800d75c <memmove+0x24>

0800d76c <__malloc_lock>:
 800d76c:	4801      	ldr	r0, [pc, #4]	; (800d774 <__malloc_lock+0x8>)
 800d76e:	f000 bc17 	b.w	800dfa0 <__retarget_lock_acquire_recursive>
 800d772:	bf00      	nop
 800d774:	20000f00 	.word	0x20000f00

0800d778 <__malloc_unlock>:
 800d778:	4801      	ldr	r0, [pc, #4]	; (800d780 <__malloc_unlock+0x8>)
 800d77a:	f000 bc12 	b.w	800dfa2 <__retarget_lock_release_recursive>
 800d77e:	bf00      	nop
 800d780:	20000f00 	.word	0x20000f00

0800d784 <_realloc_r>:
 800d784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d786:	4607      	mov	r7, r0
 800d788:	4614      	mov	r4, r2
 800d78a:	460e      	mov	r6, r1
 800d78c:	b921      	cbnz	r1, 800d798 <_realloc_r+0x14>
 800d78e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d792:	4611      	mov	r1, r2
 800d794:	f7ff bdc8 	b.w	800d328 <_malloc_r>
 800d798:	b922      	cbnz	r2, 800d7a4 <_realloc_r+0x20>
 800d79a:	f7ff fd75 	bl	800d288 <_free_r>
 800d79e:	4625      	mov	r5, r4
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7a4:	f000 fc62 	bl	800e06c <_malloc_usable_size_r>
 800d7a8:	42a0      	cmp	r0, r4
 800d7aa:	d20f      	bcs.n	800d7cc <_realloc_r+0x48>
 800d7ac:	4621      	mov	r1, r4
 800d7ae:	4638      	mov	r0, r7
 800d7b0:	f7ff fdba 	bl	800d328 <_malloc_r>
 800d7b4:	4605      	mov	r5, r0
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	d0f2      	beq.n	800d7a0 <_realloc_r+0x1c>
 800d7ba:	4631      	mov	r1, r6
 800d7bc:	4622      	mov	r2, r4
 800d7be:	f7ff f9c7 	bl	800cb50 <memcpy>
 800d7c2:	4631      	mov	r1, r6
 800d7c4:	4638      	mov	r0, r7
 800d7c6:	f7ff fd5f 	bl	800d288 <_free_r>
 800d7ca:	e7e9      	b.n	800d7a0 <_realloc_r+0x1c>
 800d7cc:	4635      	mov	r5, r6
 800d7ce:	e7e7      	b.n	800d7a0 <_realloc_r+0x1c>

0800d7d0 <__sfputc_r>:
 800d7d0:	6893      	ldr	r3, [r2, #8]
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	b410      	push	{r4}
 800d7d8:	6093      	str	r3, [r2, #8]
 800d7da:	da08      	bge.n	800d7ee <__sfputc_r+0x1e>
 800d7dc:	6994      	ldr	r4, [r2, #24]
 800d7de:	42a3      	cmp	r3, r4
 800d7e0:	db01      	blt.n	800d7e6 <__sfputc_r+0x16>
 800d7e2:	290a      	cmp	r1, #10
 800d7e4:	d103      	bne.n	800d7ee <__sfputc_r+0x1e>
 800d7e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7ea:	f000 b94b 	b.w	800da84 <__swbuf_r>
 800d7ee:	6813      	ldr	r3, [r2, #0]
 800d7f0:	1c58      	adds	r0, r3, #1
 800d7f2:	6010      	str	r0, [r2, #0]
 800d7f4:	7019      	strb	r1, [r3, #0]
 800d7f6:	4608      	mov	r0, r1
 800d7f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <__sfputs_r>:
 800d7fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d800:	4606      	mov	r6, r0
 800d802:	460f      	mov	r7, r1
 800d804:	4614      	mov	r4, r2
 800d806:	18d5      	adds	r5, r2, r3
 800d808:	42ac      	cmp	r4, r5
 800d80a:	d101      	bne.n	800d810 <__sfputs_r+0x12>
 800d80c:	2000      	movs	r0, #0
 800d80e:	e007      	b.n	800d820 <__sfputs_r+0x22>
 800d810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d814:	463a      	mov	r2, r7
 800d816:	4630      	mov	r0, r6
 800d818:	f7ff ffda 	bl	800d7d0 <__sfputc_r>
 800d81c:	1c43      	adds	r3, r0, #1
 800d81e:	d1f3      	bne.n	800d808 <__sfputs_r+0xa>
 800d820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d824 <_vfiprintf_r>:
 800d824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d828:	460d      	mov	r5, r1
 800d82a:	b09d      	sub	sp, #116	; 0x74
 800d82c:	4614      	mov	r4, r2
 800d82e:	4698      	mov	r8, r3
 800d830:	4606      	mov	r6, r0
 800d832:	b118      	cbz	r0, 800d83c <_vfiprintf_r+0x18>
 800d834:	6983      	ldr	r3, [r0, #24]
 800d836:	b90b      	cbnz	r3, 800d83c <_vfiprintf_r+0x18>
 800d838:	f000 fb14 	bl	800de64 <__sinit>
 800d83c:	4b89      	ldr	r3, [pc, #548]	; (800da64 <_vfiprintf_r+0x240>)
 800d83e:	429d      	cmp	r5, r3
 800d840:	d11b      	bne.n	800d87a <_vfiprintf_r+0x56>
 800d842:	6875      	ldr	r5, [r6, #4]
 800d844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d846:	07d9      	lsls	r1, r3, #31
 800d848:	d405      	bmi.n	800d856 <_vfiprintf_r+0x32>
 800d84a:	89ab      	ldrh	r3, [r5, #12]
 800d84c:	059a      	lsls	r2, r3, #22
 800d84e:	d402      	bmi.n	800d856 <_vfiprintf_r+0x32>
 800d850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d852:	f000 fba5 	bl	800dfa0 <__retarget_lock_acquire_recursive>
 800d856:	89ab      	ldrh	r3, [r5, #12]
 800d858:	071b      	lsls	r3, r3, #28
 800d85a:	d501      	bpl.n	800d860 <_vfiprintf_r+0x3c>
 800d85c:	692b      	ldr	r3, [r5, #16]
 800d85e:	b9eb      	cbnz	r3, 800d89c <_vfiprintf_r+0x78>
 800d860:	4629      	mov	r1, r5
 800d862:	4630      	mov	r0, r6
 800d864:	f000 f96e 	bl	800db44 <__swsetup_r>
 800d868:	b1c0      	cbz	r0, 800d89c <_vfiprintf_r+0x78>
 800d86a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d86c:	07dc      	lsls	r4, r3, #31
 800d86e:	d50e      	bpl.n	800d88e <_vfiprintf_r+0x6a>
 800d870:	f04f 30ff 	mov.w	r0, #4294967295
 800d874:	b01d      	add	sp, #116	; 0x74
 800d876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d87a:	4b7b      	ldr	r3, [pc, #492]	; (800da68 <_vfiprintf_r+0x244>)
 800d87c:	429d      	cmp	r5, r3
 800d87e:	d101      	bne.n	800d884 <_vfiprintf_r+0x60>
 800d880:	68b5      	ldr	r5, [r6, #8]
 800d882:	e7df      	b.n	800d844 <_vfiprintf_r+0x20>
 800d884:	4b79      	ldr	r3, [pc, #484]	; (800da6c <_vfiprintf_r+0x248>)
 800d886:	429d      	cmp	r5, r3
 800d888:	bf08      	it	eq
 800d88a:	68f5      	ldreq	r5, [r6, #12]
 800d88c:	e7da      	b.n	800d844 <_vfiprintf_r+0x20>
 800d88e:	89ab      	ldrh	r3, [r5, #12]
 800d890:	0598      	lsls	r0, r3, #22
 800d892:	d4ed      	bmi.n	800d870 <_vfiprintf_r+0x4c>
 800d894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d896:	f000 fb84 	bl	800dfa2 <__retarget_lock_release_recursive>
 800d89a:	e7e9      	b.n	800d870 <_vfiprintf_r+0x4c>
 800d89c:	2300      	movs	r3, #0
 800d89e:	9309      	str	r3, [sp, #36]	; 0x24
 800d8a0:	2320      	movs	r3, #32
 800d8a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8aa:	2330      	movs	r3, #48	; 0x30
 800d8ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800da70 <_vfiprintf_r+0x24c>
 800d8b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8b4:	f04f 0901 	mov.w	r9, #1
 800d8b8:	4623      	mov	r3, r4
 800d8ba:	469a      	mov	sl, r3
 800d8bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8c0:	b10a      	cbz	r2, 800d8c6 <_vfiprintf_r+0xa2>
 800d8c2:	2a25      	cmp	r2, #37	; 0x25
 800d8c4:	d1f9      	bne.n	800d8ba <_vfiprintf_r+0x96>
 800d8c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d8ca:	d00b      	beq.n	800d8e4 <_vfiprintf_r+0xc0>
 800d8cc:	465b      	mov	r3, fp
 800d8ce:	4622      	mov	r2, r4
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f7ff ff93 	bl	800d7fe <__sfputs_r>
 800d8d8:	3001      	adds	r0, #1
 800d8da:	f000 80aa 	beq.w	800da32 <_vfiprintf_r+0x20e>
 800d8de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8e0:	445a      	add	r2, fp
 800d8e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f000 80a2 	beq.w	800da32 <_vfiprintf_r+0x20e>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8f8:	f10a 0a01 	add.w	sl, sl, #1
 800d8fc:	9304      	str	r3, [sp, #16]
 800d8fe:	9307      	str	r3, [sp, #28]
 800d900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d904:	931a      	str	r3, [sp, #104]	; 0x68
 800d906:	4654      	mov	r4, sl
 800d908:	2205      	movs	r2, #5
 800d90a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d90e:	4858      	ldr	r0, [pc, #352]	; (800da70 <_vfiprintf_r+0x24c>)
 800d910:	f7f2 fc86 	bl	8000220 <memchr>
 800d914:	9a04      	ldr	r2, [sp, #16]
 800d916:	b9d8      	cbnz	r0, 800d950 <_vfiprintf_r+0x12c>
 800d918:	06d1      	lsls	r1, r2, #27
 800d91a:	bf44      	itt	mi
 800d91c:	2320      	movmi	r3, #32
 800d91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d922:	0713      	lsls	r3, r2, #28
 800d924:	bf44      	itt	mi
 800d926:	232b      	movmi	r3, #43	; 0x2b
 800d928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d92c:	f89a 3000 	ldrb.w	r3, [sl]
 800d930:	2b2a      	cmp	r3, #42	; 0x2a
 800d932:	d015      	beq.n	800d960 <_vfiprintf_r+0x13c>
 800d934:	9a07      	ldr	r2, [sp, #28]
 800d936:	4654      	mov	r4, sl
 800d938:	2000      	movs	r0, #0
 800d93a:	f04f 0c0a 	mov.w	ip, #10
 800d93e:	4621      	mov	r1, r4
 800d940:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d944:	3b30      	subs	r3, #48	; 0x30
 800d946:	2b09      	cmp	r3, #9
 800d948:	d94e      	bls.n	800d9e8 <_vfiprintf_r+0x1c4>
 800d94a:	b1b0      	cbz	r0, 800d97a <_vfiprintf_r+0x156>
 800d94c:	9207      	str	r2, [sp, #28]
 800d94e:	e014      	b.n	800d97a <_vfiprintf_r+0x156>
 800d950:	eba0 0308 	sub.w	r3, r0, r8
 800d954:	fa09 f303 	lsl.w	r3, r9, r3
 800d958:	4313      	orrs	r3, r2
 800d95a:	9304      	str	r3, [sp, #16]
 800d95c:	46a2      	mov	sl, r4
 800d95e:	e7d2      	b.n	800d906 <_vfiprintf_r+0xe2>
 800d960:	9b03      	ldr	r3, [sp, #12]
 800d962:	1d19      	adds	r1, r3, #4
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	9103      	str	r1, [sp, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	bfbb      	ittet	lt
 800d96c:	425b      	neglt	r3, r3
 800d96e:	f042 0202 	orrlt.w	r2, r2, #2
 800d972:	9307      	strge	r3, [sp, #28]
 800d974:	9307      	strlt	r3, [sp, #28]
 800d976:	bfb8      	it	lt
 800d978:	9204      	strlt	r2, [sp, #16]
 800d97a:	7823      	ldrb	r3, [r4, #0]
 800d97c:	2b2e      	cmp	r3, #46	; 0x2e
 800d97e:	d10c      	bne.n	800d99a <_vfiprintf_r+0x176>
 800d980:	7863      	ldrb	r3, [r4, #1]
 800d982:	2b2a      	cmp	r3, #42	; 0x2a
 800d984:	d135      	bne.n	800d9f2 <_vfiprintf_r+0x1ce>
 800d986:	9b03      	ldr	r3, [sp, #12]
 800d988:	1d1a      	adds	r2, r3, #4
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	9203      	str	r2, [sp, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	bfb8      	it	lt
 800d992:	f04f 33ff 	movlt.w	r3, #4294967295
 800d996:	3402      	adds	r4, #2
 800d998:	9305      	str	r3, [sp, #20]
 800d99a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800da80 <_vfiprintf_r+0x25c>
 800d99e:	7821      	ldrb	r1, [r4, #0]
 800d9a0:	2203      	movs	r2, #3
 800d9a2:	4650      	mov	r0, sl
 800d9a4:	f7f2 fc3c 	bl	8000220 <memchr>
 800d9a8:	b140      	cbz	r0, 800d9bc <_vfiprintf_r+0x198>
 800d9aa:	2340      	movs	r3, #64	; 0x40
 800d9ac:	eba0 000a 	sub.w	r0, r0, sl
 800d9b0:	fa03 f000 	lsl.w	r0, r3, r0
 800d9b4:	9b04      	ldr	r3, [sp, #16]
 800d9b6:	4303      	orrs	r3, r0
 800d9b8:	3401      	adds	r4, #1
 800d9ba:	9304      	str	r3, [sp, #16]
 800d9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9c0:	482c      	ldr	r0, [pc, #176]	; (800da74 <_vfiprintf_r+0x250>)
 800d9c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9c6:	2206      	movs	r2, #6
 800d9c8:	f7f2 fc2a 	bl	8000220 <memchr>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d03f      	beq.n	800da50 <_vfiprintf_r+0x22c>
 800d9d0:	4b29      	ldr	r3, [pc, #164]	; (800da78 <_vfiprintf_r+0x254>)
 800d9d2:	bb1b      	cbnz	r3, 800da1c <_vfiprintf_r+0x1f8>
 800d9d4:	9b03      	ldr	r3, [sp, #12]
 800d9d6:	3307      	adds	r3, #7
 800d9d8:	f023 0307 	bic.w	r3, r3, #7
 800d9dc:	3308      	adds	r3, #8
 800d9de:	9303      	str	r3, [sp, #12]
 800d9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9e2:	443b      	add	r3, r7
 800d9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9e6:	e767      	b.n	800d8b8 <_vfiprintf_r+0x94>
 800d9e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9ec:	460c      	mov	r4, r1
 800d9ee:	2001      	movs	r0, #1
 800d9f0:	e7a5      	b.n	800d93e <_vfiprintf_r+0x11a>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	3401      	adds	r4, #1
 800d9f6:	9305      	str	r3, [sp, #20]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	f04f 0c0a 	mov.w	ip, #10
 800d9fe:	4620      	mov	r0, r4
 800da00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da04:	3a30      	subs	r2, #48	; 0x30
 800da06:	2a09      	cmp	r2, #9
 800da08:	d903      	bls.n	800da12 <_vfiprintf_r+0x1ee>
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d0c5      	beq.n	800d99a <_vfiprintf_r+0x176>
 800da0e:	9105      	str	r1, [sp, #20]
 800da10:	e7c3      	b.n	800d99a <_vfiprintf_r+0x176>
 800da12:	fb0c 2101 	mla	r1, ip, r1, r2
 800da16:	4604      	mov	r4, r0
 800da18:	2301      	movs	r3, #1
 800da1a:	e7f0      	b.n	800d9fe <_vfiprintf_r+0x1da>
 800da1c:	ab03      	add	r3, sp, #12
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	462a      	mov	r2, r5
 800da22:	4b16      	ldr	r3, [pc, #88]	; (800da7c <_vfiprintf_r+0x258>)
 800da24:	a904      	add	r1, sp, #16
 800da26:	4630      	mov	r0, r6
 800da28:	f7fd fe22 	bl	800b670 <_printf_float>
 800da2c:	4607      	mov	r7, r0
 800da2e:	1c78      	adds	r0, r7, #1
 800da30:	d1d6      	bne.n	800d9e0 <_vfiprintf_r+0x1bc>
 800da32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da34:	07d9      	lsls	r1, r3, #31
 800da36:	d405      	bmi.n	800da44 <_vfiprintf_r+0x220>
 800da38:	89ab      	ldrh	r3, [r5, #12]
 800da3a:	059a      	lsls	r2, r3, #22
 800da3c:	d402      	bmi.n	800da44 <_vfiprintf_r+0x220>
 800da3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da40:	f000 faaf 	bl	800dfa2 <__retarget_lock_release_recursive>
 800da44:	89ab      	ldrh	r3, [r5, #12]
 800da46:	065b      	lsls	r3, r3, #25
 800da48:	f53f af12 	bmi.w	800d870 <_vfiprintf_r+0x4c>
 800da4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da4e:	e711      	b.n	800d874 <_vfiprintf_r+0x50>
 800da50:	ab03      	add	r3, sp, #12
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	462a      	mov	r2, r5
 800da56:	4b09      	ldr	r3, [pc, #36]	; (800da7c <_vfiprintf_r+0x258>)
 800da58:	a904      	add	r1, sp, #16
 800da5a:	4630      	mov	r0, r6
 800da5c:	f7fe f8ac 	bl	800bbb8 <_printf_i>
 800da60:	e7e4      	b.n	800da2c <_vfiprintf_r+0x208>
 800da62:	bf00      	nop
 800da64:	0800f4a4 	.word	0x0800f4a4
 800da68:	0800f4c4 	.word	0x0800f4c4
 800da6c:	0800f484 	.word	0x0800f484
 800da70:	0800f32c 	.word	0x0800f32c
 800da74:	0800f336 	.word	0x0800f336
 800da78:	0800b671 	.word	0x0800b671
 800da7c:	0800d7ff 	.word	0x0800d7ff
 800da80:	0800f332 	.word	0x0800f332

0800da84 <__swbuf_r>:
 800da84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da86:	460e      	mov	r6, r1
 800da88:	4614      	mov	r4, r2
 800da8a:	4605      	mov	r5, r0
 800da8c:	b118      	cbz	r0, 800da96 <__swbuf_r+0x12>
 800da8e:	6983      	ldr	r3, [r0, #24]
 800da90:	b90b      	cbnz	r3, 800da96 <__swbuf_r+0x12>
 800da92:	f000 f9e7 	bl	800de64 <__sinit>
 800da96:	4b21      	ldr	r3, [pc, #132]	; (800db1c <__swbuf_r+0x98>)
 800da98:	429c      	cmp	r4, r3
 800da9a:	d12b      	bne.n	800daf4 <__swbuf_r+0x70>
 800da9c:	686c      	ldr	r4, [r5, #4]
 800da9e:	69a3      	ldr	r3, [r4, #24]
 800daa0:	60a3      	str	r3, [r4, #8]
 800daa2:	89a3      	ldrh	r3, [r4, #12]
 800daa4:	071a      	lsls	r2, r3, #28
 800daa6:	d52f      	bpl.n	800db08 <__swbuf_r+0x84>
 800daa8:	6923      	ldr	r3, [r4, #16]
 800daaa:	b36b      	cbz	r3, 800db08 <__swbuf_r+0x84>
 800daac:	6923      	ldr	r3, [r4, #16]
 800daae:	6820      	ldr	r0, [r4, #0]
 800dab0:	1ac0      	subs	r0, r0, r3
 800dab2:	6963      	ldr	r3, [r4, #20]
 800dab4:	b2f6      	uxtb	r6, r6
 800dab6:	4283      	cmp	r3, r0
 800dab8:	4637      	mov	r7, r6
 800daba:	dc04      	bgt.n	800dac6 <__swbuf_r+0x42>
 800dabc:	4621      	mov	r1, r4
 800dabe:	4628      	mov	r0, r5
 800dac0:	f000 f93c 	bl	800dd3c <_fflush_r>
 800dac4:	bb30      	cbnz	r0, 800db14 <__swbuf_r+0x90>
 800dac6:	68a3      	ldr	r3, [r4, #8]
 800dac8:	3b01      	subs	r3, #1
 800daca:	60a3      	str	r3, [r4, #8]
 800dacc:	6823      	ldr	r3, [r4, #0]
 800dace:	1c5a      	adds	r2, r3, #1
 800dad0:	6022      	str	r2, [r4, #0]
 800dad2:	701e      	strb	r6, [r3, #0]
 800dad4:	6963      	ldr	r3, [r4, #20]
 800dad6:	3001      	adds	r0, #1
 800dad8:	4283      	cmp	r3, r0
 800dada:	d004      	beq.n	800dae6 <__swbuf_r+0x62>
 800dadc:	89a3      	ldrh	r3, [r4, #12]
 800dade:	07db      	lsls	r3, r3, #31
 800dae0:	d506      	bpl.n	800daf0 <__swbuf_r+0x6c>
 800dae2:	2e0a      	cmp	r6, #10
 800dae4:	d104      	bne.n	800daf0 <__swbuf_r+0x6c>
 800dae6:	4621      	mov	r1, r4
 800dae8:	4628      	mov	r0, r5
 800daea:	f000 f927 	bl	800dd3c <_fflush_r>
 800daee:	b988      	cbnz	r0, 800db14 <__swbuf_r+0x90>
 800daf0:	4638      	mov	r0, r7
 800daf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daf4:	4b0a      	ldr	r3, [pc, #40]	; (800db20 <__swbuf_r+0x9c>)
 800daf6:	429c      	cmp	r4, r3
 800daf8:	d101      	bne.n	800dafe <__swbuf_r+0x7a>
 800dafa:	68ac      	ldr	r4, [r5, #8]
 800dafc:	e7cf      	b.n	800da9e <__swbuf_r+0x1a>
 800dafe:	4b09      	ldr	r3, [pc, #36]	; (800db24 <__swbuf_r+0xa0>)
 800db00:	429c      	cmp	r4, r3
 800db02:	bf08      	it	eq
 800db04:	68ec      	ldreq	r4, [r5, #12]
 800db06:	e7ca      	b.n	800da9e <__swbuf_r+0x1a>
 800db08:	4621      	mov	r1, r4
 800db0a:	4628      	mov	r0, r5
 800db0c:	f000 f81a 	bl	800db44 <__swsetup_r>
 800db10:	2800      	cmp	r0, #0
 800db12:	d0cb      	beq.n	800daac <__swbuf_r+0x28>
 800db14:	f04f 37ff 	mov.w	r7, #4294967295
 800db18:	e7ea      	b.n	800daf0 <__swbuf_r+0x6c>
 800db1a:	bf00      	nop
 800db1c:	0800f4a4 	.word	0x0800f4a4
 800db20:	0800f4c4 	.word	0x0800f4c4
 800db24:	0800f484 	.word	0x0800f484

0800db28 <__ascii_wctomb>:
 800db28:	b149      	cbz	r1, 800db3e <__ascii_wctomb+0x16>
 800db2a:	2aff      	cmp	r2, #255	; 0xff
 800db2c:	bf85      	ittet	hi
 800db2e:	238a      	movhi	r3, #138	; 0x8a
 800db30:	6003      	strhi	r3, [r0, #0]
 800db32:	700a      	strbls	r2, [r1, #0]
 800db34:	f04f 30ff 	movhi.w	r0, #4294967295
 800db38:	bf98      	it	ls
 800db3a:	2001      	movls	r0, #1
 800db3c:	4770      	bx	lr
 800db3e:	4608      	mov	r0, r1
 800db40:	4770      	bx	lr
	...

0800db44 <__swsetup_r>:
 800db44:	4b32      	ldr	r3, [pc, #200]	; (800dc10 <__swsetup_r+0xcc>)
 800db46:	b570      	push	{r4, r5, r6, lr}
 800db48:	681d      	ldr	r5, [r3, #0]
 800db4a:	4606      	mov	r6, r0
 800db4c:	460c      	mov	r4, r1
 800db4e:	b125      	cbz	r5, 800db5a <__swsetup_r+0x16>
 800db50:	69ab      	ldr	r3, [r5, #24]
 800db52:	b913      	cbnz	r3, 800db5a <__swsetup_r+0x16>
 800db54:	4628      	mov	r0, r5
 800db56:	f000 f985 	bl	800de64 <__sinit>
 800db5a:	4b2e      	ldr	r3, [pc, #184]	; (800dc14 <__swsetup_r+0xd0>)
 800db5c:	429c      	cmp	r4, r3
 800db5e:	d10f      	bne.n	800db80 <__swsetup_r+0x3c>
 800db60:	686c      	ldr	r4, [r5, #4]
 800db62:	89a3      	ldrh	r3, [r4, #12]
 800db64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db68:	0719      	lsls	r1, r3, #28
 800db6a:	d42c      	bmi.n	800dbc6 <__swsetup_r+0x82>
 800db6c:	06dd      	lsls	r5, r3, #27
 800db6e:	d411      	bmi.n	800db94 <__swsetup_r+0x50>
 800db70:	2309      	movs	r3, #9
 800db72:	6033      	str	r3, [r6, #0]
 800db74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db78:	81a3      	strh	r3, [r4, #12]
 800db7a:	f04f 30ff 	mov.w	r0, #4294967295
 800db7e:	e03e      	b.n	800dbfe <__swsetup_r+0xba>
 800db80:	4b25      	ldr	r3, [pc, #148]	; (800dc18 <__swsetup_r+0xd4>)
 800db82:	429c      	cmp	r4, r3
 800db84:	d101      	bne.n	800db8a <__swsetup_r+0x46>
 800db86:	68ac      	ldr	r4, [r5, #8]
 800db88:	e7eb      	b.n	800db62 <__swsetup_r+0x1e>
 800db8a:	4b24      	ldr	r3, [pc, #144]	; (800dc1c <__swsetup_r+0xd8>)
 800db8c:	429c      	cmp	r4, r3
 800db8e:	bf08      	it	eq
 800db90:	68ec      	ldreq	r4, [r5, #12]
 800db92:	e7e6      	b.n	800db62 <__swsetup_r+0x1e>
 800db94:	0758      	lsls	r0, r3, #29
 800db96:	d512      	bpl.n	800dbbe <__swsetup_r+0x7a>
 800db98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db9a:	b141      	cbz	r1, 800dbae <__swsetup_r+0x6a>
 800db9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dba0:	4299      	cmp	r1, r3
 800dba2:	d002      	beq.n	800dbaa <__swsetup_r+0x66>
 800dba4:	4630      	mov	r0, r6
 800dba6:	f7ff fb6f 	bl	800d288 <_free_r>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	6363      	str	r3, [r4, #52]	; 0x34
 800dbae:	89a3      	ldrh	r3, [r4, #12]
 800dbb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbb4:	81a3      	strh	r3, [r4, #12]
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	6063      	str	r3, [r4, #4]
 800dbba:	6923      	ldr	r3, [r4, #16]
 800dbbc:	6023      	str	r3, [r4, #0]
 800dbbe:	89a3      	ldrh	r3, [r4, #12]
 800dbc0:	f043 0308 	orr.w	r3, r3, #8
 800dbc4:	81a3      	strh	r3, [r4, #12]
 800dbc6:	6923      	ldr	r3, [r4, #16]
 800dbc8:	b94b      	cbnz	r3, 800dbde <__swsetup_r+0x9a>
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dbd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbd4:	d003      	beq.n	800dbde <__swsetup_r+0x9a>
 800dbd6:	4621      	mov	r1, r4
 800dbd8:	4630      	mov	r0, r6
 800dbda:	f000 fa07 	bl	800dfec <__smakebuf_r>
 800dbde:	89a0      	ldrh	r0, [r4, #12]
 800dbe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbe4:	f010 0301 	ands.w	r3, r0, #1
 800dbe8:	d00a      	beq.n	800dc00 <__swsetup_r+0xbc>
 800dbea:	2300      	movs	r3, #0
 800dbec:	60a3      	str	r3, [r4, #8]
 800dbee:	6963      	ldr	r3, [r4, #20]
 800dbf0:	425b      	negs	r3, r3
 800dbf2:	61a3      	str	r3, [r4, #24]
 800dbf4:	6923      	ldr	r3, [r4, #16]
 800dbf6:	b943      	cbnz	r3, 800dc0a <__swsetup_r+0xc6>
 800dbf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dbfc:	d1ba      	bne.n	800db74 <__swsetup_r+0x30>
 800dbfe:	bd70      	pop	{r4, r5, r6, pc}
 800dc00:	0781      	lsls	r1, r0, #30
 800dc02:	bf58      	it	pl
 800dc04:	6963      	ldrpl	r3, [r4, #20]
 800dc06:	60a3      	str	r3, [r4, #8]
 800dc08:	e7f4      	b.n	800dbf4 <__swsetup_r+0xb0>
 800dc0a:	2000      	movs	r0, #0
 800dc0c:	e7f7      	b.n	800dbfe <__swsetup_r+0xba>
 800dc0e:	bf00      	nop
 800dc10:	200000ac 	.word	0x200000ac
 800dc14:	0800f4a4 	.word	0x0800f4a4
 800dc18:	0800f4c4 	.word	0x0800f4c4
 800dc1c:	0800f484 	.word	0x0800f484

0800dc20 <abort>:
 800dc20:	b508      	push	{r3, lr}
 800dc22:	2006      	movs	r0, #6
 800dc24:	f000 fa52 	bl	800e0cc <raise>
 800dc28:	2001      	movs	r0, #1
 800dc2a:	f7f7 f977 	bl	8004f1c <_exit>
	...

0800dc30 <__sflush_r>:
 800dc30:	898a      	ldrh	r2, [r1, #12]
 800dc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc36:	4605      	mov	r5, r0
 800dc38:	0710      	lsls	r0, r2, #28
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	d458      	bmi.n	800dcf0 <__sflush_r+0xc0>
 800dc3e:	684b      	ldr	r3, [r1, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	dc05      	bgt.n	800dc50 <__sflush_r+0x20>
 800dc44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	dc02      	bgt.n	800dc50 <__sflush_r+0x20>
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc52:	2e00      	cmp	r6, #0
 800dc54:	d0f9      	beq.n	800dc4a <__sflush_r+0x1a>
 800dc56:	2300      	movs	r3, #0
 800dc58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc5c:	682f      	ldr	r7, [r5, #0]
 800dc5e:	602b      	str	r3, [r5, #0]
 800dc60:	d032      	beq.n	800dcc8 <__sflush_r+0x98>
 800dc62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc64:	89a3      	ldrh	r3, [r4, #12]
 800dc66:	075a      	lsls	r2, r3, #29
 800dc68:	d505      	bpl.n	800dc76 <__sflush_r+0x46>
 800dc6a:	6863      	ldr	r3, [r4, #4]
 800dc6c:	1ac0      	subs	r0, r0, r3
 800dc6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc70:	b10b      	cbz	r3, 800dc76 <__sflush_r+0x46>
 800dc72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc74:	1ac0      	subs	r0, r0, r3
 800dc76:	2300      	movs	r3, #0
 800dc78:	4602      	mov	r2, r0
 800dc7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc7c:	6a21      	ldr	r1, [r4, #32]
 800dc7e:	4628      	mov	r0, r5
 800dc80:	47b0      	blx	r6
 800dc82:	1c43      	adds	r3, r0, #1
 800dc84:	89a3      	ldrh	r3, [r4, #12]
 800dc86:	d106      	bne.n	800dc96 <__sflush_r+0x66>
 800dc88:	6829      	ldr	r1, [r5, #0]
 800dc8a:	291d      	cmp	r1, #29
 800dc8c:	d82c      	bhi.n	800dce8 <__sflush_r+0xb8>
 800dc8e:	4a2a      	ldr	r2, [pc, #168]	; (800dd38 <__sflush_r+0x108>)
 800dc90:	40ca      	lsrs	r2, r1
 800dc92:	07d6      	lsls	r6, r2, #31
 800dc94:	d528      	bpl.n	800dce8 <__sflush_r+0xb8>
 800dc96:	2200      	movs	r2, #0
 800dc98:	6062      	str	r2, [r4, #4]
 800dc9a:	04d9      	lsls	r1, r3, #19
 800dc9c:	6922      	ldr	r2, [r4, #16]
 800dc9e:	6022      	str	r2, [r4, #0]
 800dca0:	d504      	bpl.n	800dcac <__sflush_r+0x7c>
 800dca2:	1c42      	adds	r2, r0, #1
 800dca4:	d101      	bne.n	800dcaa <__sflush_r+0x7a>
 800dca6:	682b      	ldr	r3, [r5, #0]
 800dca8:	b903      	cbnz	r3, 800dcac <__sflush_r+0x7c>
 800dcaa:	6560      	str	r0, [r4, #84]	; 0x54
 800dcac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcae:	602f      	str	r7, [r5, #0]
 800dcb0:	2900      	cmp	r1, #0
 800dcb2:	d0ca      	beq.n	800dc4a <__sflush_r+0x1a>
 800dcb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcb8:	4299      	cmp	r1, r3
 800dcba:	d002      	beq.n	800dcc2 <__sflush_r+0x92>
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	f7ff fae3 	bl	800d288 <_free_r>
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	6360      	str	r0, [r4, #52]	; 0x34
 800dcc6:	e7c1      	b.n	800dc4c <__sflush_r+0x1c>
 800dcc8:	6a21      	ldr	r1, [r4, #32]
 800dcca:	2301      	movs	r3, #1
 800dccc:	4628      	mov	r0, r5
 800dcce:	47b0      	blx	r6
 800dcd0:	1c41      	adds	r1, r0, #1
 800dcd2:	d1c7      	bne.n	800dc64 <__sflush_r+0x34>
 800dcd4:	682b      	ldr	r3, [r5, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d0c4      	beq.n	800dc64 <__sflush_r+0x34>
 800dcda:	2b1d      	cmp	r3, #29
 800dcdc:	d001      	beq.n	800dce2 <__sflush_r+0xb2>
 800dcde:	2b16      	cmp	r3, #22
 800dce0:	d101      	bne.n	800dce6 <__sflush_r+0xb6>
 800dce2:	602f      	str	r7, [r5, #0]
 800dce4:	e7b1      	b.n	800dc4a <__sflush_r+0x1a>
 800dce6:	89a3      	ldrh	r3, [r4, #12]
 800dce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcec:	81a3      	strh	r3, [r4, #12]
 800dcee:	e7ad      	b.n	800dc4c <__sflush_r+0x1c>
 800dcf0:	690f      	ldr	r7, [r1, #16]
 800dcf2:	2f00      	cmp	r7, #0
 800dcf4:	d0a9      	beq.n	800dc4a <__sflush_r+0x1a>
 800dcf6:	0793      	lsls	r3, r2, #30
 800dcf8:	680e      	ldr	r6, [r1, #0]
 800dcfa:	bf08      	it	eq
 800dcfc:	694b      	ldreq	r3, [r1, #20]
 800dcfe:	600f      	str	r7, [r1, #0]
 800dd00:	bf18      	it	ne
 800dd02:	2300      	movne	r3, #0
 800dd04:	eba6 0807 	sub.w	r8, r6, r7
 800dd08:	608b      	str	r3, [r1, #8]
 800dd0a:	f1b8 0f00 	cmp.w	r8, #0
 800dd0e:	dd9c      	ble.n	800dc4a <__sflush_r+0x1a>
 800dd10:	6a21      	ldr	r1, [r4, #32]
 800dd12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd14:	4643      	mov	r3, r8
 800dd16:	463a      	mov	r2, r7
 800dd18:	4628      	mov	r0, r5
 800dd1a:	47b0      	blx	r6
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	dc06      	bgt.n	800dd2e <__sflush_r+0xfe>
 800dd20:	89a3      	ldrh	r3, [r4, #12]
 800dd22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd26:	81a3      	strh	r3, [r4, #12]
 800dd28:	f04f 30ff 	mov.w	r0, #4294967295
 800dd2c:	e78e      	b.n	800dc4c <__sflush_r+0x1c>
 800dd2e:	4407      	add	r7, r0
 800dd30:	eba8 0800 	sub.w	r8, r8, r0
 800dd34:	e7e9      	b.n	800dd0a <__sflush_r+0xda>
 800dd36:	bf00      	nop
 800dd38:	20400001 	.word	0x20400001

0800dd3c <_fflush_r>:
 800dd3c:	b538      	push	{r3, r4, r5, lr}
 800dd3e:	690b      	ldr	r3, [r1, #16]
 800dd40:	4605      	mov	r5, r0
 800dd42:	460c      	mov	r4, r1
 800dd44:	b913      	cbnz	r3, 800dd4c <_fflush_r+0x10>
 800dd46:	2500      	movs	r5, #0
 800dd48:	4628      	mov	r0, r5
 800dd4a:	bd38      	pop	{r3, r4, r5, pc}
 800dd4c:	b118      	cbz	r0, 800dd56 <_fflush_r+0x1a>
 800dd4e:	6983      	ldr	r3, [r0, #24]
 800dd50:	b90b      	cbnz	r3, 800dd56 <_fflush_r+0x1a>
 800dd52:	f000 f887 	bl	800de64 <__sinit>
 800dd56:	4b14      	ldr	r3, [pc, #80]	; (800dda8 <_fflush_r+0x6c>)
 800dd58:	429c      	cmp	r4, r3
 800dd5a:	d11b      	bne.n	800dd94 <_fflush_r+0x58>
 800dd5c:	686c      	ldr	r4, [r5, #4]
 800dd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d0ef      	beq.n	800dd46 <_fflush_r+0xa>
 800dd66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd68:	07d0      	lsls	r0, r2, #31
 800dd6a:	d404      	bmi.n	800dd76 <_fflush_r+0x3a>
 800dd6c:	0599      	lsls	r1, r3, #22
 800dd6e:	d402      	bmi.n	800dd76 <_fflush_r+0x3a>
 800dd70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd72:	f000 f915 	bl	800dfa0 <__retarget_lock_acquire_recursive>
 800dd76:	4628      	mov	r0, r5
 800dd78:	4621      	mov	r1, r4
 800dd7a:	f7ff ff59 	bl	800dc30 <__sflush_r>
 800dd7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd80:	07da      	lsls	r2, r3, #31
 800dd82:	4605      	mov	r5, r0
 800dd84:	d4e0      	bmi.n	800dd48 <_fflush_r+0xc>
 800dd86:	89a3      	ldrh	r3, [r4, #12]
 800dd88:	059b      	lsls	r3, r3, #22
 800dd8a:	d4dd      	bmi.n	800dd48 <_fflush_r+0xc>
 800dd8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd8e:	f000 f908 	bl	800dfa2 <__retarget_lock_release_recursive>
 800dd92:	e7d9      	b.n	800dd48 <_fflush_r+0xc>
 800dd94:	4b05      	ldr	r3, [pc, #20]	; (800ddac <_fflush_r+0x70>)
 800dd96:	429c      	cmp	r4, r3
 800dd98:	d101      	bne.n	800dd9e <_fflush_r+0x62>
 800dd9a:	68ac      	ldr	r4, [r5, #8]
 800dd9c:	e7df      	b.n	800dd5e <_fflush_r+0x22>
 800dd9e:	4b04      	ldr	r3, [pc, #16]	; (800ddb0 <_fflush_r+0x74>)
 800dda0:	429c      	cmp	r4, r3
 800dda2:	bf08      	it	eq
 800dda4:	68ec      	ldreq	r4, [r5, #12]
 800dda6:	e7da      	b.n	800dd5e <_fflush_r+0x22>
 800dda8:	0800f4a4 	.word	0x0800f4a4
 800ddac:	0800f4c4 	.word	0x0800f4c4
 800ddb0:	0800f484 	.word	0x0800f484

0800ddb4 <std>:
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	b510      	push	{r4, lr}
 800ddb8:	4604      	mov	r4, r0
 800ddba:	e9c0 3300 	strd	r3, r3, [r0]
 800ddbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ddc2:	6083      	str	r3, [r0, #8]
 800ddc4:	8181      	strh	r1, [r0, #12]
 800ddc6:	6643      	str	r3, [r0, #100]	; 0x64
 800ddc8:	81c2      	strh	r2, [r0, #14]
 800ddca:	6183      	str	r3, [r0, #24]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	2208      	movs	r2, #8
 800ddd0:	305c      	adds	r0, #92	; 0x5c
 800ddd2:	f7fd fba5 	bl	800b520 <memset>
 800ddd6:	4b05      	ldr	r3, [pc, #20]	; (800ddec <std+0x38>)
 800ddd8:	6263      	str	r3, [r4, #36]	; 0x24
 800ddda:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <std+0x3c>)
 800dddc:	62a3      	str	r3, [r4, #40]	; 0x28
 800ddde:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <std+0x40>)
 800dde0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dde2:	4b05      	ldr	r3, [pc, #20]	; (800ddf8 <std+0x44>)
 800dde4:	6224      	str	r4, [r4, #32]
 800dde6:	6323      	str	r3, [r4, #48]	; 0x30
 800dde8:	bd10      	pop	{r4, pc}
 800ddea:	bf00      	nop
 800ddec:	0800e105 	.word	0x0800e105
 800ddf0:	0800e127 	.word	0x0800e127
 800ddf4:	0800e15f 	.word	0x0800e15f
 800ddf8:	0800e183 	.word	0x0800e183

0800ddfc <_cleanup_r>:
 800ddfc:	4901      	ldr	r1, [pc, #4]	; (800de04 <_cleanup_r+0x8>)
 800ddfe:	f000 b8af 	b.w	800df60 <_fwalk_reent>
 800de02:	bf00      	nop
 800de04:	0800dd3d 	.word	0x0800dd3d

0800de08 <__sfmoreglue>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	1e4a      	subs	r2, r1, #1
 800de0c:	2568      	movs	r5, #104	; 0x68
 800de0e:	4355      	muls	r5, r2
 800de10:	460e      	mov	r6, r1
 800de12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800de16:	f7ff fa87 	bl	800d328 <_malloc_r>
 800de1a:	4604      	mov	r4, r0
 800de1c:	b140      	cbz	r0, 800de30 <__sfmoreglue+0x28>
 800de1e:	2100      	movs	r1, #0
 800de20:	e9c0 1600 	strd	r1, r6, [r0]
 800de24:	300c      	adds	r0, #12
 800de26:	60a0      	str	r0, [r4, #8]
 800de28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de2c:	f7fd fb78 	bl	800b520 <memset>
 800de30:	4620      	mov	r0, r4
 800de32:	bd70      	pop	{r4, r5, r6, pc}

0800de34 <__sfp_lock_acquire>:
 800de34:	4801      	ldr	r0, [pc, #4]	; (800de3c <__sfp_lock_acquire+0x8>)
 800de36:	f000 b8b3 	b.w	800dfa0 <__retarget_lock_acquire_recursive>
 800de3a:	bf00      	nop
 800de3c:	20000f04 	.word	0x20000f04

0800de40 <__sfp_lock_release>:
 800de40:	4801      	ldr	r0, [pc, #4]	; (800de48 <__sfp_lock_release+0x8>)
 800de42:	f000 b8ae 	b.w	800dfa2 <__retarget_lock_release_recursive>
 800de46:	bf00      	nop
 800de48:	20000f04 	.word	0x20000f04

0800de4c <__sinit_lock_acquire>:
 800de4c:	4801      	ldr	r0, [pc, #4]	; (800de54 <__sinit_lock_acquire+0x8>)
 800de4e:	f000 b8a7 	b.w	800dfa0 <__retarget_lock_acquire_recursive>
 800de52:	bf00      	nop
 800de54:	20000eff 	.word	0x20000eff

0800de58 <__sinit_lock_release>:
 800de58:	4801      	ldr	r0, [pc, #4]	; (800de60 <__sinit_lock_release+0x8>)
 800de5a:	f000 b8a2 	b.w	800dfa2 <__retarget_lock_release_recursive>
 800de5e:	bf00      	nop
 800de60:	20000eff 	.word	0x20000eff

0800de64 <__sinit>:
 800de64:	b510      	push	{r4, lr}
 800de66:	4604      	mov	r4, r0
 800de68:	f7ff fff0 	bl	800de4c <__sinit_lock_acquire>
 800de6c:	69a3      	ldr	r3, [r4, #24]
 800de6e:	b11b      	cbz	r3, 800de78 <__sinit+0x14>
 800de70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de74:	f7ff bff0 	b.w	800de58 <__sinit_lock_release>
 800de78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de7c:	6523      	str	r3, [r4, #80]	; 0x50
 800de7e:	4b13      	ldr	r3, [pc, #76]	; (800decc <__sinit+0x68>)
 800de80:	4a13      	ldr	r2, [pc, #76]	; (800ded0 <__sinit+0x6c>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	62a2      	str	r2, [r4, #40]	; 0x28
 800de86:	42a3      	cmp	r3, r4
 800de88:	bf04      	itt	eq
 800de8a:	2301      	moveq	r3, #1
 800de8c:	61a3      	streq	r3, [r4, #24]
 800de8e:	4620      	mov	r0, r4
 800de90:	f000 f820 	bl	800ded4 <__sfp>
 800de94:	6060      	str	r0, [r4, #4]
 800de96:	4620      	mov	r0, r4
 800de98:	f000 f81c 	bl	800ded4 <__sfp>
 800de9c:	60a0      	str	r0, [r4, #8]
 800de9e:	4620      	mov	r0, r4
 800dea0:	f000 f818 	bl	800ded4 <__sfp>
 800dea4:	2200      	movs	r2, #0
 800dea6:	60e0      	str	r0, [r4, #12]
 800dea8:	2104      	movs	r1, #4
 800deaa:	6860      	ldr	r0, [r4, #4]
 800deac:	f7ff ff82 	bl	800ddb4 <std>
 800deb0:	68a0      	ldr	r0, [r4, #8]
 800deb2:	2201      	movs	r2, #1
 800deb4:	2109      	movs	r1, #9
 800deb6:	f7ff ff7d 	bl	800ddb4 <std>
 800deba:	68e0      	ldr	r0, [r4, #12]
 800debc:	2202      	movs	r2, #2
 800debe:	2112      	movs	r1, #18
 800dec0:	f7ff ff78 	bl	800ddb4 <std>
 800dec4:	2301      	movs	r3, #1
 800dec6:	61a3      	str	r3, [r4, #24]
 800dec8:	e7d2      	b.n	800de70 <__sinit+0xc>
 800deca:	bf00      	nop
 800decc:	0800f100 	.word	0x0800f100
 800ded0:	0800ddfd 	.word	0x0800ddfd

0800ded4 <__sfp>:
 800ded4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ded6:	4607      	mov	r7, r0
 800ded8:	f7ff ffac 	bl	800de34 <__sfp_lock_acquire>
 800dedc:	4b1e      	ldr	r3, [pc, #120]	; (800df58 <__sfp+0x84>)
 800dede:	681e      	ldr	r6, [r3, #0]
 800dee0:	69b3      	ldr	r3, [r6, #24]
 800dee2:	b913      	cbnz	r3, 800deea <__sfp+0x16>
 800dee4:	4630      	mov	r0, r6
 800dee6:	f7ff ffbd 	bl	800de64 <__sinit>
 800deea:	3648      	adds	r6, #72	; 0x48
 800deec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800def0:	3b01      	subs	r3, #1
 800def2:	d503      	bpl.n	800defc <__sfp+0x28>
 800def4:	6833      	ldr	r3, [r6, #0]
 800def6:	b30b      	cbz	r3, 800df3c <__sfp+0x68>
 800def8:	6836      	ldr	r6, [r6, #0]
 800defa:	e7f7      	b.n	800deec <__sfp+0x18>
 800defc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800df00:	b9d5      	cbnz	r5, 800df38 <__sfp+0x64>
 800df02:	4b16      	ldr	r3, [pc, #88]	; (800df5c <__sfp+0x88>)
 800df04:	60e3      	str	r3, [r4, #12]
 800df06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df0a:	6665      	str	r5, [r4, #100]	; 0x64
 800df0c:	f000 f847 	bl	800df9e <__retarget_lock_init_recursive>
 800df10:	f7ff ff96 	bl	800de40 <__sfp_lock_release>
 800df14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800df18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800df1c:	6025      	str	r5, [r4, #0]
 800df1e:	61a5      	str	r5, [r4, #24]
 800df20:	2208      	movs	r2, #8
 800df22:	4629      	mov	r1, r5
 800df24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800df28:	f7fd fafa 	bl	800b520 <memset>
 800df2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800df30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800df34:	4620      	mov	r0, r4
 800df36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df38:	3468      	adds	r4, #104	; 0x68
 800df3a:	e7d9      	b.n	800def0 <__sfp+0x1c>
 800df3c:	2104      	movs	r1, #4
 800df3e:	4638      	mov	r0, r7
 800df40:	f7ff ff62 	bl	800de08 <__sfmoreglue>
 800df44:	4604      	mov	r4, r0
 800df46:	6030      	str	r0, [r6, #0]
 800df48:	2800      	cmp	r0, #0
 800df4a:	d1d5      	bne.n	800def8 <__sfp+0x24>
 800df4c:	f7ff ff78 	bl	800de40 <__sfp_lock_release>
 800df50:	230c      	movs	r3, #12
 800df52:	603b      	str	r3, [r7, #0]
 800df54:	e7ee      	b.n	800df34 <__sfp+0x60>
 800df56:	bf00      	nop
 800df58:	0800f100 	.word	0x0800f100
 800df5c:	ffff0001 	.word	0xffff0001

0800df60 <_fwalk_reent>:
 800df60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df64:	4606      	mov	r6, r0
 800df66:	4688      	mov	r8, r1
 800df68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df6c:	2700      	movs	r7, #0
 800df6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df72:	f1b9 0901 	subs.w	r9, r9, #1
 800df76:	d505      	bpl.n	800df84 <_fwalk_reent+0x24>
 800df78:	6824      	ldr	r4, [r4, #0]
 800df7a:	2c00      	cmp	r4, #0
 800df7c:	d1f7      	bne.n	800df6e <_fwalk_reent+0xe>
 800df7e:	4638      	mov	r0, r7
 800df80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df84:	89ab      	ldrh	r3, [r5, #12]
 800df86:	2b01      	cmp	r3, #1
 800df88:	d907      	bls.n	800df9a <_fwalk_reent+0x3a>
 800df8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df8e:	3301      	adds	r3, #1
 800df90:	d003      	beq.n	800df9a <_fwalk_reent+0x3a>
 800df92:	4629      	mov	r1, r5
 800df94:	4630      	mov	r0, r6
 800df96:	47c0      	blx	r8
 800df98:	4307      	orrs	r7, r0
 800df9a:	3568      	adds	r5, #104	; 0x68
 800df9c:	e7e9      	b.n	800df72 <_fwalk_reent+0x12>

0800df9e <__retarget_lock_init_recursive>:
 800df9e:	4770      	bx	lr

0800dfa0 <__retarget_lock_acquire_recursive>:
 800dfa0:	4770      	bx	lr

0800dfa2 <__retarget_lock_release_recursive>:
 800dfa2:	4770      	bx	lr

0800dfa4 <__swhatbuf_r>:
 800dfa4:	b570      	push	{r4, r5, r6, lr}
 800dfa6:	460e      	mov	r6, r1
 800dfa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfac:	2900      	cmp	r1, #0
 800dfae:	b096      	sub	sp, #88	; 0x58
 800dfb0:	4614      	mov	r4, r2
 800dfb2:	461d      	mov	r5, r3
 800dfb4:	da07      	bge.n	800dfc6 <__swhatbuf_r+0x22>
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	602b      	str	r3, [r5, #0]
 800dfba:	89b3      	ldrh	r3, [r6, #12]
 800dfbc:	061a      	lsls	r2, r3, #24
 800dfbe:	d410      	bmi.n	800dfe2 <__swhatbuf_r+0x3e>
 800dfc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfc4:	e00e      	b.n	800dfe4 <__swhatbuf_r+0x40>
 800dfc6:	466a      	mov	r2, sp
 800dfc8:	f000 f902 	bl	800e1d0 <_fstat_r>
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	dbf2      	blt.n	800dfb6 <__swhatbuf_r+0x12>
 800dfd0:	9a01      	ldr	r2, [sp, #4]
 800dfd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dfd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dfda:	425a      	negs	r2, r3
 800dfdc:	415a      	adcs	r2, r3
 800dfde:	602a      	str	r2, [r5, #0]
 800dfe0:	e7ee      	b.n	800dfc0 <__swhatbuf_r+0x1c>
 800dfe2:	2340      	movs	r3, #64	; 0x40
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	6023      	str	r3, [r4, #0]
 800dfe8:	b016      	add	sp, #88	; 0x58
 800dfea:	bd70      	pop	{r4, r5, r6, pc}

0800dfec <__smakebuf_r>:
 800dfec:	898b      	ldrh	r3, [r1, #12]
 800dfee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dff0:	079d      	lsls	r5, r3, #30
 800dff2:	4606      	mov	r6, r0
 800dff4:	460c      	mov	r4, r1
 800dff6:	d507      	bpl.n	800e008 <__smakebuf_r+0x1c>
 800dff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dffc:	6023      	str	r3, [r4, #0]
 800dffe:	6123      	str	r3, [r4, #16]
 800e000:	2301      	movs	r3, #1
 800e002:	6163      	str	r3, [r4, #20]
 800e004:	b002      	add	sp, #8
 800e006:	bd70      	pop	{r4, r5, r6, pc}
 800e008:	ab01      	add	r3, sp, #4
 800e00a:	466a      	mov	r2, sp
 800e00c:	f7ff ffca 	bl	800dfa4 <__swhatbuf_r>
 800e010:	9900      	ldr	r1, [sp, #0]
 800e012:	4605      	mov	r5, r0
 800e014:	4630      	mov	r0, r6
 800e016:	f7ff f987 	bl	800d328 <_malloc_r>
 800e01a:	b948      	cbnz	r0, 800e030 <__smakebuf_r+0x44>
 800e01c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e020:	059a      	lsls	r2, r3, #22
 800e022:	d4ef      	bmi.n	800e004 <__smakebuf_r+0x18>
 800e024:	f023 0303 	bic.w	r3, r3, #3
 800e028:	f043 0302 	orr.w	r3, r3, #2
 800e02c:	81a3      	strh	r3, [r4, #12]
 800e02e:	e7e3      	b.n	800dff8 <__smakebuf_r+0xc>
 800e030:	4b0d      	ldr	r3, [pc, #52]	; (800e068 <__smakebuf_r+0x7c>)
 800e032:	62b3      	str	r3, [r6, #40]	; 0x28
 800e034:	89a3      	ldrh	r3, [r4, #12]
 800e036:	6020      	str	r0, [r4, #0]
 800e038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e03c:	81a3      	strh	r3, [r4, #12]
 800e03e:	9b00      	ldr	r3, [sp, #0]
 800e040:	6163      	str	r3, [r4, #20]
 800e042:	9b01      	ldr	r3, [sp, #4]
 800e044:	6120      	str	r0, [r4, #16]
 800e046:	b15b      	cbz	r3, 800e060 <__smakebuf_r+0x74>
 800e048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e04c:	4630      	mov	r0, r6
 800e04e:	f000 f8d1 	bl	800e1f4 <_isatty_r>
 800e052:	b128      	cbz	r0, 800e060 <__smakebuf_r+0x74>
 800e054:	89a3      	ldrh	r3, [r4, #12]
 800e056:	f023 0303 	bic.w	r3, r3, #3
 800e05a:	f043 0301 	orr.w	r3, r3, #1
 800e05e:	81a3      	strh	r3, [r4, #12]
 800e060:	89a0      	ldrh	r0, [r4, #12]
 800e062:	4305      	orrs	r5, r0
 800e064:	81a5      	strh	r5, [r4, #12]
 800e066:	e7cd      	b.n	800e004 <__smakebuf_r+0x18>
 800e068:	0800ddfd 	.word	0x0800ddfd

0800e06c <_malloc_usable_size_r>:
 800e06c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e070:	1f18      	subs	r0, r3, #4
 800e072:	2b00      	cmp	r3, #0
 800e074:	bfbc      	itt	lt
 800e076:	580b      	ldrlt	r3, [r1, r0]
 800e078:	18c0      	addlt	r0, r0, r3
 800e07a:	4770      	bx	lr

0800e07c <_raise_r>:
 800e07c:	291f      	cmp	r1, #31
 800e07e:	b538      	push	{r3, r4, r5, lr}
 800e080:	4604      	mov	r4, r0
 800e082:	460d      	mov	r5, r1
 800e084:	d904      	bls.n	800e090 <_raise_r+0x14>
 800e086:	2316      	movs	r3, #22
 800e088:	6003      	str	r3, [r0, #0]
 800e08a:	f04f 30ff 	mov.w	r0, #4294967295
 800e08e:	bd38      	pop	{r3, r4, r5, pc}
 800e090:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e092:	b112      	cbz	r2, 800e09a <_raise_r+0x1e>
 800e094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e098:	b94b      	cbnz	r3, 800e0ae <_raise_r+0x32>
 800e09a:	4620      	mov	r0, r4
 800e09c:	f000 f830 	bl	800e100 <_getpid_r>
 800e0a0:	462a      	mov	r2, r5
 800e0a2:	4601      	mov	r1, r0
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0aa:	f000 b817 	b.w	800e0dc <_kill_r>
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d00a      	beq.n	800e0c8 <_raise_r+0x4c>
 800e0b2:	1c59      	adds	r1, r3, #1
 800e0b4:	d103      	bne.n	800e0be <_raise_r+0x42>
 800e0b6:	2316      	movs	r3, #22
 800e0b8:	6003      	str	r3, [r0, #0]
 800e0ba:	2001      	movs	r0, #1
 800e0bc:	e7e7      	b.n	800e08e <_raise_r+0x12>
 800e0be:	2400      	movs	r4, #0
 800e0c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	4798      	blx	r3
 800e0c8:	2000      	movs	r0, #0
 800e0ca:	e7e0      	b.n	800e08e <_raise_r+0x12>

0800e0cc <raise>:
 800e0cc:	4b02      	ldr	r3, [pc, #8]	; (800e0d8 <raise+0xc>)
 800e0ce:	4601      	mov	r1, r0
 800e0d0:	6818      	ldr	r0, [r3, #0]
 800e0d2:	f7ff bfd3 	b.w	800e07c <_raise_r>
 800e0d6:	bf00      	nop
 800e0d8:	200000ac 	.word	0x200000ac

0800e0dc <_kill_r>:
 800e0dc:	b538      	push	{r3, r4, r5, lr}
 800e0de:	4d07      	ldr	r5, [pc, #28]	; (800e0fc <_kill_r+0x20>)
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	4604      	mov	r4, r0
 800e0e4:	4608      	mov	r0, r1
 800e0e6:	4611      	mov	r1, r2
 800e0e8:	602b      	str	r3, [r5, #0]
 800e0ea:	f7f6 ff07 	bl	8004efc <_kill>
 800e0ee:	1c43      	adds	r3, r0, #1
 800e0f0:	d102      	bne.n	800e0f8 <_kill_r+0x1c>
 800e0f2:	682b      	ldr	r3, [r5, #0]
 800e0f4:	b103      	cbz	r3, 800e0f8 <_kill_r+0x1c>
 800e0f6:	6023      	str	r3, [r4, #0]
 800e0f8:	bd38      	pop	{r3, r4, r5, pc}
 800e0fa:	bf00      	nop
 800e0fc:	20000ef8 	.word	0x20000ef8

0800e100 <_getpid_r>:
 800e100:	f7f6 bef4 	b.w	8004eec <_getpid>

0800e104 <__sread>:
 800e104:	b510      	push	{r4, lr}
 800e106:	460c      	mov	r4, r1
 800e108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e10c:	f000 f894 	bl	800e238 <_read_r>
 800e110:	2800      	cmp	r0, #0
 800e112:	bfab      	itete	ge
 800e114:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e116:	89a3      	ldrhlt	r3, [r4, #12]
 800e118:	181b      	addge	r3, r3, r0
 800e11a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e11e:	bfac      	ite	ge
 800e120:	6563      	strge	r3, [r4, #84]	; 0x54
 800e122:	81a3      	strhlt	r3, [r4, #12]
 800e124:	bd10      	pop	{r4, pc}

0800e126 <__swrite>:
 800e126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e12a:	461f      	mov	r7, r3
 800e12c:	898b      	ldrh	r3, [r1, #12]
 800e12e:	05db      	lsls	r3, r3, #23
 800e130:	4605      	mov	r5, r0
 800e132:	460c      	mov	r4, r1
 800e134:	4616      	mov	r6, r2
 800e136:	d505      	bpl.n	800e144 <__swrite+0x1e>
 800e138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e13c:	2302      	movs	r3, #2
 800e13e:	2200      	movs	r2, #0
 800e140:	f000 f868 	bl	800e214 <_lseek_r>
 800e144:	89a3      	ldrh	r3, [r4, #12]
 800e146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e14a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e14e:	81a3      	strh	r3, [r4, #12]
 800e150:	4632      	mov	r2, r6
 800e152:	463b      	mov	r3, r7
 800e154:	4628      	mov	r0, r5
 800e156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e15a:	f000 b817 	b.w	800e18c <_write_r>

0800e15e <__sseek>:
 800e15e:	b510      	push	{r4, lr}
 800e160:	460c      	mov	r4, r1
 800e162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e166:	f000 f855 	bl	800e214 <_lseek_r>
 800e16a:	1c43      	adds	r3, r0, #1
 800e16c:	89a3      	ldrh	r3, [r4, #12]
 800e16e:	bf15      	itete	ne
 800e170:	6560      	strne	r0, [r4, #84]	; 0x54
 800e172:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e176:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e17a:	81a3      	strheq	r3, [r4, #12]
 800e17c:	bf18      	it	ne
 800e17e:	81a3      	strhne	r3, [r4, #12]
 800e180:	bd10      	pop	{r4, pc}

0800e182 <__sclose>:
 800e182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e186:	f000 b813 	b.w	800e1b0 <_close_r>
	...

0800e18c <_write_r>:
 800e18c:	b538      	push	{r3, r4, r5, lr}
 800e18e:	4d07      	ldr	r5, [pc, #28]	; (800e1ac <_write_r+0x20>)
 800e190:	4604      	mov	r4, r0
 800e192:	4608      	mov	r0, r1
 800e194:	4611      	mov	r1, r2
 800e196:	2200      	movs	r2, #0
 800e198:	602a      	str	r2, [r5, #0]
 800e19a:	461a      	mov	r2, r3
 800e19c:	f7f6 fee5 	bl	8004f6a <_write>
 800e1a0:	1c43      	adds	r3, r0, #1
 800e1a2:	d102      	bne.n	800e1aa <_write_r+0x1e>
 800e1a4:	682b      	ldr	r3, [r5, #0]
 800e1a6:	b103      	cbz	r3, 800e1aa <_write_r+0x1e>
 800e1a8:	6023      	str	r3, [r4, #0]
 800e1aa:	bd38      	pop	{r3, r4, r5, pc}
 800e1ac:	20000ef8 	.word	0x20000ef8

0800e1b0 <_close_r>:
 800e1b0:	b538      	push	{r3, r4, r5, lr}
 800e1b2:	4d06      	ldr	r5, [pc, #24]	; (800e1cc <_close_r+0x1c>)
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	4604      	mov	r4, r0
 800e1b8:	4608      	mov	r0, r1
 800e1ba:	602b      	str	r3, [r5, #0]
 800e1bc:	f7f6 fef1 	bl	8004fa2 <_close>
 800e1c0:	1c43      	adds	r3, r0, #1
 800e1c2:	d102      	bne.n	800e1ca <_close_r+0x1a>
 800e1c4:	682b      	ldr	r3, [r5, #0]
 800e1c6:	b103      	cbz	r3, 800e1ca <_close_r+0x1a>
 800e1c8:	6023      	str	r3, [r4, #0]
 800e1ca:	bd38      	pop	{r3, r4, r5, pc}
 800e1cc:	20000ef8 	.word	0x20000ef8

0800e1d0 <_fstat_r>:
 800e1d0:	b538      	push	{r3, r4, r5, lr}
 800e1d2:	4d07      	ldr	r5, [pc, #28]	; (800e1f0 <_fstat_r+0x20>)
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	4608      	mov	r0, r1
 800e1da:	4611      	mov	r1, r2
 800e1dc:	602b      	str	r3, [r5, #0]
 800e1de:	f7f6 feec 	bl	8004fba <_fstat>
 800e1e2:	1c43      	adds	r3, r0, #1
 800e1e4:	d102      	bne.n	800e1ec <_fstat_r+0x1c>
 800e1e6:	682b      	ldr	r3, [r5, #0]
 800e1e8:	b103      	cbz	r3, 800e1ec <_fstat_r+0x1c>
 800e1ea:	6023      	str	r3, [r4, #0]
 800e1ec:	bd38      	pop	{r3, r4, r5, pc}
 800e1ee:	bf00      	nop
 800e1f0:	20000ef8 	.word	0x20000ef8

0800e1f4 <_isatty_r>:
 800e1f4:	b538      	push	{r3, r4, r5, lr}
 800e1f6:	4d06      	ldr	r5, [pc, #24]	; (800e210 <_isatty_r+0x1c>)
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	4608      	mov	r0, r1
 800e1fe:	602b      	str	r3, [r5, #0]
 800e200:	f7f6 feeb 	bl	8004fda <_isatty>
 800e204:	1c43      	adds	r3, r0, #1
 800e206:	d102      	bne.n	800e20e <_isatty_r+0x1a>
 800e208:	682b      	ldr	r3, [r5, #0]
 800e20a:	b103      	cbz	r3, 800e20e <_isatty_r+0x1a>
 800e20c:	6023      	str	r3, [r4, #0]
 800e20e:	bd38      	pop	{r3, r4, r5, pc}
 800e210:	20000ef8 	.word	0x20000ef8

0800e214 <_lseek_r>:
 800e214:	b538      	push	{r3, r4, r5, lr}
 800e216:	4d07      	ldr	r5, [pc, #28]	; (800e234 <_lseek_r+0x20>)
 800e218:	4604      	mov	r4, r0
 800e21a:	4608      	mov	r0, r1
 800e21c:	4611      	mov	r1, r2
 800e21e:	2200      	movs	r2, #0
 800e220:	602a      	str	r2, [r5, #0]
 800e222:	461a      	mov	r2, r3
 800e224:	f7f6 fee4 	bl	8004ff0 <_lseek>
 800e228:	1c43      	adds	r3, r0, #1
 800e22a:	d102      	bne.n	800e232 <_lseek_r+0x1e>
 800e22c:	682b      	ldr	r3, [r5, #0]
 800e22e:	b103      	cbz	r3, 800e232 <_lseek_r+0x1e>
 800e230:	6023      	str	r3, [r4, #0]
 800e232:	bd38      	pop	{r3, r4, r5, pc}
 800e234:	20000ef8 	.word	0x20000ef8

0800e238 <_read_r>:
 800e238:	b538      	push	{r3, r4, r5, lr}
 800e23a:	4d07      	ldr	r5, [pc, #28]	; (800e258 <_read_r+0x20>)
 800e23c:	4604      	mov	r4, r0
 800e23e:	4608      	mov	r0, r1
 800e240:	4611      	mov	r1, r2
 800e242:	2200      	movs	r2, #0
 800e244:	602a      	str	r2, [r5, #0]
 800e246:	461a      	mov	r2, r3
 800e248:	f7f6 fe72 	bl	8004f30 <_read>
 800e24c:	1c43      	adds	r3, r0, #1
 800e24e:	d102      	bne.n	800e256 <_read_r+0x1e>
 800e250:	682b      	ldr	r3, [r5, #0]
 800e252:	b103      	cbz	r3, 800e256 <_read_r+0x1e>
 800e254:	6023      	str	r3, [r4, #0]
 800e256:	bd38      	pop	{r3, r4, r5, pc}
 800e258:	20000ef8 	.word	0x20000ef8
 800e25c:	00000000 	.word	0x00000000

0800e260 <atan>:
 800e260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e264:	ec55 4b10 	vmov	r4, r5, d0
 800e268:	4bc3      	ldr	r3, [pc, #780]	; (800e578 <atan+0x318>)
 800e26a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e26e:	429e      	cmp	r6, r3
 800e270:	46ab      	mov	fp, r5
 800e272:	dd18      	ble.n	800e2a6 <atan+0x46>
 800e274:	4bc1      	ldr	r3, [pc, #772]	; (800e57c <atan+0x31c>)
 800e276:	429e      	cmp	r6, r3
 800e278:	dc01      	bgt.n	800e27e <atan+0x1e>
 800e27a:	d109      	bne.n	800e290 <atan+0x30>
 800e27c:	b144      	cbz	r4, 800e290 <atan+0x30>
 800e27e:	4622      	mov	r2, r4
 800e280:	462b      	mov	r3, r5
 800e282:	4620      	mov	r0, r4
 800e284:	4629      	mov	r1, r5
 800e286:	f7f2 f821 	bl	80002cc <__adddf3>
 800e28a:	4604      	mov	r4, r0
 800e28c:	460d      	mov	r5, r1
 800e28e:	e006      	b.n	800e29e <atan+0x3e>
 800e290:	f1bb 0f00 	cmp.w	fp, #0
 800e294:	f300 8131 	bgt.w	800e4fa <atan+0x29a>
 800e298:	a59b      	add	r5, pc, #620	; (adr r5, 800e508 <atan+0x2a8>)
 800e29a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e29e:	ec45 4b10 	vmov	d0, r4, r5
 800e2a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a6:	4bb6      	ldr	r3, [pc, #728]	; (800e580 <atan+0x320>)
 800e2a8:	429e      	cmp	r6, r3
 800e2aa:	dc14      	bgt.n	800e2d6 <atan+0x76>
 800e2ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e2b0:	429e      	cmp	r6, r3
 800e2b2:	dc0d      	bgt.n	800e2d0 <atan+0x70>
 800e2b4:	a396      	add	r3, pc, #600	; (adr r3, 800e510 <atan+0x2b0>)
 800e2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ba:	ee10 0a10 	vmov	r0, s0
 800e2be:	4629      	mov	r1, r5
 800e2c0:	f7f2 f804 	bl	80002cc <__adddf3>
 800e2c4:	4baf      	ldr	r3, [pc, #700]	; (800e584 <atan+0x324>)
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f7f2 fc46 	bl	8000b58 <__aeabi_dcmpgt>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d1e6      	bne.n	800e29e <atan+0x3e>
 800e2d0:	f04f 3aff 	mov.w	sl, #4294967295
 800e2d4:	e02b      	b.n	800e32e <atan+0xce>
 800e2d6:	f000 f963 	bl	800e5a0 <fabs>
 800e2da:	4bab      	ldr	r3, [pc, #684]	; (800e588 <atan+0x328>)
 800e2dc:	429e      	cmp	r6, r3
 800e2de:	ec55 4b10 	vmov	r4, r5, d0
 800e2e2:	f300 80bf 	bgt.w	800e464 <atan+0x204>
 800e2e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e2ea:	429e      	cmp	r6, r3
 800e2ec:	f300 80a0 	bgt.w	800e430 <atan+0x1d0>
 800e2f0:	ee10 2a10 	vmov	r2, s0
 800e2f4:	ee10 0a10 	vmov	r0, s0
 800e2f8:	462b      	mov	r3, r5
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	f7f1 ffe6 	bl	80002cc <__adddf3>
 800e300:	4ba0      	ldr	r3, [pc, #640]	; (800e584 <atan+0x324>)
 800e302:	2200      	movs	r2, #0
 800e304:	f7f1 ffe0 	bl	80002c8 <__aeabi_dsub>
 800e308:	2200      	movs	r2, #0
 800e30a:	4606      	mov	r6, r0
 800e30c:	460f      	mov	r7, r1
 800e30e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e312:	4620      	mov	r0, r4
 800e314:	4629      	mov	r1, r5
 800e316:	f7f1 ffd9 	bl	80002cc <__adddf3>
 800e31a:	4602      	mov	r2, r0
 800e31c:	460b      	mov	r3, r1
 800e31e:	4630      	mov	r0, r6
 800e320:	4639      	mov	r1, r7
 800e322:	f7f2 fab3 	bl	800088c <__aeabi_ddiv>
 800e326:	f04f 0a00 	mov.w	sl, #0
 800e32a:	4604      	mov	r4, r0
 800e32c:	460d      	mov	r5, r1
 800e32e:	4622      	mov	r2, r4
 800e330:	462b      	mov	r3, r5
 800e332:	4620      	mov	r0, r4
 800e334:	4629      	mov	r1, r5
 800e336:	f7f2 f97f 	bl	8000638 <__aeabi_dmul>
 800e33a:	4602      	mov	r2, r0
 800e33c:	460b      	mov	r3, r1
 800e33e:	4680      	mov	r8, r0
 800e340:	4689      	mov	r9, r1
 800e342:	f7f2 f979 	bl	8000638 <__aeabi_dmul>
 800e346:	a374      	add	r3, pc, #464	; (adr r3, 800e518 <atan+0x2b8>)
 800e348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34c:	4606      	mov	r6, r0
 800e34e:	460f      	mov	r7, r1
 800e350:	f7f2 f972 	bl	8000638 <__aeabi_dmul>
 800e354:	a372      	add	r3, pc, #456	; (adr r3, 800e520 <atan+0x2c0>)
 800e356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35a:	f7f1 ffb7 	bl	80002cc <__adddf3>
 800e35e:	4632      	mov	r2, r6
 800e360:	463b      	mov	r3, r7
 800e362:	f7f2 f969 	bl	8000638 <__aeabi_dmul>
 800e366:	a370      	add	r3, pc, #448	; (adr r3, 800e528 <atan+0x2c8>)
 800e368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36c:	f7f1 ffae 	bl	80002cc <__adddf3>
 800e370:	4632      	mov	r2, r6
 800e372:	463b      	mov	r3, r7
 800e374:	f7f2 f960 	bl	8000638 <__aeabi_dmul>
 800e378:	a36d      	add	r3, pc, #436	; (adr r3, 800e530 <atan+0x2d0>)
 800e37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37e:	f7f1 ffa5 	bl	80002cc <__adddf3>
 800e382:	4632      	mov	r2, r6
 800e384:	463b      	mov	r3, r7
 800e386:	f7f2 f957 	bl	8000638 <__aeabi_dmul>
 800e38a:	a36b      	add	r3, pc, #428	; (adr r3, 800e538 <atan+0x2d8>)
 800e38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e390:	f7f1 ff9c 	bl	80002cc <__adddf3>
 800e394:	4632      	mov	r2, r6
 800e396:	463b      	mov	r3, r7
 800e398:	f7f2 f94e 	bl	8000638 <__aeabi_dmul>
 800e39c:	a368      	add	r3, pc, #416	; (adr r3, 800e540 <atan+0x2e0>)
 800e39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a2:	f7f1 ff93 	bl	80002cc <__adddf3>
 800e3a6:	4642      	mov	r2, r8
 800e3a8:	464b      	mov	r3, r9
 800e3aa:	f7f2 f945 	bl	8000638 <__aeabi_dmul>
 800e3ae:	a366      	add	r3, pc, #408	; (adr r3, 800e548 <atan+0x2e8>)
 800e3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b4:	4680      	mov	r8, r0
 800e3b6:	4689      	mov	r9, r1
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	4639      	mov	r1, r7
 800e3bc:	f7f2 f93c 	bl	8000638 <__aeabi_dmul>
 800e3c0:	a363      	add	r3, pc, #396	; (adr r3, 800e550 <atan+0x2f0>)
 800e3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c6:	f7f1 ff7f 	bl	80002c8 <__aeabi_dsub>
 800e3ca:	4632      	mov	r2, r6
 800e3cc:	463b      	mov	r3, r7
 800e3ce:	f7f2 f933 	bl	8000638 <__aeabi_dmul>
 800e3d2:	a361      	add	r3, pc, #388	; (adr r3, 800e558 <atan+0x2f8>)
 800e3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d8:	f7f1 ff76 	bl	80002c8 <__aeabi_dsub>
 800e3dc:	4632      	mov	r2, r6
 800e3de:	463b      	mov	r3, r7
 800e3e0:	f7f2 f92a 	bl	8000638 <__aeabi_dmul>
 800e3e4:	a35e      	add	r3, pc, #376	; (adr r3, 800e560 <atan+0x300>)
 800e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ea:	f7f1 ff6d 	bl	80002c8 <__aeabi_dsub>
 800e3ee:	4632      	mov	r2, r6
 800e3f0:	463b      	mov	r3, r7
 800e3f2:	f7f2 f921 	bl	8000638 <__aeabi_dmul>
 800e3f6:	a35c      	add	r3, pc, #368	; (adr r3, 800e568 <atan+0x308>)
 800e3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fc:	f7f1 ff64 	bl	80002c8 <__aeabi_dsub>
 800e400:	4632      	mov	r2, r6
 800e402:	463b      	mov	r3, r7
 800e404:	f7f2 f918 	bl	8000638 <__aeabi_dmul>
 800e408:	4602      	mov	r2, r0
 800e40a:	460b      	mov	r3, r1
 800e40c:	4640      	mov	r0, r8
 800e40e:	4649      	mov	r1, r9
 800e410:	f7f1 ff5c 	bl	80002cc <__adddf3>
 800e414:	4622      	mov	r2, r4
 800e416:	462b      	mov	r3, r5
 800e418:	f7f2 f90e 	bl	8000638 <__aeabi_dmul>
 800e41c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	d14b      	bne.n	800e4be <atan+0x25e>
 800e426:	4620      	mov	r0, r4
 800e428:	4629      	mov	r1, r5
 800e42a:	f7f1 ff4d 	bl	80002c8 <__aeabi_dsub>
 800e42e:	e72c      	b.n	800e28a <atan+0x2a>
 800e430:	ee10 0a10 	vmov	r0, s0
 800e434:	4b53      	ldr	r3, [pc, #332]	; (800e584 <atan+0x324>)
 800e436:	2200      	movs	r2, #0
 800e438:	4629      	mov	r1, r5
 800e43a:	f7f1 ff45 	bl	80002c8 <__aeabi_dsub>
 800e43e:	4b51      	ldr	r3, [pc, #324]	; (800e584 <atan+0x324>)
 800e440:	4606      	mov	r6, r0
 800e442:	460f      	mov	r7, r1
 800e444:	2200      	movs	r2, #0
 800e446:	4620      	mov	r0, r4
 800e448:	4629      	mov	r1, r5
 800e44a:	f7f1 ff3f 	bl	80002cc <__adddf3>
 800e44e:	4602      	mov	r2, r0
 800e450:	460b      	mov	r3, r1
 800e452:	4630      	mov	r0, r6
 800e454:	4639      	mov	r1, r7
 800e456:	f7f2 fa19 	bl	800088c <__aeabi_ddiv>
 800e45a:	f04f 0a01 	mov.w	sl, #1
 800e45e:	4604      	mov	r4, r0
 800e460:	460d      	mov	r5, r1
 800e462:	e764      	b.n	800e32e <atan+0xce>
 800e464:	4b49      	ldr	r3, [pc, #292]	; (800e58c <atan+0x32c>)
 800e466:	429e      	cmp	r6, r3
 800e468:	da1d      	bge.n	800e4a6 <atan+0x246>
 800e46a:	ee10 0a10 	vmov	r0, s0
 800e46e:	4b48      	ldr	r3, [pc, #288]	; (800e590 <atan+0x330>)
 800e470:	2200      	movs	r2, #0
 800e472:	4629      	mov	r1, r5
 800e474:	f7f1 ff28 	bl	80002c8 <__aeabi_dsub>
 800e478:	4b45      	ldr	r3, [pc, #276]	; (800e590 <atan+0x330>)
 800e47a:	4606      	mov	r6, r0
 800e47c:	460f      	mov	r7, r1
 800e47e:	2200      	movs	r2, #0
 800e480:	4620      	mov	r0, r4
 800e482:	4629      	mov	r1, r5
 800e484:	f7f2 f8d8 	bl	8000638 <__aeabi_dmul>
 800e488:	4b3e      	ldr	r3, [pc, #248]	; (800e584 <atan+0x324>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	f7f1 ff1e 	bl	80002cc <__adddf3>
 800e490:	4602      	mov	r2, r0
 800e492:	460b      	mov	r3, r1
 800e494:	4630      	mov	r0, r6
 800e496:	4639      	mov	r1, r7
 800e498:	f7f2 f9f8 	bl	800088c <__aeabi_ddiv>
 800e49c:	f04f 0a02 	mov.w	sl, #2
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	460d      	mov	r5, r1
 800e4a4:	e743      	b.n	800e32e <atan+0xce>
 800e4a6:	462b      	mov	r3, r5
 800e4a8:	ee10 2a10 	vmov	r2, s0
 800e4ac:	4939      	ldr	r1, [pc, #228]	; (800e594 <atan+0x334>)
 800e4ae:	2000      	movs	r0, #0
 800e4b0:	f7f2 f9ec 	bl	800088c <__aeabi_ddiv>
 800e4b4:	f04f 0a03 	mov.w	sl, #3
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	460d      	mov	r5, r1
 800e4bc:	e737      	b.n	800e32e <atan+0xce>
 800e4be:	4b36      	ldr	r3, [pc, #216]	; (800e598 <atan+0x338>)
 800e4c0:	4e36      	ldr	r6, [pc, #216]	; (800e59c <atan+0x33c>)
 800e4c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e4c6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800e4ca:	e9da 2300 	ldrd	r2, r3, [sl]
 800e4ce:	f7f1 fefb 	bl	80002c8 <__aeabi_dsub>
 800e4d2:	4622      	mov	r2, r4
 800e4d4:	462b      	mov	r3, r5
 800e4d6:	f7f1 fef7 	bl	80002c8 <__aeabi_dsub>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	460b      	mov	r3, r1
 800e4de:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e4e2:	f7f1 fef1 	bl	80002c8 <__aeabi_dsub>
 800e4e6:	f1bb 0f00 	cmp.w	fp, #0
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	460d      	mov	r5, r1
 800e4ee:	f6bf aed6 	bge.w	800e29e <atan+0x3e>
 800e4f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4f6:	461d      	mov	r5, r3
 800e4f8:	e6d1      	b.n	800e29e <atan+0x3e>
 800e4fa:	a51d      	add	r5, pc, #116	; (adr r5, 800e570 <atan+0x310>)
 800e4fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e500:	e6cd      	b.n	800e29e <atan+0x3e>
 800e502:	bf00      	nop
 800e504:	f3af 8000 	nop.w
 800e508:	54442d18 	.word	0x54442d18
 800e50c:	bff921fb 	.word	0xbff921fb
 800e510:	8800759c 	.word	0x8800759c
 800e514:	7e37e43c 	.word	0x7e37e43c
 800e518:	e322da11 	.word	0xe322da11
 800e51c:	3f90ad3a 	.word	0x3f90ad3a
 800e520:	24760deb 	.word	0x24760deb
 800e524:	3fa97b4b 	.word	0x3fa97b4b
 800e528:	a0d03d51 	.word	0xa0d03d51
 800e52c:	3fb10d66 	.word	0x3fb10d66
 800e530:	c54c206e 	.word	0xc54c206e
 800e534:	3fb745cd 	.word	0x3fb745cd
 800e538:	920083ff 	.word	0x920083ff
 800e53c:	3fc24924 	.word	0x3fc24924
 800e540:	5555550d 	.word	0x5555550d
 800e544:	3fd55555 	.word	0x3fd55555
 800e548:	2c6a6c2f 	.word	0x2c6a6c2f
 800e54c:	bfa2b444 	.word	0xbfa2b444
 800e550:	52defd9a 	.word	0x52defd9a
 800e554:	3fadde2d 	.word	0x3fadde2d
 800e558:	af749a6d 	.word	0xaf749a6d
 800e55c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e560:	fe231671 	.word	0xfe231671
 800e564:	3fbc71c6 	.word	0x3fbc71c6
 800e568:	9998ebc4 	.word	0x9998ebc4
 800e56c:	3fc99999 	.word	0x3fc99999
 800e570:	54442d18 	.word	0x54442d18
 800e574:	3ff921fb 	.word	0x3ff921fb
 800e578:	440fffff 	.word	0x440fffff
 800e57c:	7ff00000 	.word	0x7ff00000
 800e580:	3fdbffff 	.word	0x3fdbffff
 800e584:	3ff00000 	.word	0x3ff00000
 800e588:	3ff2ffff 	.word	0x3ff2ffff
 800e58c:	40038000 	.word	0x40038000
 800e590:	3ff80000 	.word	0x3ff80000
 800e594:	bff00000 	.word	0xbff00000
 800e598:	0800f508 	.word	0x0800f508
 800e59c:	0800f4e8 	.word	0x0800f4e8

0800e5a0 <fabs>:
 800e5a0:	ec51 0b10 	vmov	r0, r1, d0
 800e5a4:	ee10 2a10 	vmov	r2, s0
 800e5a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e5ac:	ec43 2b10 	vmov	d0, r2, r3
 800e5b0:	4770      	bx	lr

0800e5b2 <atan2>:
 800e5b2:	f000 b835 	b.w	800e620 <__ieee754_atan2>
	...

0800e5b8 <sqrt>:
 800e5b8:	b538      	push	{r3, r4, r5, lr}
 800e5ba:	ed2d 8b02 	vpush	{d8}
 800e5be:	ec55 4b10 	vmov	r4, r5, d0
 800e5c2:	f000 f8f7 	bl	800e7b4 <__ieee754_sqrt>
 800e5c6:	4b15      	ldr	r3, [pc, #84]	; (800e61c <sqrt+0x64>)
 800e5c8:	eeb0 8a40 	vmov.f32	s16, s0
 800e5cc:	eef0 8a60 	vmov.f32	s17, s1
 800e5d0:	f993 3000 	ldrsb.w	r3, [r3]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	d019      	beq.n	800e60c <sqrt+0x54>
 800e5d8:	4622      	mov	r2, r4
 800e5da:	462b      	mov	r3, r5
 800e5dc:	4620      	mov	r0, r4
 800e5de:	4629      	mov	r1, r5
 800e5e0:	f7f2 fac4 	bl	8000b6c <__aeabi_dcmpun>
 800e5e4:	b990      	cbnz	r0, 800e60c <sqrt+0x54>
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	4629      	mov	r1, r5
 800e5ee:	f7f2 fa95 	bl	8000b1c <__aeabi_dcmplt>
 800e5f2:	b158      	cbz	r0, 800e60c <sqrt+0x54>
 800e5f4:	f7fc ff6a 	bl	800b4cc <__errno>
 800e5f8:	2321      	movs	r3, #33	; 0x21
 800e5fa:	6003      	str	r3, [r0, #0]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	2300      	movs	r3, #0
 800e600:	4610      	mov	r0, r2
 800e602:	4619      	mov	r1, r3
 800e604:	f7f2 f942 	bl	800088c <__aeabi_ddiv>
 800e608:	ec41 0b18 	vmov	d8, r0, r1
 800e60c:	eeb0 0a48 	vmov.f32	s0, s16
 800e610:	eef0 0a68 	vmov.f32	s1, s17
 800e614:	ecbd 8b02 	vpop	{d8}
 800e618:	bd38      	pop	{r3, r4, r5, pc}
 800e61a:	bf00      	nop
 800e61c:	2000027c 	.word	0x2000027c

0800e620 <__ieee754_atan2>:
 800e620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e624:	ec57 6b11 	vmov	r6, r7, d1
 800e628:	4273      	negs	r3, r6
 800e62a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e7b0 <__ieee754_atan2+0x190>
 800e62e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e632:	4333      	orrs	r3, r6
 800e634:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e638:	4573      	cmp	r3, lr
 800e63a:	ec51 0b10 	vmov	r0, r1, d0
 800e63e:	ee11 8a10 	vmov	r8, s2
 800e642:	d80a      	bhi.n	800e65a <__ieee754_atan2+0x3a>
 800e644:	4244      	negs	r4, r0
 800e646:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e64a:	4304      	orrs	r4, r0
 800e64c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e650:	4574      	cmp	r4, lr
 800e652:	ee10 9a10 	vmov	r9, s0
 800e656:	468c      	mov	ip, r1
 800e658:	d907      	bls.n	800e66a <__ieee754_atan2+0x4a>
 800e65a:	4632      	mov	r2, r6
 800e65c:	463b      	mov	r3, r7
 800e65e:	f7f1 fe35 	bl	80002cc <__adddf3>
 800e662:	ec41 0b10 	vmov	d0, r0, r1
 800e666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e66a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e66e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e672:	4334      	orrs	r4, r6
 800e674:	d103      	bne.n	800e67e <__ieee754_atan2+0x5e>
 800e676:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e67a:	f7ff bdf1 	b.w	800e260 <atan>
 800e67e:	17bc      	asrs	r4, r7, #30
 800e680:	f004 0402 	and.w	r4, r4, #2
 800e684:	ea53 0909 	orrs.w	r9, r3, r9
 800e688:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e68c:	d107      	bne.n	800e69e <__ieee754_atan2+0x7e>
 800e68e:	2c02      	cmp	r4, #2
 800e690:	d060      	beq.n	800e754 <__ieee754_atan2+0x134>
 800e692:	2c03      	cmp	r4, #3
 800e694:	d1e5      	bne.n	800e662 <__ieee754_atan2+0x42>
 800e696:	a142      	add	r1, pc, #264	; (adr r1, 800e7a0 <__ieee754_atan2+0x180>)
 800e698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e69c:	e7e1      	b.n	800e662 <__ieee754_atan2+0x42>
 800e69e:	ea52 0808 	orrs.w	r8, r2, r8
 800e6a2:	d106      	bne.n	800e6b2 <__ieee754_atan2+0x92>
 800e6a4:	f1bc 0f00 	cmp.w	ip, #0
 800e6a8:	da5f      	bge.n	800e76a <__ieee754_atan2+0x14a>
 800e6aa:	a13f      	add	r1, pc, #252	; (adr r1, 800e7a8 <__ieee754_atan2+0x188>)
 800e6ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6b0:	e7d7      	b.n	800e662 <__ieee754_atan2+0x42>
 800e6b2:	4572      	cmp	r2, lr
 800e6b4:	d10f      	bne.n	800e6d6 <__ieee754_atan2+0xb6>
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	f104 34ff 	add.w	r4, r4, #4294967295
 800e6bc:	d107      	bne.n	800e6ce <__ieee754_atan2+0xae>
 800e6be:	2c02      	cmp	r4, #2
 800e6c0:	d84c      	bhi.n	800e75c <__ieee754_atan2+0x13c>
 800e6c2:	4b35      	ldr	r3, [pc, #212]	; (800e798 <__ieee754_atan2+0x178>)
 800e6c4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e6c8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e6cc:	e7c9      	b.n	800e662 <__ieee754_atan2+0x42>
 800e6ce:	2c02      	cmp	r4, #2
 800e6d0:	d848      	bhi.n	800e764 <__ieee754_atan2+0x144>
 800e6d2:	4b32      	ldr	r3, [pc, #200]	; (800e79c <__ieee754_atan2+0x17c>)
 800e6d4:	e7f6      	b.n	800e6c4 <__ieee754_atan2+0xa4>
 800e6d6:	4573      	cmp	r3, lr
 800e6d8:	d0e4      	beq.n	800e6a4 <__ieee754_atan2+0x84>
 800e6da:	1a9b      	subs	r3, r3, r2
 800e6dc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e6e0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e6e4:	da1e      	bge.n	800e724 <__ieee754_atan2+0x104>
 800e6e6:	2f00      	cmp	r7, #0
 800e6e8:	da01      	bge.n	800e6ee <__ieee754_atan2+0xce>
 800e6ea:	323c      	adds	r2, #60	; 0x3c
 800e6ec:	db1e      	blt.n	800e72c <__ieee754_atan2+0x10c>
 800e6ee:	4632      	mov	r2, r6
 800e6f0:	463b      	mov	r3, r7
 800e6f2:	f7f2 f8cb 	bl	800088c <__aeabi_ddiv>
 800e6f6:	ec41 0b10 	vmov	d0, r0, r1
 800e6fa:	f7ff ff51 	bl	800e5a0 <fabs>
 800e6fe:	f7ff fdaf 	bl	800e260 <atan>
 800e702:	ec51 0b10 	vmov	r0, r1, d0
 800e706:	2c01      	cmp	r4, #1
 800e708:	d013      	beq.n	800e732 <__ieee754_atan2+0x112>
 800e70a:	2c02      	cmp	r4, #2
 800e70c:	d015      	beq.n	800e73a <__ieee754_atan2+0x11a>
 800e70e:	2c00      	cmp	r4, #0
 800e710:	d0a7      	beq.n	800e662 <__ieee754_atan2+0x42>
 800e712:	a319      	add	r3, pc, #100	; (adr r3, 800e778 <__ieee754_atan2+0x158>)
 800e714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e718:	f7f1 fdd6 	bl	80002c8 <__aeabi_dsub>
 800e71c:	a318      	add	r3, pc, #96	; (adr r3, 800e780 <__ieee754_atan2+0x160>)
 800e71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e722:	e014      	b.n	800e74e <__ieee754_atan2+0x12e>
 800e724:	a118      	add	r1, pc, #96	; (adr r1, 800e788 <__ieee754_atan2+0x168>)
 800e726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e72a:	e7ec      	b.n	800e706 <__ieee754_atan2+0xe6>
 800e72c:	2000      	movs	r0, #0
 800e72e:	2100      	movs	r1, #0
 800e730:	e7e9      	b.n	800e706 <__ieee754_atan2+0xe6>
 800e732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e736:	4619      	mov	r1, r3
 800e738:	e793      	b.n	800e662 <__ieee754_atan2+0x42>
 800e73a:	a30f      	add	r3, pc, #60	; (adr r3, 800e778 <__ieee754_atan2+0x158>)
 800e73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e740:	f7f1 fdc2 	bl	80002c8 <__aeabi_dsub>
 800e744:	4602      	mov	r2, r0
 800e746:	460b      	mov	r3, r1
 800e748:	a10d      	add	r1, pc, #52	; (adr r1, 800e780 <__ieee754_atan2+0x160>)
 800e74a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e74e:	f7f1 fdbb 	bl	80002c8 <__aeabi_dsub>
 800e752:	e786      	b.n	800e662 <__ieee754_atan2+0x42>
 800e754:	a10a      	add	r1, pc, #40	; (adr r1, 800e780 <__ieee754_atan2+0x160>)
 800e756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e75a:	e782      	b.n	800e662 <__ieee754_atan2+0x42>
 800e75c:	a10c      	add	r1, pc, #48	; (adr r1, 800e790 <__ieee754_atan2+0x170>)
 800e75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e762:	e77e      	b.n	800e662 <__ieee754_atan2+0x42>
 800e764:	2000      	movs	r0, #0
 800e766:	2100      	movs	r1, #0
 800e768:	e77b      	b.n	800e662 <__ieee754_atan2+0x42>
 800e76a:	a107      	add	r1, pc, #28	; (adr r1, 800e788 <__ieee754_atan2+0x168>)
 800e76c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e770:	e777      	b.n	800e662 <__ieee754_atan2+0x42>
 800e772:	bf00      	nop
 800e774:	f3af 8000 	nop.w
 800e778:	33145c07 	.word	0x33145c07
 800e77c:	3ca1a626 	.word	0x3ca1a626
 800e780:	54442d18 	.word	0x54442d18
 800e784:	400921fb 	.word	0x400921fb
 800e788:	54442d18 	.word	0x54442d18
 800e78c:	3ff921fb 	.word	0x3ff921fb
 800e790:	54442d18 	.word	0x54442d18
 800e794:	3fe921fb 	.word	0x3fe921fb
 800e798:	0800f528 	.word	0x0800f528
 800e79c:	0800f540 	.word	0x0800f540
 800e7a0:	54442d18 	.word	0x54442d18
 800e7a4:	c00921fb 	.word	0xc00921fb
 800e7a8:	54442d18 	.word	0x54442d18
 800e7ac:	bff921fb 	.word	0xbff921fb
 800e7b0:	7ff00000 	.word	0x7ff00000

0800e7b4 <__ieee754_sqrt>:
 800e7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7b8:	ec55 4b10 	vmov	r4, r5, d0
 800e7bc:	4e56      	ldr	r6, [pc, #344]	; (800e918 <__ieee754_sqrt+0x164>)
 800e7be:	43ae      	bics	r6, r5
 800e7c0:	ee10 0a10 	vmov	r0, s0
 800e7c4:	ee10 3a10 	vmov	r3, s0
 800e7c8:	4629      	mov	r1, r5
 800e7ca:	462a      	mov	r2, r5
 800e7cc:	d110      	bne.n	800e7f0 <__ieee754_sqrt+0x3c>
 800e7ce:	ee10 2a10 	vmov	r2, s0
 800e7d2:	462b      	mov	r3, r5
 800e7d4:	f7f1 ff30 	bl	8000638 <__aeabi_dmul>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	460b      	mov	r3, r1
 800e7dc:	4620      	mov	r0, r4
 800e7de:	4629      	mov	r1, r5
 800e7e0:	f7f1 fd74 	bl	80002cc <__adddf3>
 800e7e4:	4604      	mov	r4, r0
 800e7e6:	460d      	mov	r5, r1
 800e7e8:	ec45 4b10 	vmov	d0, r4, r5
 800e7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7f0:	2d00      	cmp	r5, #0
 800e7f2:	dc10      	bgt.n	800e816 <__ieee754_sqrt+0x62>
 800e7f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e7f8:	4330      	orrs	r0, r6
 800e7fa:	d0f5      	beq.n	800e7e8 <__ieee754_sqrt+0x34>
 800e7fc:	b15d      	cbz	r5, 800e816 <__ieee754_sqrt+0x62>
 800e7fe:	ee10 2a10 	vmov	r2, s0
 800e802:	462b      	mov	r3, r5
 800e804:	ee10 0a10 	vmov	r0, s0
 800e808:	f7f1 fd5e 	bl	80002c8 <__aeabi_dsub>
 800e80c:	4602      	mov	r2, r0
 800e80e:	460b      	mov	r3, r1
 800e810:	f7f2 f83c 	bl	800088c <__aeabi_ddiv>
 800e814:	e7e6      	b.n	800e7e4 <__ieee754_sqrt+0x30>
 800e816:	1509      	asrs	r1, r1, #20
 800e818:	d076      	beq.n	800e908 <__ieee754_sqrt+0x154>
 800e81a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e81e:	07ce      	lsls	r6, r1, #31
 800e820:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800e824:	bf5e      	ittt	pl
 800e826:	0fda      	lsrpl	r2, r3, #31
 800e828:	005b      	lslpl	r3, r3, #1
 800e82a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800e82e:	0fda      	lsrs	r2, r3, #31
 800e830:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800e834:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800e838:	2000      	movs	r0, #0
 800e83a:	106d      	asrs	r5, r5, #1
 800e83c:	005b      	lsls	r3, r3, #1
 800e83e:	f04f 0e16 	mov.w	lr, #22
 800e842:	4684      	mov	ip, r0
 800e844:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e848:	eb0c 0401 	add.w	r4, ip, r1
 800e84c:	4294      	cmp	r4, r2
 800e84e:	bfde      	ittt	le
 800e850:	1b12      	suble	r2, r2, r4
 800e852:	eb04 0c01 	addle.w	ip, r4, r1
 800e856:	1840      	addle	r0, r0, r1
 800e858:	0052      	lsls	r2, r2, #1
 800e85a:	f1be 0e01 	subs.w	lr, lr, #1
 800e85e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e862:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e866:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e86a:	d1ed      	bne.n	800e848 <__ieee754_sqrt+0x94>
 800e86c:	4671      	mov	r1, lr
 800e86e:	2720      	movs	r7, #32
 800e870:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e874:	4562      	cmp	r2, ip
 800e876:	eb04 060e 	add.w	r6, r4, lr
 800e87a:	dc02      	bgt.n	800e882 <__ieee754_sqrt+0xce>
 800e87c:	d113      	bne.n	800e8a6 <__ieee754_sqrt+0xf2>
 800e87e:	429e      	cmp	r6, r3
 800e880:	d811      	bhi.n	800e8a6 <__ieee754_sqrt+0xf2>
 800e882:	2e00      	cmp	r6, #0
 800e884:	eb06 0e04 	add.w	lr, r6, r4
 800e888:	da43      	bge.n	800e912 <__ieee754_sqrt+0x15e>
 800e88a:	f1be 0f00 	cmp.w	lr, #0
 800e88e:	db40      	blt.n	800e912 <__ieee754_sqrt+0x15e>
 800e890:	f10c 0801 	add.w	r8, ip, #1
 800e894:	eba2 020c 	sub.w	r2, r2, ip
 800e898:	429e      	cmp	r6, r3
 800e89a:	bf88      	it	hi
 800e89c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e8a0:	1b9b      	subs	r3, r3, r6
 800e8a2:	4421      	add	r1, r4
 800e8a4:	46c4      	mov	ip, r8
 800e8a6:	0052      	lsls	r2, r2, #1
 800e8a8:	3f01      	subs	r7, #1
 800e8aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e8ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e8b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e8b6:	d1dd      	bne.n	800e874 <__ieee754_sqrt+0xc0>
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	d006      	beq.n	800e8ca <__ieee754_sqrt+0x116>
 800e8bc:	1c4c      	adds	r4, r1, #1
 800e8be:	bf13      	iteet	ne
 800e8c0:	3101      	addne	r1, #1
 800e8c2:	3001      	addeq	r0, #1
 800e8c4:	4639      	moveq	r1, r7
 800e8c6:	f021 0101 	bicne.w	r1, r1, #1
 800e8ca:	1043      	asrs	r3, r0, #1
 800e8cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e8d0:	0849      	lsrs	r1, r1, #1
 800e8d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e8d6:	07c2      	lsls	r2, r0, #31
 800e8d8:	bf48      	it	mi
 800e8da:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e8de:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e8e2:	460c      	mov	r4, r1
 800e8e4:	463d      	mov	r5, r7
 800e8e6:	e77f      	b.n	800e7e8 <__ieee754_sqrt+0x34>
 800e8e8:	0ada      	lsrs	r2, r3, #11
 800e8ea:	3815      	subs	r0, #21
 800e8ec:	055b      	lsls	r3, r3, #21
 800e8ee:	2a00      	cmp	r2, #0
 800e8f0:	d0fa      	beq.n	800e8e8 <__ieee754_sqrt+0x134>
 800e8f2:	02d7      	lsls	r7, r2, #11
 800e8f4:	d50a      	bpl.n	800e90c <__ieee754_sqrt+0x158>
 800e8f6:	f1c1 0420 	rsb	r4, r1, #32
 800e8fa:	fa23 f404 	lsr.w	r4, r3, r4
 800e8fe:	1e4d      	subs	r5, r1, #1
 800e900:	408b      	lsls	r3, r1
 800e902:	4322      	orrs	r2, r4
 800e904:	1b41      	subs	r1, r0, r5
 800e906:	e788      	b.n	800e81a <__ieee754_sqrt+0x66>
 800e908:	4608      	mov	r0, r1
 800e90a:	e7f0      	b.n	800e8ee <__ieee754_sqrt+0x13a>
 800e90c:	0052      	lsls	r2, r2, #1
 800e90e:	3101      	adds	r1, #1
 800e910:	e7ef      	b.n	800e8f2 <__ieee754_sqrt+0x13e>
 800e912:	46e0      	mov	r8, ip
 800e914:	e7be      	b.n	800e894 <__ieee754_sqrt+0xe0>
 800e916:	bf00      	nop
 800e918:	7ff00000 	.word	0x7ff00000

0800e91c <_init>:
 800e91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e91e:	bf00      	nop
 800e920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e922:	bc08      	pop	{r3}
 800e924:	469e      	mov	lr, r3
 800e926:	4770      	bx	lr

0800e928 <_fini>:
 800e928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e92a:	bf00      	nop
 800e92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e92e:	bc08      	pop	{r3}
 800e930:	469e      	mov	lr, r3
 800e932:	4770      	bx	lr
